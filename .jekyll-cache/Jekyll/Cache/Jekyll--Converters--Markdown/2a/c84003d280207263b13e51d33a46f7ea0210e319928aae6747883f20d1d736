I"5
<p>dotfiles는 개발자들이 사용하는 <code class="highlighter-rouge">.bash_profile</code>, <code class="highlighter-rouge">.ssh</code> 등 dot(<code class="highlighter-rouge">.</code>)으로 시작하는 파일 또는 디렉터리의 모음이다. <strong>dotfiles는 콘솔용 바이너리(e.g. <code class="highlighter-rouge">gcc</code>), 라이브러리, 애플리케이션의 설치 뿐만아니라, 그들의 설정을 잘 저장해 두었다가 컴퓨터를 빠르게 재구성하기 위한 워크플로우</strong>다.</p>

<p>dotfiles를 구성해두면, 예를 들어 <code class="highlighter-rouge">gulp</code>, <code class="highlighter-rouge">git-flow</code>, <code class="highlighter-rouge">sublime-text3</code>, <code class="highlighter-rouge">google-chrome</code> 등, 내가 사용하는 애플리케이션 및 개발 도구의 목록과 설정을 저장해 두었다가 다른 컴퓨터 또는 새 운영체제에서 애플리케이션 설치뿐만아니라, 심지어 코드 에디터의 설정까지도 다른/이전 컴퓨터와 똑같이 <strong>‘바로’</strong> 사용할 수 있다.</p>

<p>이번에 맥을 밀고 다시 설치할 일이 있어서, 오랫 동안 미루어 두었던 dotfiles를 시전했다. 필자도 이번 경험을 통해 알게된 사실인데, 운영체제를 다시 설치할 때만 dotfiles를 만들거나 적용할 수 있다고 생각하지만, 사실이 아니다. <strong>dotfiles는 운영체제를 다시 설치하지 않더라도 언제든 준비할 수 있다.</strong></p>

<p><a href="https://dotfiles.github.io/">유명한 dotfiles</a>들을 검토했는데 정석은 없더라. 쉘 스크립트만 이용한 사람, 주제별로 디렉터리를 분리한 사람, 다른 툴을 이용하는 사람, 운영체제도 제각각이더라. 이 포스트에서는 맥 운영체제 기준으로 dotfiles를 준비하는 방법을 공유한다. 다음 도구들을 이용한다. 앞서 말했듯이 정석은 없으므로 꼭 이렇게 할 필요는 없다.</p>

<ol>
  <li><a href="//brew.sh/">Homebrew</a></li>
  <li><a href="//github.com/Homebrew/homebrew-bundle">Homebrew Bundler</a></li>
  <li><a href="//github.com/lra/mackup">Mackup</a></li>
  <li>.osx</li>
  <li>Shell Script</li>
</ol>

<p>시전하는 과정에서 운영체제를 두 번 설치해 봤는데, 이 정도 경험으로는 다른 이의 맥에서도 동작하는 은총알 dotfiles How-to를 쓰기에는 무리다. 어쨌든 진리는 <strong>‘평상시에 dotfiles를 준비해 두면, 불의의 사고에 빠르게 대처할 수 있다’</strong>라는 점이다.</p>

:ET