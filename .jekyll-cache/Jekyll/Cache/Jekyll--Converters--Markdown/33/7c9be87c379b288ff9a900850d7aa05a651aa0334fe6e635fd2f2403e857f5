I"!^<p>국어 사전에서는 <strong>‘일반적인 규칙이나 정례에서 벗어나는 일’</strong>을 예외라고 정의하고 있다.</p>

<p>컴퓨터에서 예외란 <strong>‘프로그램을 실행하는 중에 발생하는 비정상적인 상황’</strong>으로 프로그램의 일반적인 실행 흐름을 바꾼다. 예를 들어 함수에 허용하지 않는 인자가 전달되었다거나, 디스크에서 무언가를 읽거나 써야 하는데 디스크에 접근할 수 없다거나, 메모리 공간이 부족해서 변수 값을 저장할 수 없는 경우 등을 들 수 있다.</p>

<p>개발자는 프로그래밍을 할 때 발생할 수 있는 예외 상황을 미리 식별하고, 앞서 말한 상황이 발생하면 예외를 던지고(Throw 또는 Raise), 잡은 예외를 개발자 자신만의 방식으로 핸들링할 수 있다(Catch 또는 Rescue). 개발자가 예상치 못한 예외라면 런타임(PHP의 경우라면 PHP 엔진)이 프로그램의 실행을 멈추고 오류 메시지를 출력하는 등의 일을 할 것이다.</p>

<p><a href="//rypress.com/tutorials/objective-c/media/exceptions/exceptions-vs-errors.png"><img src="//rypress.com/tutorials/objective-c/media/exceptions/exceptions-vs-errors.png" alt="" /></a></p>

<p>위 그림은 Objective-C 쪽 얘긴데, 사실 PHP에서 완전 반대다. 어쨌든 PHP 7부터는 <code class="highlighter-rouge">try {...} catch {...}</code> 구문에서 예외(Exception) 뿐만 아니라, 오류(Error)도 캐치할 수 있도록 지원하고 있다.</p>

<p>이 포스트에서는 PHP의 예외 클래스(Exception Class)를 사용하는 기본적인 방법을 설명한다.</p>

<!--more-->
<div class="spacer">• • •</div>

<p>다음 PHP 예제 코드는 예외 클래스의 기본적인 사용법을 담고 있다.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span> <span class="c1">// exceptions.php</span>

<span class="cd">/**
 * 개발자가 직접 소비하지 않은 예외를 처리하기 위한 전역 예외 처리기.
 */</span>
<span class="k">function</span> <span class="nf">exception_handler</span><span class="p">(</span><span class="nv">$e</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nb">var_dump</span><span class="p">(</span>
        <span class="nv">$e</span><span class="o">-&gt;</span><span class="na">getMessage</span><span class="p">(),</span>
        <span class="nb">get_class</span><span class="p">(</span><span class="nv">$e</span><span class="o">-&gt;</span><span class="na">getPrevious</span><span class="p">())</span>
    <span class="p">);</span>
<span class="p">}</span>

<span class="cd">/**
 * 전역 예외 처리기를 설정한다.
 * 여기까지가 일종의 프레임워크 부트스트랩 부분이다.
 */</span>
<span class="nb">set_exception_handler</span><span class="p">(</span><span class="s1">'exception_handler'</span><span class="p">);</span>

<span class="cd">/**
 * 실행할 때 예외를 식별하고 예외를 던지도록 구현해 놓은 함수. 
 * 외부에서 가져온 라이브러리나 직접 구현한 서비스라고 가정 하자. 
 */</span>
<span class="k">function</span> <span class="nf">foo</span><span class="p">(</span><span class="nv">$arg</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nb">is_int</span><span class="p">(</span><span class="nv">$arg</span><span class="p">)</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nx">InvalidArgumentException</span><span class="p">(</span><span class="s1">'입력한 인자가 정수가 아닙니다.'</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="s2">"함수가 받은 인자는 </span><span class="si">{</span><span class="nv">$arg</span><span class="si">}</span><span class="s2">입니다."</span><span class="p">;</span>
<span class="p">}</span>

<span class="cd">/**
 * 여기서 부터 클라이언트 코드(우리가 짠 애플리케이션)라고 가정하자.
 */</span> 
<span class="k">try</span> <span class="p">{</span>
    <span class="nb">var_dump</span><span class="p">(</span><span class="nx">foo</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">Throwable</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
    <span class="nb">var_dump</span><span class="p">(</span>
        <span class="nv">$e</span><span class="o">-&gt;</span><span class="na">getMessage</span><span class="p">(),</span> 
        <span class="nv">$e</span><span class="o">-&gt;</span><span class="na">getCode</span><span class="p">(),</span> 
        <span class="nv">$e</span><span class="o">-&gt;</span><span class="na">getFile</span><span class="p">(),</span> 
        <span class="nv">$e</span><span class="o">-&gt;</span><span class="na">getLine</span><span class="p">(),</span> 
        <span class="nv">$e</span><span class="o">-&gt;</span><span class="na">getTrace</span><span class="p">(),</span> 
        <span class="nv">$e</span><span class="o">-&gt;</span><span class="na">getPrevious</span><span class="p">(),</span> 
        <span class="nv">$e</span><span class="o">-&gt;</span><span class="na">getTraceAsString</span><span class="p">()</span>
    <span class="p">);</span>

    <span class="k">throw</span> <span class="k">new</span> <span class="nx">Exception</span><span class="p">(</span>
        <span class="s1">'예외 체인을 따라 버블 업 합니다.'</span> <span class="o">.</span> <span class="nv">$e</span><span class="o">-&gt;</span><span class="na">getMessage</span><span class="p">(),</span>
        <span class="nv">$e</span><span class="o">-&gt;</span><span class="na">getCode</span><span class="p">(),</span>
        <span class="nv">$e</span>
    <span class="p">);</span>
<span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>
    <span class="nb">var_dump</span><span class="p">(</span><span class="s1">'Finally 안쪽의 문장은 무조건 실행됩니다.'</span><span class="p">);</span>
<span class="p">}</span>

<span class="nb">var_dump</span><span class="p">(</span><span class="s1">'마지막 문장입니다.'</span><span class="p">);</span>
</code></pre></div></div>

<p>PHP에서 예외를 던질 때는 <code class="highlighter-rouge">throw</code> 키워드를 사용하고, 그 다음에 던질 예외 클래스의 객체를 제공하면 된다.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>

<span class="k">throw</span> <span class="k">new</span> <span class="nx">FooException</span><span class="p">(</span><span class="s1">'메시지'</span><span class="p">);</span>
</code></pre></div></div>

<p>예외 클래스의 프로토타입(생성자의 인자)은 다음과 같다. 대괄호는 배열 문법이 아니고, 선택사항(optional)이란 뜻이다. 즉 생성자에 아무런 인자를 안 넣어도 된다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Exception::__construct <span class="o">([</span> string <span class="nv">$message</span> <span class="o">=</span> <span class="s2">""</span> <span class="o">[</span>, int <span class="nv">$code</span> <span class="o">=</span> 0 <span class="o">[</span>, Throwable <span class="nv">$previous</span> <span class="o">=</span> NULL <span class="o">]]]</span> <span class="o">)</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">Exception</code>은 PHP의 SPL(Standard PHP Library, PHP 바이너리에 내장)이 제공하는 최상위 예외 클래스다. 우리 예제 코드에서 사용한 <code class="highlighter-rouge">InvalidArgumentException</code>과 <code class="highlighter-rouge">Exception</code>과의 상속 관계는 다음과 같다. 살짝 스포일링하자면, SPL 또는 프레임워크가 제공하는 예외 클래스를 상속하여 우리만의 커스컴 예외 클래스를 만들 수 있다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>InvalidArgumentException -&gt; LogicException -&gt; Exception
</code></pre></div></div>

<h2 id="1-정상-실행">1. 정상 실행</h2>

<p>이 코드의 실행 결과는 다음과 같다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/working-with-exceptions <span class="nv">$ </span>php exceptions.php
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/working-with-exceptions/exceptions.php:33:
string<span class="o">(</span>38<span class="o">)</span> <span class="s2">"함수가 받은 인자는 1입니다."</span>

~/working-with-exceptions/exceptions.php:51:
string<span class="o">(</span>54<span class="o">)</span> <span class="s2">"Finally 안쪽의 문장은 무조건 실행됩니다."</span>

~/working-with-exceptions/exceptions.php:54:
string<span class="o">(</span>26<span class="o">)</span> <span class="s2">"마지막 문장입니다."</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">foo()</code> 함수를 <code class="highlighter-rouge">try {}</code> 블록 안에서 호출하고 있다.</li>
  <li><code class="highlighter-rouge">foo()</code> 함수는 정수 <code class="highlighter-rouge">1</code>을 인자로 받았으므로, <code class="highlighter-rouge">if (is_int($arg) === false) {...}</code> 부분을 통과하고 정상적으로 값을 반환한다.</li>
  <li><code class="highlighter-rouge">finally {}</code> 블록 안의 내용은 예외가 발생하든 하지 않든 무조건 실행된다.</li>
  <li><code class="highlighter-rouge">try {} catch {}</code> 블록에서 <code class="highlighter-rouge">throw</code> 또는 <code class="highlighter-rouge">return</code> 구문을 만나지 않았으므로 마지막 문장은 실행된다.</li>
</ul>

<h2 id="2-예외-상황">2. 예외 상황</h2>

<p>예외 상황을 만들어 보자.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span> <span class="c1">// exceptions.php</span>

<span class="c1">// ...</span>

<span class="k">try</span> <span class="p">{</span>
    <span class="nb">var_dump</span><span class="p">(</span><span class="nx">foo</span><span class="p">(</span><span class="s1">'string'</span><span class="p">));</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">Throwable</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ...</span>
<span class="p">}</span>

<span class="c1">// ...</span>
</code></pre></div></div>

<p>수정한 코드의 실행 결과는 다음과 같다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/working-with-exceptions <span class="nv">$ </span>php exceptions.php
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/working-with-exceptions/exceptions.php:42:
string<span class="o">(</span>43<span class="o">)</span> <span class="s2">"입력한 인자가 정수가 아닙니다."</span>

~/working-with-exceptions/exceptions.php:42:
int<span class="o">(</span>0<span class="o">)</span>

~/working-with-exceptions/exceptions.php:42:
string<span class="o">(</span>37<span class="o">)</span> <span class="s2">"~/working-with-exceptions/exceptions.php"</span>

~/working-with-exceptions/exceptions.php:42:
int<span class="o">(</span>25<span class="o">)</span>

~/working-with-exceptions/exceptions.php:42:
array<span class="o">(</span>1<span class="o">)</span> <span class="o">{</span>
  <span class="o">[</span>0] <span class="o">=&gt;</span>
  array<span class="o">(</span>4<span class="o">)</span> <span class="o">{</span>
    <span class="s1">'file'</span> <span class="o">=&gt;</span>
    string<span class="o">(</span>37<span class="o">)</span> <span class="s2">"~/working-with-exceptions/exceptions.php"</span>
    <span class="s1">'line'</span> <span class="o">=&gt;</span>
    int<span class="o">(</span>33<span class="o">)</span>
    <span class="s1">'function'</span> <span class="o">=&gt;</span>
    string<span class="o">(</span>3<span class="o">)</span> <span class="s2">"foo"</span>
    <span class="s1">'args'</span> <span class="o">=&gt;</span>
    array<span class="o">(</span>1<span class="o">)</span> <span class="o">{</span>
      <span class="o">[</span>0] <span class="o">=&gt;</span>
      string<span class="o">(</span>6<span class="o">)</span> <span class="s2">"string"</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>

~/working-with-exceptions/exceptions.php:42:
NULL

~/working-with-exceptions/exceptions.php:42:
string<span class="o">(</span>69<span class="o">)</span> <span class="s2">"#0 ~/working-with-exceptions/exceptions.php(33): foo('string')
#1 {main}"</span>

~/working-with-exceptions/exceptions.php:51:
string<span class="o">(</span>54<span class="o">)</span> <span class="s2">"Finally 안쪽의 문장은 무조건 실행됩니다."</span>

~/working-with-exceptions/exceptions.php:10:
string<span class="o">(</span>88<span class="o">)</span> <span class="s2">"예외 체인을 따라 버블 업 합니다.입력한 인자가 정수가 아닙니다."</span>

~/working-with-exceptions/exceptions.php:10:
string<span class="o">(</span>24<span class="o">)</span> <span class="s2">"InvalidArgumentException"</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">foo()</code> 함수는 문자열 <code class="highlighter-rouge">'string'</code>을 인자로 받았으므로, <code class="highlighter-rouge">if (is_int($arg) === false) {...}</code> 부분에 걸려 <code class="highlighter-rouge">InvalidArgumentException</code>을 던진다. 프로그램의 실행 제어 측면에서 <code class="highlighter-rouge">throw</code> 키워드는 해당 블록에서 <code class="highlighter-rouge">throw</code> 다음 문장을 실행하지 않는다는 점에서 <code class="highlighter-rouge">return</code>과 같다.</li>
  <li><code class="highlighter-rouge">foo()</code> 함수에서 던진 예외는 <code class="highlighter-rouge">catch (Throwable $e) {...}</code>에서 잡는다. 예외를 잡을 때는 잡을 예외 별로 <code class="highlighter-rouge">catch</code> 블록을 쓸 수 있다. 우리 예제에서는 <code class="highlighter-rouge">Throwable</code>이란 녀석을 전부 잡겠다고 선언하고 있는데, 이는 PHP 7이상의 기능으로 모든 예외와 모든 오류를 전부 잡겠다는 의미다.</li>
  <li>우리의 <code class="highlighter-rouge">catch</code> 블록에서는 잡은 예외 객체가 제공하는 다양한 메서드를 보여주고 있다. 즉, 이 예외 메서드들을 이용하여 로깅을 하거나 슬랙을 보내는 등의 예외 처리를 할 수 있다. 해당 내용은 다음 포스트를 참고 하시기 바란다.
    <ul>
      <li><a href="/work-n-play/php-application-logging-to-elasticsearch-using-monolog/">Monolog를 이용한 애플리케이션 로깅</a></li>
      <li><a href="/work-n-play/super-fast-debug-deploy/">엄청나게 빠른 버그 감지, 디버그, 코드 배포</a></li>
    </ul>
  </li>
  <li>예외 처리를 끝내고 다시 예외를 던질 수도 있는데, 이때는 <code class="highlighter-rouge">try {...} catch {...}</code> 블록 밖으로 예외를 던지는 것이고, 이 녀석을 다시 잡는 부분이 없으므로, 코드 시작 부분에 등록한 전역 예외 처리기(<code class="highlighter-rouge">exception_handler()</code>) 함수가 작동한다. 전역 예외 처리기에서 <code class="highlighter-rouge">getPrevious()</code> 메서드를 이용해서 예외 발생의 선후 관계를 확인할 수 있다는 점을 유심히 봐두기 바란다. 실무에서 디버깅할 때 엄청난 도움이 될 수 있다.</li>
  <li><code class="highlighter-rouge">finally {}</code> 블록 안의 내용은 예외가 발생하든 하지 않든 무조건 실행된다.</li>
  <li><code class="highlighter-rouge">catch</code> 블록에서 예외를 다시 던졌으므로, 그 이하의 내용, 즉 마지막 문장은 실행되지 않는다.</li>
</ul>

<h2 id="3-예외-처리-로직-분기">3. 예외 처리 로직 분기</h2>

<p>우리 예제에서는 <code class="highlighter-rouge">foo()</code> 함수를 실행할 때 <code class="highlighter-rouge">InvalidArgumentException</code>만 발생하지만, 실제로는 <code class="highlighter-rouge">try</code> 블록 안쪽의 코드를 실행하는 동안 다양한 예외가 발생할 수 있다. 이 때 <code class="highlighter-rouge">catch</code> 블록에 딱 정확한 예외 이름을 타입 힌트로 제공해서 예외 처리 로직을 분기할 수 있다. 예제 코드를 다음과 같이 수정했다.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span> <span class="c1">// exceptions.php</span>

<span class="c1">// ...</span>

<span class="k">try</span> <span class="p">{</span>
    <span class="nb">var_dump</span><span class="p">(</span><span class="nx">foo</span><span class="p">(</span><span class="s1">'string'</span><span class="p">));</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">InvalidArgumentException</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
    <span class="nb">var_dump</span><span class="p">(</span><span class="s1">'첫번째 catch 블록'</span><span class="p">);</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">UnexpectedValueException</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
    <span class="nb">var_dump</span><span class="p">(</span><span class="s1">'두번째 catch 블록'</span><span class="p">);</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">Exception</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
    <span class="nb">var_dump</span><span class="p">(</span><span class="s1">'세번째 catch 블록'</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// ...</span>
</code></pre></div></div>

<p>실행하면 다음 결과를 볼 수 있다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/working-with-exceptions <span class="nv">$ </span>php exceptions.php
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/working-with-exceptions/exceptions.php:36:
string<span class="o">(</span>22<span class="o">)</span> <span class="s2">"첫번째 catch 블록"</span>

~/working-with-exceptions/exceptions.php:64:
string<span class="o">(</span>26<span class="o">)</span> <span class="s2">"마지막 문장입니다."</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">catch</code>에서 잡는 예외의 순서는 중요하다. 예제를 보자.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span> <span class="c1">// exceptions.php</span>

<span class="c1">// ...</span>

<span class="k">try</span> <span class="p">{</span>
    <span class="nb">var_dump</span><span class="p">(</span><span class="nx">foo</span><span class="p">(</span><span class="s1">'string'</span><span class="p">));</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">Exception</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
    <span class="nb">var_dump</span><span class="p">(</span><span class="s1">'엉뚱한 예외 처리 로직'</span><span class="p">);</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">InvalidArgumentException</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
    <span class="nb">var_dump</span><span class="p">(</span><span class="s1">'우리가 기대하던 내용'</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// ...</span>
</code></pre></div></div>

<p>실행 결과는 이렇다. 항상 구체적인 예외, 즉 자식 예외에서 부모 예외 순으로 잡아야 한다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/working-with-exceptions <span class="nv">$ </span>php exceptions.php
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/working-with-exceptions/exceptions.php:36:
string<span class="o">(</span>30<span class="o">)</span> <span class="s2">"엉뚱한 예외 처리 로직"</span>

~/working-with-exceptions/exceptions.php:65:
string<span class="o">(</span>26<span class="o">)</span> <span class="s2">"마지막 문장입니다."</span>
</code></pre></div></div>

<h2 id="4-결론">4. 결론</h2>

<p>예외를 처리하지 않는 경우를 상상해 보자. <code class="highlighter-rouge">foo()</code> 함수에 타입 힌트를 써서 예외 상황을 만들었다.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>

<span class="k">function</span> <span class="nf">foo</span><span class="p">(</span><span class="kt">int</span> <span class="nv">$arg</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="s2">"함수가 받은 인자는 </span><span class="si">{</span><span class="nv">$arg</span><span class="si">}</span><span class="s2">입니다."</span><span class="p">;</span>
<span class="p">}</span>

<span class="nb">var_dump</span><span class="p">(</span><span class="nx">foo</span><span class="p">(</span><span class="s1">'string'</span><span class="p">));</span>
</code></pre></div></div>

<p>이 코드의 실행 결과는 다음과 같다. 전역 예외 처리기 또는 에러 처리가가 없으므로, PHP 런타임이 치명적 오류(Fatal error)를 내 뱉고 있는 상황이다. 운영 중인 웹 사이트에서 이런 메시지가 나온 적이 있는가? 그런데, 이 상황을 몇 시간째 모르고 있었던 경우는 없는가? 아찔하다~</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PHP Fatal error:  Uncaught TypeError: Argument 1 passed to foo<span class="o">()</span> must be of the <span class="nb">type </span>integer, string given, called <span class="k">in</span> ~/working-with-exceptions/exceptions.php on line 31 and defined <span class="k">in</span> ~/working-with-exceptions/exceptions.php:22
Stack trace:
<span class="c">#0 ~/working-with-exceptions/exceptions.php(31): foo('string')</span>
<span class="c">#1 {main}</span>
  thrown <span class="k">in</span> ~/working-with-exceptions/exceptions.php on line 22

Call Stack:
    0.0002     355912   1. <span class="o">{</span>main<span class="o">}()</span> ~/working-with-exceptions/exceptions.php:0
    0.0002     355912   2. foo<span class="o">()</span> ~/working-with-exceptions/exceptions.php:31
</code></pre></div></div>

<p>다음 편에서는 라라벨 프레임워크를 이용해서 커스텀 예외 클래스를 만들고 프로그램 실행 흐름을 안전하게 제어하는 방법을 살펴 보기로 하자.</p>
:ET