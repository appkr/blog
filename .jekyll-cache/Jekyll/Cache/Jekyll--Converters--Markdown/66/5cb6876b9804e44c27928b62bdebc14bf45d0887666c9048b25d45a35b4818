I"<p><img src="//image.yes24.com/goods/27750871/L" alt="www.yes24.com/24/Goods/27750871" /></p>

<h1 id="1-도메인-모델-시작">1. 도메인 모델 시작</h1>

<p>p7. 아키텍쳐 구성</p>

<ul>
  <li>사용자 인터페이스 또는 표현 (UI, Presentation)</li>
  <li>응용 (Application)</li>
  <li>도메인 (Domain)</li>
  <li>인프라스트럭처 (Infrastructure)</li>
</ul>

<p>p11. 도메인을 모델링할 때 기본이 되는 작업은 모델을 구성하는 <strong>핵심 구성요소</strong>, <strong>규칙</strong>, <strong>기능</strong>을 찾는 것이다.</p>

<p>p17. 엔티티와 밸류</p>

<ul>
  <li>엔티티의 가장 큰 특징은 <strong>식별자</strong>를 갖는다는 점.</li>
  <li>밸류 타입은 <strong>개념적으로 완전한 하나를 표현</strong>할 때 사용한다 (예: “받는 사람”이란 밸류는 이름과 전화번호 속성으로 구성됨).</li>
  <li>밸류 객체의 데이터를 변경할 때는 기존 데이터를 변경하기보다는 변경한 데이터를 갖는 새로운 밸류 객체를 생성한다(Immutable).</li>
  <li>엔티티 타입의 두 객체가 같은지 비교할 때 주로 식별자를 사용한다면, 두 밸류 객체가 같은지 비교할 때는 모든 속성이 같은지 비교해야 한다.</li>
</ul>

<p>p32. 도메인 객체가 불완전한 상태로 사용되는 것을 막으려면 생성 시점에 필요한 것을 전달해 주어야 한다. 즉, <strong>생성자</strong>를 통해 필요한 데이터를 모두 받아야 한다.</p>

:ET