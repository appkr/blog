I"7m<p><strong>FCM(Firebase Cloud Message)은 Android, iOS, Web 등의 클라이언트에 푸쉬 메시지를 보내기 위한 서비스</strong>다. 과거 GCM(Google Cloud Message)이 진화한 것이다.</p>

<p><img src="https://1.bp.blogspot.com/-YIfQT6q8ZM4/Vzyq5z1B8HI/AAAAAAAAAAc/UmWSSMLKtKgtH7CACElUp12zXkrPK5UoACLcB/s1600/image00.png" alt="Firebase Logo" /></p>

<p>PubNub, Pusher 등의 메시징 서비스와 FCM이 다른 점은 단말기가 꺼져 있거나, 잠김 모드에 있거나, 메시지를 받을 애플리케이션이 실행 중이지 않을 때도 메시지를 보낼 수 있다는 점이다.</p>

<p>FCM을 이용한 푸쉬 메시징 시스템을 구성하라면 다음 두 가지가 필요하다.</p>

<ul>
  <li>푸쉬 메시지를 받을 모바일 <strong>단말용 애플리케이션</strong></li>
  <li>푸쉬 메시지를 전송할 모바일 단말을 선별하고, 원하는 메시지와 함께 구글 FCM 서버에 메시지 전송 요청을 부탁할 <strong>애플리케이션 서버</strong>(<a href="https://firebase.google.com/docs/cloud-messaging/server">구글 공식 문서</a>에서는 “앱 서버”라고 칭하기도 한다).</li>
</ul>

<p>이 포스트에서는 <strong>애플리케이션 서버를 구현하는 과정</strong>을 기술해본다. 모바일 단말용 애플리케이션은 이 포스트에서 다루지 않는다.</p>

<!--more-->
<div class="spacer">• • •</div>

<h2 id="1-fcm-작동-원리">1. FCM 작동 원리</h2>

<h3 id="11-프로젝트-등록">1.1. 프로젝트 등록</h3>

<p><a href="https://console.firebase.google.com/">Firebase 콘솔</a>에서 프로젝트를 만든다. 프로젝트를 등록하는 과정 중에 모바일 애플리케이션의 패키지 이름을 등록해야한다. 등록 과정이 끝나면 대시보드의 설정을 클릭해서 서버 키와 발신자 ID를 얻을 수 있다. 이 값은 메시지를 보낼 때 사용된다.</p>

<p><a href="/images/2016-12-18-img-01.png"><img src="/images/2016-12-18-img-01.png" alt="FCM Console" /></a></p>

<p><a href="/images/2016-12-18-img-02.png"><img src="/images/2016-12-18-img-02.png" alt="FCM Console" /></a></p>

<h3 id="12-단말기-등록">1.2. 단말기 등록</h3>

<p>FCM 콘솔에 등록한 패키지 이름으로 FCM SDK를 적용해서 앱을 만들고, 앱을 시작할 때 FCM 서버와 통신하여, 앱을 실행한 해당 단말기를 식별할 수 있는 고유 토큰(<code class="highlighter-rouge">registration_id</code>)을 받을 수 있다. 전화번호처럼 이 단말기의 고유 식별 번호라 생각하면 된다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>App Server      FCM Server      Mobile
│               │ Request token │
│               │&lt;<span class="nt">--------------</span>│
│               │ Respond <span class="s2">"foo"</span> │
│               │--------------&gt;│
│      Token save request <span class="s2">"foo"</span> │
│&lt;<span class="nt">------------------------------</span>│
│ Saved                         │
│------------------------------&gt;│
</code></pre></div></div>

<ul>
  <li>위 시퀀스 다이어그램에서 모바일 애플리케이션이 FCM 서버로 부터 <code class="highlighter-rouge">"foo"</code>라는 토큰을 받았다.</li>
  <li>모바일 애플리케이션은 앱 서버에 <code class="highlighter-rouge">"foo"</code> 토큰 저장 요청을 한다.</li>
  <li>이 때 앱 서버는 토큰 저장을 요청한 클라이언트(단말 또는 사용자)를 식별하고 전달 받은 토큰을 데이터베이스에 저장한다.</li>
</ul>

<h3 id="13-fcm-보내기">1.3. FCM 보내기</h3>

<p>메시지를 보내고 싶은 단말기의 토큰을 선별한 후, FCM 서버의 API 엔드포인트로 받을 단말기 목록과 보낼 메시지를 전달하면 된다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>App Server      FCM Server      Mobile<span class="o">(</span><span class="s2">"foo"</span><span class="o">)</span>
│ push message  │               │
│ req heading   │               │
│ <span class="k">for</span> <span class="s2">"foo"</span>     │               │
│--------------&gt;│               │
│               │ Deliver       │
│               │ message       │
│               │--------------&gt;│
│        Result │               │
│&lt;<span class="nt">--------------</span>│               │
</code></pre></div></div>

<p>모든 과정이 순조로울 수는 없다. 메시지 전송 요청에 대한 FCM 서버의 응답에 따라, 서버에 저장된 클라이언트의 토큰(<code class="highlighter-rouge">registration_id</code>)을 업데이트하거나 삭제하는 등 몇 가지 후속 처리를 해야할 경우도 있다.</p>

<h2 id="2-단말기-등록-서비스-구현">2. 단말기 등록 서비스 구현</h2>

<p>우리의 모바일 애플리케이션이 FCM 서버와 통신하여 고유한 토큰을 이미 얻은 상태라고 가정하고, 모바일 애플리케이션이 앱 서버에 단말기 등록 요청을 할 수 있는 기능을 구현해 볼 것이다. 1.2절의 내용이다.</p>

<h3 id="21-프로젝트-생성">2.1. 프로젝트 생성</h3>

<p>라라벨 프로젝트를 만든다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~ <span class="nv">$ </span>composer create-project laravel/laravel fcm-scratchpad
<span class="c"># Installing laravel/laravel (v5.3.16)</span>
<span class="c"># ...</span>
<span class="c"># Application key [xxx] set successfully.</span>
</code></pre></div></div>

<p>예제 프로젝트이므로 SQLite 데이터베이스를 사용하자.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~ <span class="nv">$ </span><span class="nb">cd </span>fcm-scratchpad
~/fcm-scratchpad <span class="nv">$ </span><span class="nb">touch </span>database/database.sqlite
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># .env</span>

<span class="nv">DB_CONNECTION</span><span class="o">=</span>sqlite
<span class="c">#DB_CONNECTION=mysql</span>
<span class="c">#DB_HOST=127.0.0.1</span>
<span class="c">#DB_PORT=3306</span>
<span class="c">#DB_DATABASE=homestead</span>
<span class="c">#DB_USERNAME=homestead</span>
<span class="c">#DB_PASSWORD=secret</span>
</code></pre></div></div>

<h3 id="22-모델-마이그레이션-시더-만들기">2.2. 모델, 마이그레이션, 시더 만들기</h3>

<p>모델과 마이그레이션을 동시에 만든다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/fcm-scratchpad <span class="nv">$ </span>php artisan make:model Device <span class="nt">--migration</span>
<span class="c"># Model created successfully.</span>
<span class="c"># Created Migration: YYYY_MM_DD_xxxxxx_create_devices_table</span>
</code></pre></div></div>

<p>마이그레이션을 작성한다. 우리 예제에서는 모바일 애플리케이션이 저장을 요청하는 토큰을 <code class="highlighter-rouge">push_service_id</code> 컬럼에 저장하기로 하자.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span> <span class="c1">// YYYY_MM_DD_xxxxxx_create_devices_table.php</span>

<span class="kn">use</span> <span class="nn">Illuminate\Support\Facades\Schema</span><span class="p">;</span>
<span class="kn">use</span> <span class="nn">Illuminate\Database\Schema\Blueprint</span><span class="p">;</span>
<span class="kn">use</span> <span class="nn">Illuminate\Database\Migrations\Migration</span><span class="p">;</span>

<span class="kd">class</span> <span class="nc">CreateDevicesTable</span> <span class="k">extends</span> <span class="nx">Migration</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">up</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nx">Schema</span><span class="o">::</span><span class="na">create</span><span class="p">(</span><span class="s1">'devices'</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="nx">Blueprint</span> <span class="nv">$table</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$table</span><span class="o">-&gt;</span><span class="na">increments</span><span class="p">(</span><span class="s1">'id'</span><span class="p">);</span>
            <span class="nv">$table</span><span class="o">-&gt;</span><span class="na">integer</span><span class="p">(</span><span class="s1">'user_id'</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">unsigned</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">index</span><span class="p">();</span>
            <span class="nv">$table</span><span class="o">-&gt;</span><span class="na">string</span><span class="p">(</span><span class="s1">'device_id'</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">nullable</span><span class="p">();</span>
            <span class="nv">$table</span><span class="o">-&gt;</span><span class="na">string</span><span class="p">(</span><span class="s1">'push_service_id'</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">nullable</span><span class="p">();</span>
            <span class="nv">$table</span><span class="o">-&gt;</span><span class="na">timestamps</span><span class="p">();</span>

            <span class="nv">$table</span><span class="o">-&gt;</span><span class="na">foreign</span><span class="p">(</span><span class="s1">'user_id'</span><span class="p">)</span>
                <span class="o">-&gt;</span><span class="na">references</span><span class="p">(</span><span class="s1">'id'</span><span class="p">)</span>
                <span class="o">-&gt;</span><span class="na">on</span><span class="p">(</span><span class="s1">'users'</span><span class="p">)</span>
                <span class="o">-&gt;</span><span class="na">onDelete</span><span class="p">(</span><span class="s1">'cascade'</span><span class="p">);</span>
        <span class="p">});</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">down</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nx">Schema</span><span class="o">::</span><span class="na">table</span><span class="p">(</span><span class="s1">'devices'</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="nx">Blueprint</span> <span class="nv">$table</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// 외래키 관계를 선언했다면, 리버스 마이그레이션 할때 에러를 피하기 위해</span>
            <span class="c1">// 테이블을 삭제하기 전에 외래키를 먼저 삭제하는 것이 중요하다.</span>
            <span class="nv">$table</span><span class="o">-&gt;</span><span class="na">dropForeign</span><span class="p">(</span><span class="s1">'devices_user_id_foreign'</span><span class="p">);</span>
        <span class="p">});</span>

        <span class="nx">Schema</span><span class="o">::</span><span class="na">dropIfExists</span><span class="p">(</span><span class="s1">'devices'</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">User</code> 모델과 <code class="highlighter-rouge">Device</code> 모델 간의 관계는 일대다 관계라고 가정하자. 한 사람이 여러 대의 단말기를 가질 수 있다는 의미다.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span> <span class="c1">// app/User.php</span>

<span class="kn">namespace</span> <span class="nn">App</span><span class="p">;</span>

<span class="kn">use</span> <span class="nn">Illuminate\Foundation\Auth\User</span> <span class="k">as</span> <span class="n">Authenticatable</span><span class="p">;</span>

<span class="kd">class</span> <span class="nc">User</span> <span class="k">extends</span> <span class="nx">Authenticatable</span>
<span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">devices</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">hasMany</span><span class="p">(</span><span class="nx">Device</span><span class="o">::</span><span class="na">class</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>반대 관계도 설정한다.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span> <span class="c1">// app/Device.php</span>

<span class="kn">namespace</span> <span class="nn">App</span><span class="p">;</span>

<span class="kn">use</span> <span class="nn">Illuminate\Database\Eloquent\Model</span><span class="p">;</span>

<span class="kd">class</span> <span class="nc">Device</span> <span class="k">extends</span> <span class="nx">Model</span>
<span class="p">{</span>
    <span class="k">protected</span> <span class="nv">$fillable</span> <span class="o">=</span> <span class="p">[</span>
        <span class="s1">'device_id'</span><span class="p">,</span>
        <span class="s1">'push_service_id'</span>
    <span class="p">];</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">user</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">belongsTo</span><span class="p">(</span><span class="nx">User</span><span class="o">::</span><span class="na">class</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>테스트 데이터를 심을 시더를 만든다.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span> <span class="c1">// database/seeds/DatabaseSeeder.php</span>

<span class="kn">use</span> <span class="nn">Illuminate\Database\Seeder</span><span class="p">;</span>

<span class="kd">class</span> <span class="nc">DatabaseSeeder</span> <span class="k">extends</span> <span class="nx">Seeder</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">run</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// 라라벨에 기본 내장된 User 모델 팩토리를 이용했다.</span>
        <span class="nv">$user</span> <span class="o">=</span> <span class="nx">factory</span><span class="p">(</span><span class="nx">App\User</span><span class="o">::</span><span class="na">class</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">create</span><span class="p">([</span>
            <span class="s1">'email'</span> <span class="o">=&gt;</span> <span class="s1">'user@example.com'</span><span class="p">,</span>
            <span class="s1">'name'</span> <span class="o">=&gt;</span> <span class="s1">'김고객'</span><span class="p">,</span>
        <span class="p">]);</span>
        <span class="c1">// User-Device 간 관계를 이용해서 새 더미 레코드를 생성했다.</span>
        <span class="nv">$user</span><span class="o">-&gt;</span><span class="na">devices</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">create</span><span class="p">([</span>
            <span class="s1">'device_id'</span> <span class="o">=&gt;</span> <span class="nx">str_rand</span><span class="p">(</span><span class="mi">16</span><span class="p">),</span>
            <span class="s1">'push_service_id'</span> <span class="o">=&gt;</span> <span class="nx">str_rand</span><span class="p">(</span><span class="mi">152</span><span class="p">),</span>
        <span class="p">]);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="23-라우팅과-컨트롤러-만들기">2.3. 라우팅과 컨트롤러 만들기</h3>

<p>모바일 애플리케이션이 토큰을 등록할 수 있는 API 엔드포인트를 만든다.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span> <span class="c1">// routes/api.php</span>

<span class="nx">Route</span><span class="o">::</span><span class="na">post</span><span class="p">(</span><span class="s1">'/devices'</span><span class="p">,</span> <span class="s1">'DevicesController@upsert'</span><span class="p">);</span>
</code></pre></div></div>

<p>HTTP 요청 처리 로직을 작성한다. 예제 프로젝트에서는 레코드가 없으면 새로 만들고, 레코드가 있으면 업데이트하는 업서트 로직을 만들었다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/fcm-scratchpad <span class="nv">$ </span>php artisan make:controller DeviceController
</code></pre></div></div>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span> <span class="c1">// app/Http/Controllers/DevicesController.php</span>

<span class="kn">namespace</span> <span class="nn">App\Http\Controllers</span><span class="p">;</span>

<span class="kn">use</span> <span class="nn">App\User</span><span class="p">;</span>
<span class="kn">use</span> <span class="nn">Illuminate\Http\Request</span><span class="p">;</span>

<span class="kd">class</span> <span class="nc">DevicesController</span> <span class="k">extends</span> <span class="nx">Controller</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">upsert</span><span class="p">(</span><span class="nx">Request</span> <span class="nv">$request</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// 사용자 인증 기능을 구현하지 않았으므로 하드코드로 사용자를 지정해주었다.</span>
        <span class="nv">$user</span> <span class="o">=</span> <span class="nx">User</span><span class="o">::</span><span class="na">find</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>

        <span class="nv">$device</span> <span class="o">=</span> <span class="nv">$user</span><span class="o">-&gt;</span><span class="na">devices</span><span class="p">()</span>
            <span class="o">-&gt;</span><span class="na">whereDeviceId</span><span class="p">(</span><span class="nv">$request</span><span class="o">-&gt;</span><span class="na">device_id</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">first</span><span class="p">();</span>

        <span class="nv">$input</span> <span class="o">=</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="na">all</span><span class="p">();</span>

        <span class="k">if</span> <span class="p">(</span><span class="o">!</span> <span class="nv">$device</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$device</span> <span class="o">=</span> <span class="nv">$user</span><span class="o">-&gt;</span><span class="na">devices</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">create</span><span class="p">(</span><span class="nv">$input</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nv">$device</span><span class="o">-&gt;</span><span class="na">update</span><span class="p">(</span><span class="nv">$input</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nv">$device</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>로컬 서버를 구동하고 포스트맨 등으로 단말기 등록이 잘 작동하는지 확인해 본다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/fcm-scratchpad <span class="nv">$ </span>php artisan serve
<span class="c"># Laravel development server started on http://localhost:8000/</span>
</code></pre></div></div>

<div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">POST http://localhost:8000/api/devices
Accept: application/json
Content-Type: application/json

{
  "device_id": "1234567890abcdef",
  "push_service_id": "..."
}
</span></code></pre></div></div>

<h3 id="24-http-기본-인증-구현">2.4. HTTP 기본 인증 구현</h3>

<p>API 클라이언트 인증을 위해 HTTP 기본 인증을 하는 미들웨어를 만들자. <code class="highlighter-rouge">Auth::onceBasic()</code> 메서드는 클라이언트가 <code class="highlighter-rouge">Authorization</code> 헤더로 제출한 <code class="highlighter-rouge">base64_encode("{$email}:{$password}")</code>를 검사하고 로그인 정보가 맞으면 이번 요청 동안만 로그인을 유지하고, 잘못된 로그인 정보라면 401 응답을 반환한다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/fcm-scratchpad <span class="nv">$ </span>php artisan make:middlware AuthenticateOnceWithBasicAuth
</code></pre></div></div>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span> <span class="c1">// app/Http/Middleware/AuthenticateOnceWithBasicAuth.php</span>

<span class="kn">namespace</span> <span class="nn">App\Http\Middleware</span><span class="p">;</span>

<span class="kn">use</span> <span class="nn">Illuminate\Support\Facades\Auth</span><span class="p">;</span>

<span class="kd">class</span> <span class="nc">AuthenticateOnceWithBasicAuth</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">handle</span><span class="p">(</span><span class="nv">$request</span><span class="p">,</span> <span class="nv">$next</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nx">Auth</span><span class="o">::</span><span class="na">onceBasic</span><span class="p">()</span> <span class="o">?:</span> <span class="nv">$next</span><span class="p">(</span><span class="nv">$request</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>미들웨어를 만들면 HTTP 커널에 등록해야 한다. <code class="highlighter-rouge">auth.basic.once</code>라는 별칭으로 등록했다.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span> <span class="c1">// app/Http/Kernel.php</span>

<span class="kn">namespace</span> <span class="nn">App\Http</span><span class="p">;</span>

<span class="kn">use</span> <span class="nn">Illuminate\Foundation\Http\Kernel</span> <span class="k">as</span> <span class="n">HttpKernel</span><span class="p">;</span>

<span class="kd">class</span> <span class="nc">Kernel</span> <span class="k">extends</span> <span class="nx">HttpKernel</span>
<span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="k">protected</span> <span class="nv">$routeMiddleware</span> <span class="o">=</span> <span class="p">[</span>
        <span class="s1">'auth.basic.once'</span> <span class="o">=&gt;</span> <span class="nx">\App\Http\Middleware\AuthenticateOnceWithBasicAuth</span><span class="o">::</span><span class="na">class</span><span class="p">,</span>
    <span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이제 미들웨어를 클라이언트 인증 미들웨어를 사용할 수 있는 상태이므로 라우팅에 적용하자. 라우팅 정의 파일에서 직접 적용하는 방법과 컨트롤러 생성자에서 적용하는 방법이 있는 데 후자를 이용한다.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span> <span class="c1">// app/Http/Controllers/DevicesController.php</span>

<span class="c1">// ...</span>

<span class="kd">class</span> <span class="nc">DevicesController</span> <span class="k">extends</span> <span class="nx">Controller</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">middleware</span><span class="p">(</span><span class="s1">'auth.basic.once'</span><span class="p">);</span>
    <span class="p">}</span>
    
    <span class="k">public</span> <span class="k">function</span> <span class="nf">upsert</span><span class="p">(</span><span class="nx">DeviceRequest</span> <span class="nv">$request</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// $user = User::find(1);</span>
        <span class="nv">$user</span> <span class="o">=</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="na">user</span><span class="p">();</span>

        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>다음 그림처럼 포스트맨에서 <code class="highlighter-rouge">Authorization</code> 탭을 누르고 <code class="highlighter-rouge">Username: user@example.com</code>, <code class="highlighter-rouge">Password: secret</code>를 입력한 후 <code class="highlighter-rouge">Update Request</code> 버튼을 누르면 <code class="highlighter-rouge">Authorization</code> 헤더가 업데이트된다.</p>

<p><a href="/images/2016-12-18-img-03.png"><img src="/images/2016-12-18-img-03.png" alt="Postman" /></a></p>

<p><small>포스트의 내용보다 그림에서는 전송하는 데이터의 내용이 좀 더 많을 수 있다. 깃허브 예제 프로젝트 구현을 전부 설명할 수 없어서 일부 축약했기 때문이다.</small></p>

<div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">POST http://localhost:8000/api/devices
Accept: application/json
Content-Type: application/json
Authorization: Basic dXNlckBleGFtcGxlLmNvbTpzZWNyZXQ=

{
  "device_id": "1234567890abcdef",
  "push_service_id": "..."
}
</span></code></pre></div></div>

<p>2.3절과 같은 결과를 얻을 수 있으면 클라언트를 정상적으로 인증하고, 단말기 정보를 잘 등록한 것이다.</p>

<div class="spacer">• • •</div>

<p>포스트가 길어져서 여기서 끊고 나머지는 2부에서 이어가기로 한다.</p>

<p>이번 포스트의 예제 프로젝트는 <a href="https://github.com/appkr/fcm-scratchpad">https://github.com/appkr/fcm-scratchpad</a>에 공개되어 있다. 이 포스트에서 사용한 포스트맨 콜렉션은 <a href="https://raw.githubusercontent.com/appkr/fcm-scratchpad/master/docs/fcm-scratchpad.postman_collection.json">https://raw.githubusercontent.com/appkr/fcm-scratchpad/master/docs/fcm-scratchpad.postman_collection.json</a>에서 받을 수 있다.</p>
:ET