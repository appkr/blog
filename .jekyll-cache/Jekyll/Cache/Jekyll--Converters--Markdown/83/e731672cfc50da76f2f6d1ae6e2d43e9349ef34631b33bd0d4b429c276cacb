I"p<p>사전에서 context(컨텍스트)를 찾아보면 어떤 사건이 발생했을 때의 주변 상황 정도로 설명하고 있습니다. 컴퓨터 소프트웨어에서도 컨텍스트 스위칭, 로그 컨텍스트, 애플리케이션 컨텍스트 등 컨텍스트라는 단어를 많이 사용합니다.</p>

<p>라라벨은 IoC를 위한 Service Container<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote">1</a></sup>가 있으며, 여기에 어떤 데이터 타입이든 바인딩할 수 있고, 애플리케이션 실행 중에 아래처럼 꺼내 쓸 수 있습니다.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$container</span> <span class="o">=</span> <span class="nx">app</span><span class="p">();</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="s1">'foo'</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span> <span class="p">{</span>
	<span class="k">return</span> <span class="s1">'bar'</span><span class="p">;</span>
<span class="p">});</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">make</span><span class="p">(</span><span class="s1">'foo'</span><span class="p">);</span> <span class="c1">// 'bar'</span>
</code></pre></div></div>

<p>그런데, 아래와 같은 문제가 있죠<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote">2</a></sup>. 작은 애플리케이션에서는 이렇게 쓴다고 전혀 문제없지만, 애플리케이션이 커지면 결국 개발자에게 큰 부담으로 다가옵니다.</p>

<p><a href="/images/2018-07-09-img-01.png"><img src="/images/2018-07-09-img-01.png" alt="Strong Dependency" /></a></p>

<p>이번 포스트에서는 라라벨 애플리케이션에서 애플리케이션 실행 시점의 주변 상황을 담아 놓고 필요할 때 꺼내 쓰기 위한 데이터 컨테이너를 구현했던 썰을 풀어보려합니다. <code class="highlighter-rouge">ApplicationContext</code>라 이름 지었고 Java 언어의 <code class="highlighter-rouge">ThreadLocal</code><sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote">3</a></sup>과 비슷한 역할을 한다고 보면 됩니다. 주로 아래와 같은 상황에 유용하게 사용되기를 바라며 만들었어요.</p>

<ul>
  <li>프레임워크 영역(=main)의 데이터를 코어 영역(=app)으로 전달할 때</li>
  <li>로깅 및 감사</li>
  <li>프로세스간 컨텍스트 릴레이 등등 (e.g. Api -&gt; Queue, App -&gt; External, …)</li>
</ul>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><a href="https://laravel.com/docs/5.6/container">ServiceContainer 공식 문서</a>, <a href="https://gist.github.com/davejamesmiller/bd857d9b0ac895df7604dd2e63b23afe">공식보다 더 나은 문서</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p><a href="/learn-n-think/clean-architecture-and-dependency/#2-%ED%81%B4%EB%A6%B0-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98">클린 아키텍처</a>에 대한 포스트를 읽어보세요. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p><a href="//javacan.tistory.com/entry/ThreadLocalUsage"><code class="highlighter-rouge">ThreadLocal</code>에 관한 최범균님의 블로그 포스트</a> <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
:ET