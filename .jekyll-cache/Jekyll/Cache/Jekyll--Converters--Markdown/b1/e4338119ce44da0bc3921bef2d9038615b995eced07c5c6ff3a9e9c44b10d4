I"m<p>Wordpress 에서 Jekyll 로 마이그레이션 과정에서 배운 내용을 총 5 편의 포스트로 정리해 본다.</p>

<ol>
  <li><a href="/work-n-play/블로그-플랫폼-이전-1-개발자로서의-새로운-삶">개발자로서의 새로운 삶</a></li>
  <li><em>Goodbye Wordpress, Hello Jekyll</em></li>
  <li><a href="/work-n-play/블로그-플랫폼-이전-3-publishing">Publishing</a></li>
  <li><a href="/work-n-play/블로그-플랫폼-이전-4-build-automation-with-gulp">Build Automation with Gulp</a></li>
  <li><a href="/work-n-play/블로그-플랫폼-이전-5-disqus-facebook">Disqus &amp; Facebook</a></li>
</ol>

<p>지난 2 주일 동안 일어난 우여곡절들을 기억을 되살려 최대한 복기해 두었다.</p>

<div class="spacer">• • •</div>

<p><a href="//jekyllrb.com/docs/home/#so-what-is-jekyll-exactly">Jekyll[dƷékəl,dƷí:k-,줴클]</a> 은 Ruby 언어로 개발된 정적 (Static) 페이지를 생성 도구 이다. Jekyll 은 로컬 컴퓨터에서 HTML 또는 Markdown 으로 작성한 글을 미리 정적 페이지로 컴파일 하는 일을 한다. 컴파일 된 결과물을 웹 서버의 Document Root 로 복사하는 것만으로 서비스가 가능하다. 더구나, 정적 페이지는 동적 페이지 대비 응답 속도가 더 빠르다는 장점이 있다. 즉, Jekyll 은 서버에 백엔드 플랫폼/프레임웍 없이도 고급스러운 웹 서비스를 만들 수 있는 도구이다.</p>

<!--more-->

<h2 id="goodbye-wordpress">Goodbye Wordpress</h2>

<p>호스팅 버전 워드프레스에서 서비스되던 포스트를 Jekyll 로 옮겨야 한다. 우선, 워드프레스 호스팅에서 ‘글 내보내기’ 를 하여 파일로 떨군 후, 로컬에 설치형 워드프레스를 구동시키고 ‘글 가져오기’ 를 하였다. 이 과정을 통해 MySql 데이터베이스에 접근하여 기존 포스트 데이터를 마음대로 조작할 수 있게 되었다.</p>

<p><a href="/images/2016-02-10-img-01.png"><img src="/images/2016-02-10-img-01.png" alt="Import wordpress.com data to Local database" /></a></p>

<p>So, Goodbye Wordpress~</p>

<h2 id="hello-jekyll">Hello Jekyll</h2>

<h3 id="install-jekyll">Install Jekyll</h3>

<p>Jekyll 설치와 프로젝트 생성 방법은 간단한다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>gem <span class="nb">install </span>jekyll
<span class="nv">$ </span>jekyll new blog
</code></pre></div></div>

<h3 id="how-to-write-a-post">How to Write a Post</h3>

<p>Jekyll 에서 포스트는 이렇게 작성한다.</p>

<ul>
  <li><code class="highlighter-rouge">_posts</code> 디렉토리 아래에 <code class="highlighter-rouge">Y-m-d-title.{html,md}</code> 형식의 파일을 만든다.</li>
  <li>파일 내용은 Front Formatter 와 포스트 본문으로 구성된다.
    <ul>
      <li>Front Formatter 는 포스트의 메타데이터이다. Front Formatter 는 상단에 3개의 연속된 대시 (<code class="highlighter-rouge">-</code>) 블럭에 YAML 형식으로 쓴다.</li>
      <li>본문은 HTML 또는 Markdown 형식으로 편하게 쓴다.</li>
    </ul>
  </li>
</ul>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">layout</span><span class="pi">:</span> <span class="s">post</span>
<span class="na">title</span><span class="pi">:</span>  <span class="s">Welcome to Jekyll!</span>
<span class="nn">---</span>
<span class="ge">*Lorem ipsum*</span> dolor sit amet, consectetur adipisicing elit.
</code></pre></div></div>

<h3 id="liquid-template-engine">Liquid Template Engine</h3>

<p>Jekyll 은 <a href="https://github.com/Shopify/liquid/wiki">Liquid Template Engine</a> 을 이용한다. 사용법은 다른 Template Engine 과 거의 유사하다. Liquid 는 제어/반복/할당 등은 <code class="highlighter-rouge">{% %}</code> 를 이용하고, 변수 Interpolation 은 <code class="highlighter-rouge">{{ }}</code> 를 이용한다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- https://github.com/appkr/blog/blob/master/index.html --&gt;</span>
---
layout: default
---
{% for post in paginator.posts %}
  <span class="nt">&lt;article&gt;</span>
    <span class="nt">&lt;h2&gt;</span>
      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"{{ post.url | prepend: site.baseurl }}"</span><span class="nt">&gt;</span>{{ post.title }}<span class="nt">&lt;/a&gt;</span>
    <span class="nt">&lt;/h2&gt;</span>
  
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"box-body"</span><span class="nt">&gt;</span>
      {{ post.content }}
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/article&gt;</span>
{% endfor %}
</code></pre></div></div>

<h2 id="블로그에서-어떤-기능을-제공할-것인가">블로그에서 어떤 기능을 제공할 것인가?</h2>

<ul>
  <li>Profile 페이지</li>
  <li>Category 기능</li>
  <li>Tag 기능</li>
  <li>포스트 검색</li>
  <li>페이지네이션</li>
  <li>RSS 피드</li>
  <li>SEO(==검색엔진최적화)/사이트맵</li>
</ul>

<p>기능 기획을 했으니, 어떤 프레임웍을 도입할 지 결정해야 한다.</p>

<ul>
  <li>SCSS &amp; jQuery</li>
  <li>Material Design &amp; Twitter Bootstrap</li>
  <li>Assets Management with Bower</li>
  <li>Gulp Build</li>
  <li>Ruby Gems
    <ul>
      <li>jekyll-paginate</li>
      <li>jekyll-sitemap</li>
      <li>jekyll-feed</li>
    </ul>
  </li>
</ul>

<p>이제 이 기능을 담을 프로젝트 구조를 짜야 한다.</p>

<h2 id="structure--config">Structure &amp; Config</h2>

<p>아래 처럼 디렉토리 구조를 잡았다. 일반적인 Jekyll 프로젝트 구조 대비 달라진 점은, <code class="highlighter-rouge">_assets</code> 디렉토리에 뷰 제어 관련 리소스를 전부 몰어 넣어 놓은 점과, Jekyll Build 결과물을 <code class="highlighter-rouge">_sites</code> 가 아닌 <code class="highlighter-rouge">public</code> 디렉토리에 담는다는 점 정도 이다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">.</span>
├── _assets                           <span class="c"># Housing for Images, JS, CSS</span>
│   ├── images                        <span class="c"># Images used in posts</span>
│   ├── scripts                       <span class="c"># Javascripts (my JS)</span>
│   │   └── main.js
│   ├── styles                        <span class="c"># Stylesheets (my CSS/SCSS)</span>
│   │   └── main.scss
│   └── vendor                        <span class="c"># 3rd party JS, Stylesheets</span>
│       ├── bootstrap-material-design
│       ├── bootstrap-sass
│       ├── fastclick
│       ├── jquery
│       └── simple-jekyll-search
├── _drafts                           <span class="c"># Drafts (초안)</span>
├── _includes                         <span class="c"># HTML partials</span>
├── _layouts                          <span class="c"># Master HTML layouts</span>
├── _posts                            <span class="c"># Posts (공개할 글)</span>
├── categories                        <span class="c"># Category 기능을 위한 페이지</span>
├── lib                               <span class="c"># Wordpress-&gt;Jekyll migration 을 위한 Libraries</span>
├── node_modules                      <span class="c"># Gulp build 를 위한 Node packages</span>
├── profile                           <span class="c"># Profile 페이지</span>
├── public                            <span class="c"># Jekyll 이 컴파일한 정적 페이지를 담는 공간</span>
├── tags                              <span class="c"># Tag 기능을 위한 페이지</span>
├── .babelrc                          <span class="c"># Babelify 설정</span>
├── .bowerrc                          <span class="c"># Bower 설정</span>
├── .gitignore
├── _config.yml                       <span class="c"># Jekyll 설정</span>
├── bower.json                        <span class="c"># Bower package definition</span>
├── CNAME                             <span class="c"># blog.appkr.dev 도메인을 쓰기 위한 도메인 별칭 설정 파일</span>
├── feed.xml                          <span class="c"># Rss 피드 페이지</span>
├── gulpfile.babel.js                 <span class="c"># Gulp build 자동화 스크립트</span>
├── index.html                        <span class="c"># 대문 페이지</span>
├── package.json                      <span class="c"># Node package definition</span>
└── search.json                       <span class="c"># Posts 검색을 위한 인덱스 (For simple-jekyll-search)</span>
</code></pre></div></div>

<p>아래는 이 Jekyll 프로젝트의 글로벌 설정이다.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># https://github.com/appkr/blog/blob/master/_config.yml</span>

<span class="c1"># Plugins</span>
<span class="na">gems</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">jekyll-paginate</span>
  <span class="pi">-</span> <span class="s">jekyll-sitemap</span>
  <span class="pi">-</span> <span class="s">jekyll-feed</span>

<span class="c1"># Site settings</span>
<span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Appkr.memo(new</span><span class="nv"> </span><span class="s">Life)"</span>

<span class="na">description</span><span class="pi">:</span> <span class="s2">"</span><span class="s">appkr's</span><span class="nv"> </span><span class="s">blog</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">record</span><span class="nv"> </span><span class="s">day-to-day</span><span class="nv"> </span><span class="s">life</span><span class="nv"> </span><span class="s">&amp;</span><span class="nv"> </span><span class="s">thoughts."</span>
<span class="na">baseurl</span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span> <span class="c1"># the subpath of your site, e.g. /blog</span>
<span class="na">url</span><span class="pi">:</span> <span class="s2">"</span><span class="s">http://blog.appkr.dev"</span> <span class="c1"># the base hostname &amp; protocol for your site</span>

<span class="na">excerpt_separator</span><span class="pi">:</span> <span class="s">&lt;!--more--&gt;</span>

<span class="c1"># Contacts</span>
<span class="na">author</span><span class="pi">:</span> <span class="s2">"</span><span class="s">appkr"</span>
<span class="na">email</span><span class="pi">:</span> <span class="s2">"</span><span class="s">juwonkim@me.com"</span>
<span class="na">github</span><span class="pi">:</span> <span class="s2">"</span><span class="s">https://github.com/appkr"</span>
<span class="na">facebook</span><span class="pi">:</span> <span class="s2">"</span><span class="s">https://www.facebook.com/juwonkimatmedotcom"</span>

<span class="c1"># Build settings</span>
<span class="na">exclude</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">lib</span>
  <span class="pi">-</span> <span class="s">Gemfile</span>
  <span class="pi">-</span> <span class="s">Gemfile.lock</span>
  <span class="pi">-</span> <span class="s">node_modules</span>
  <span class="pi">-</span> <span class="s">bower.json</span>
  <span class="pi">-</span> <span class="s">gulpfile.babel.js</span>
  <span class="pi">-</span> <span class="s">package.json</span>
<span class="na">permalink</span><span class="pi">:</span> <span class="s">/:categories/:slug/</span>
<span class="na">lsi</span><span class="pi">:</span> <span class="no">false</span> <span class="c1"># if set to true generate related posts</span>

<span class="c1"># Conversion</span>
<span class="na">markdown</span><span class="pi">:</span> <span class="s">redcarpet</span>
<span class="na">redcarpet</span><span class="pi">:</span>
  <span class="na">extensions</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">smart</span>
    <span class="pi">-</span> <span class="s">fenced_code_blocks</span>
    <span class="pi">-</span> <span class="s">autolink</span>
    <span class="pi">-</span> <span class="s">tables</span>
    <span class="pi">-</span> <span class="s">strikethrough</span>
    <span class="pi">-</span> <span class="s">superscript</span>
    <span class="pi">-</span> <span class="s">underline</span>
    <span class="pi">-</span> <span class="s">highlight</span>
    <span class="pi">-</span> <span class="s">quote</span>
    <span class="pi">-</span> <span class="s">footnote_ref</span>
  <span class="na">highlighter</span><span class="pi">:</span> <span class="s">pygments</span>

<span class="c1"># Outputting</span>
<span class="na">paginate</span><span class="pi">:</span> <span class="m">5</span>
<span class="na">paginate_path</span><span class="pi">:</span> <span class="s">/page:num/</span>
<span class="na">destination</span><span class="pi">:</span> <span class="s">public</span>
</code></pre></div></div>

<p>프로젝트 구조와 기본 설정이 준비 되었으니, 로컬 데이터베이스로 가져온 워드프레스 포스트들을 Jekyll 형식으로 변경해야 한다.</p>

<h2 id="migrate-posts">Migrate Posts</h2>

<p>데이터 마이그레이션을 위해 아래 Ruby 스크립트를 작성하였다. 이 스크립트에서 주목할만한 부분은 워드프레스 <code class="highlighter-rouge">wp_posts.post_content</code> 컬럼에 기록된 HTML 형식의 포스트 본문을 <a href="https://github.com/cousine/downmark_it"><code class="highlighter-rouge">DownmarkIt</code></a> 라이브러리를 이용하여 다시 Markdown 형식으로 변경하는 부분이다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>wget https://raw.githubusercontent.com/cousine/downmark_it/master/downmark_it.rb <span class="nt">-O</span> lib/downmark_it.rb
<span class="c"># downmark_it.rb 는 hpricot 라이브러리에 의존하므로 설치한다. </span>
<span class="nv">$ </span>gem <span class="nb">install </span>hpricot
</code></pre></div></div>

<p>아래는 변환 스크립트 전체 소스이다. 이 스크립트의 역할은 로컬 데이터베이스 테이블에서 워드프레스에서 생성된 데이터를 가져온 후, Jekyll 형식에 맞는 내용으로 변경한 후 <code class="highlighter-rouge">Y-m-d-title.md</code> 파일에 저장하는 것이다.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># https://github.com/appkr/blog/blob/master/lib/wordpress.rb</span>
<span class="c1"># Inspired from vitobotta's script</span>
<span class="c1"># @see https://gist.github.com/vitobotta/888709</span>

<span class="sx">%w(rubygems sequel fileutils yaml active_support/inflector)</span><span class="p">.</span><span class="nf">each</span><span class="p">{</span><span class="o">|</span><span class="n">g</span><span class="o">|</span> <span class="nb">require</span> <span class="n">g</span><span class="p">}</span>

<span class="nb">require</span> <span class="no">File</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="no">File</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="kp">__FILE__</span><span class="p">),</span> <span class="s2">"downmark_it"</span><span class="p">)</span>

<span class="k">module</span> <span class="nn">WordPress</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">import</span><span class="p">(</span><span class="n">database</span><span class="p">,</span> <span class="n">user</span><span class="p">,</span> <span class="n">password</span><span class="p">,</span> <span class="n">table_prefix</span> <span class="o">=</span> <span class="s1">'wp'</span><span class="p">,</span> <span class="n">host</span> <span class="o">=</span> <span class="s1">'localhost'</span><span class="p">,</span> <span class="n">port</span> <span class="o">=</span> <span class="mi">3306</span><span class="p">)</span>
    <span class="n">db</span> <span class="o">=</span> <span class="no">Sequel</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="ss">:adapter</span> <span class="o">=&gt;</span> <span class="s1">'mysql2'</span><span class="p">,</span> <span class="ss">:host</span> <span class="o">=&gt;</span> <span class="n">host</span><span class="p">,</span> <span class="ss">:port</span> <span class="o">=&gt;</span> <span class="n">port</span><span class="p">,</span> <span class="ss">:database</span> <span class="o">=&gt;</span> <span class="n">database</span><span class="p">,</span> <span class="ss">:user</span> <span class="o">=&gt;</span> <span class="n">user</span><span class="p">,</span> <span class="ss">:password</span> <span class="o">=&gt;</span> <span class="n">password</span><span class="p">,</span> <span class="ss">:encoding</span> <span class="o">=&gt;</span> <span class="s1">'utf8'</span><span class="p">)</span>

    <span class="sx">%w(_posts _drafts)</span><span class="p">.</span><span class="nf">each</span><span class="p">{</span><span class="o">|</span><span class="n">folder</span><span class="o">|</span> <span class="no">FileUtils</span><span class="p">.</span><span class="nf">mkdir_p</span> <span class="n">folder</span><span class="p">}</span>

    <span class="c1"># Get the contents of wp_posts table.</span>
    <span class="n">query</span> <span class="o">=</span> <span class="o">&lt;&lt;-</span><span class="no">EOS</span><span class="sh">
        SELECT  post_title, post_name, post_date, post_content, post_excerpt, ID, guid, post_status, post_type, post_status,
             (  SELECT  guid
              FROM  </span><span class="si">#{</span><span class="n">table_prefix</span><span class="si">}</span><span class="sh">_posts
              WHERE ID = (  SELECT  meta_value
                    FROM  </span><span class="si">#{</span><span class="n">table_prefix</span><span class="si">}</span><span class="sh">_postmeta
                    WHERE   post_id = post.ID AND meta_key = "_thumbnail_id") ) AS post_image
        FROM </span><span class="si">#{</span><span class="n">table_prefix</span><span class="si">}</span><span class="sh">_posts AS post
        WHERE  post_type = 'post'
</span><span class="no">    EOS</span>

    <span class="c1"># Get the contents of wp_term_taxonomy table.</span>
    <span class="n">categories_and_tags_query</span> <span class="o">=</span> <span class="o">&lt;&lt;-</span><span class="no">EOS</span><span class="sh">
      SELECT t.taxonomy, term.name, term.slug
        FROM        </span><span class="si">#{</span><span class="n">table_prefix</span><span class="si">}</span><span class="sh">_term_relationships AS tr
        INNER JOIN  </span><span class="si">#{</span><span class="n">table_prefix</span><span class="si">}</span><span class="sh">_term_taxonomy AS t ON t.term_taxonomy_id = tr.term_taxonomy_id
        INNER JOIN  </span><span class="si">#{</span><span class="n">table_prefix</span><span class="si">}</span><span class="sh">_terms AS term ON term.term_id = t.term_id
        WHERE       tr.object_id = %d
        ORDER BY    tr.term_order
</span><span class="no">    EOS</span>

    <span class="c1"># wp_terms.slug and wp_posts.post_name written in Korean are terrible.</span>
    <span class="c1"># The following is the pattern to generate correctly formatted slugs on the fly.</span>
    <span class="n">pattern_special_chars</span> <span class="o">=</span> <span class="sr">/(?&lt;chars&gt;`|~|!|@|#|\$|%|\^|&amp;|\*|\(|\)|\[|\]|\.|\\|\/|:|;|"|'|,|\.|&lt;|&gt;|\?)/</span>
    <span class="n">pattern_white_spaces</span>  <span class="o">=</span> <span class="sr">/(?&lt;spaces&gt;\s+)/</span>

    <span class="n">db</span><span class="p">[</span><span class="n">query</span><span class="p">].</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span>
      <span class="n">title</span>      <span class="o">=</span> <span class="n">post</span><span class="p">[</span><span class="ss">:post_title</span><span class="p">]</span>
      <span class="n">slug</span>       <span class="o">=</span> <span class="n">post</span><span class="p">[</span><span class="ss">:post_title</span><span class="p">]</span>
          <span class="p">.</span><span class="nf">downcase</span><span class="p">.</span><span class="nf">gsub</span><span class="p">(</span><span class="n">pattern_special_chars</span><span class="p">,</span> <span class="s2">""</span><span class="p">).</span><span class="nf">gsub</span><span class="p">(</span><span class="n">pattern_white_spaces</span><span class="p">,</span> <span class="s2">"-"</span><span class="p">)</span>
      <span class="n">date</span>       <span class="o">=</span> <span class="n">post</span><span class="p">[</span><span class="ss">:post_date</span><span class="p">]</span>
      <span class="n">content</span>    <span class="o">=</span> <span class="no">DownmarkIt</span><span class="p">.</span><span class="nf">to_markdown</span> <span class="n">post</span><span class="p">[</span><span class="ss">:post_content</span><span class="p">]</span>
      <span class="n">status</span>     <span class="o">=</span> <span class="n">post</span><span class="p">[</span><span class="ss">:post_status</span><span class="p">]</span>
      <span class="nb">name</span>       <span class="o">=</span> <span class="s2">"%02d-%02d-%02d-%s.md"</span> <span class="o">%</span> <span class="p">[</span><span class="n">date</span><span class="p">.</span><span class="nf">year</span><span class="p">,</span> <span class="n">date</span><span class="p">.</span><span class="nf">month</span><span class="p">,</span> <span class="n">date</span><span class="p">.</span><span class="nf">day</span><span class="p">,</span> <span class="n">slug</span><span class="p">]</span>
      <span class="n">categories</span> <span class="o">=</span> <span class="p">[]</span>
      <span class="n">post_tags</span>  <span class="o">=</span> <span class="p">[]</span>

      <span class="nb">puts</span> <span class="n">title</span>

      <span class="n">db</span><span class="p">[</span><span class="n">categories_and_tags_query</span> <span class="o">%</span> <span class="n">post</span><span class="p">[</span><span class="ss">:ID</span><span class="p">]].</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">category_or_tag</span><span class="o">|</span>
        <span class="nb">eval</span><span class="p">(</span><span class="n">category_or_tag</span><span class="p">[</span><span class="ss">:taxonomy</span><span class="p">].</span><span class="nf">pluralize</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">category_or_tag</span><span class="p">[</span><span class="ss">:name</span><span class="p">]</span>
            <span class="p">.</span><span class="nf">downcase</span><span class="p">.</span><span class="nf">gsub</span><span class="p">(</span><span class="n">pattern_special_chars</span><span class="p">,</span> <span class="s2">""</span><span class="p">).</span><span class="nf">gsub</span><span class="p">(</span><span class="n">pattern_white_spaces</span><span class="p">,</span> <span class="s2">"-"</span><span class="p">)</span>
      <span class="k">end</span>

      <span class="n">data</span> <span class="o">=</span> <span class="p">{</span>
         <span class="s1">'layout'</span>        <span class="o">=&gt;</span> <span class="s1">'post'</span><span class="p">,</span>
         <span class="s1">'title'</span>         <span class="o">=&gt;</span> <span class="n">title</span><span class="p">.</span><span class="nf">to_s</span><span class="p">,</span>
         <span class="s1">'date'</span>          <span class="o">=&gt;</span> <span class="n">date</span><span class="p">.</span><span class="nf">to_s</span><span class="p">,</span>
         <span class="s1">'categories'</span>    <span class="o">=&gt;</span> <span class="n">categories</span><span class="p">,</span>
         <span class="s1">'tags'</span>          <span class="o">=&gt;</span> <span class="n">post_tags</span>
       <span class="p">}.</span><span class="nf">delete_if</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="o">|</span> <span class="n">v</span><span class="p">.</span><span class="nf">nil?</span> <span class="o">||</span> <span class="n">v</span> <span class="o">==</span> <span class="s1">''</span><span class="p">}.</span><span class="nf">to_yaml</span>

      <span class="no">File</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="s2">"</span><span class="si">#{</span><span class="n">status</span> <span class="o">==</span> <span class="s1">'publish'</span> <span class="p">?</span> <span class="s1">'_posts'</span> <span class="p">:</span> <span class="s1">'_drafts'</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span><span class="p">,</span> <span class="s2">"w"</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
        <span class="n">f</span><span class="p">.</span><span class="nf">puts</span> <span class="n">data</span>
        <span class="n">f</span><span class="p">.</span><span class="nf">puts</span> <span class="s2">"---"</span>
        <span class="n">f</span><span class="p">.</span><span class="nf">puts</span> <span class="n">content</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>잘 되기를 기도하면서, Run…</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ $ </span>ruby <span class="nt">-r</span> <span class="s1">'./lib/wordpress'</span> <span class="nt">-e</span> <span class="s1">'WordPress::import("wordpress", "homestead", "secret", "wp", "localhost", 3306)'</span>
<span class="c"># where:</span>
<span class="c">#  "wordpress" is database name</span>
<span class="c">#  "homestead" is the database username</span>
<span class="c">#  "secret" is the database password</span>
<span class="c">#  "wp" is the table prefix (default "wp")</span>
<span class="c">#  "localhost" is the database host (default "localhost")</span>
<span class="c">#  3306 is the mysql server's tcp port (default 3306)</span>
</code></pre></div></div>

<p>한번에 됐을까? 절대 그런 일은 일어나지 않는다. 어쨌든, 워드프레스에서 Jekyll 포스트 형태로 모두 변경되었다. 완벽한 변환이란 없다, 수 작업은 필수~</p>

<div class="spacer">• • •</div>

<h3 id="삽질">삽질</h3>

<p>워드프레스 데이터베이스에 입력된 이상한 대시 문자 때문에 이런 고생을 하기도 했다. <a href="https://github.com/vmg/redcarpet/issues/543">https://github.com/vmg/redcarpet/issues/543</a>. 개발자로 다시 성장해 가는 과정이라 생각하자.</p>
:ET