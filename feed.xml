<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Appkr.memo(new Life)</title>
    <description>appkr's blog to record day-to-day life &amp; thoughts.</description>
    <link>http://blog.appkr.kr/</link>
    <atom:link href="http://blog.appkr.kr/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 20 Aug 2017 14:36:13 +0900</pubDate>
    <lastBuildDate>Sun, 20 Aug 2017 14:36:13 +0900</lastBuildDate>
    <generator>Jekyll v3.5.1</generator>
    
      <item>
        <title>애자일 선언서 이해하기</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/2017-08-20-agile-01.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;small class=&quot;text-muted&quot;&gt;그림출처: http://forintus.com/tag/agile-manifesto/&lt;/small&gt;&lt;/p&gt;

&lt;div class=&quot;text-center&quot;&gt;
  &lt;p&gt;&lt;strong&gt;&lt;small&gt;Manifesto for Agile Software Development&lt;/small&gt;&lt;/strong&gt;&lt;/p&gt;
  &lt;p&gt;&lt;small&gt;We are uncovering better ways of developing software by doing it and helping others do it.&lt;/small&gt;&lt;/p&gt;
  &lt;p&gt;&lt;small&gt;Through this work we have come to value:&lt;/small&gt;&lt;/p&gt;
  &lt;p&gt;&amp;nbsp;&lt;/p&gt;
  &lt;p class=&quot;lead&quot;&gt;INDIVIDUALS AND INTERACTIONS &lt;small&gt;over&lt;/small&gt; PROCESSES AND TOOLS&lt;/p&gt;
  &lt;p class=&quot;lead&quot;&gt;WORKING SOFTWARE &lt;small&gt;over&lt;/small&gt; COMPREHENSIVE DOCUMENTATION&lt;/p&gt;
  &lt;p class=&quot;lead&quot;&gt;CUSTOMER COLLABORATION &lt;small&gt;over&lt;/small&gt; CONTRACT NEGOTIATION&lt;/p&gt;
  &lt;p class=&quot;lead&quot;&gt;RESPONDING TO CHANGE &lt;small&gt;over&lt;/small&gt; FOLLOWING A PLAN&lt;/p&gt;
  &lt;p&gt;&amp;nbsp;&lt;/p&gt;
  &lt;p&gt;That is, while there is value in the items on the right, we value items on the left more.&lt;/p&gt;
  &lt;p&gt;&amp;nbsp;&lt;/p&gt;
  &lt;p&gt;&lt;small&gt;Kent Beck, Mike Beedle, Arie van Bennekum, Alistair Cockburn, Ward Cunningham, Martin Fowler, James Grenning, Jim Highsmith, Andrew Hunt, Ron Jeffries, Jon Kern, Brian Marick, Robert C. Martin, Steve Mellor, Ken Schwaber, Jeff Sutherland, Dave Thomas&lt;/small&gt;&lt;/p&gt;
  &lt;p&gt;&amp;nbsp;&lt;/p&gt;
  &lt;p&gt;&lt;small&gt;©2001, the above authors&lt;/small&gt;&lt;/p&gt;
  &lt;p&gt;&lt;small&gt;this declaration may be freely copied in any form, but only in its entirely through this notice.&lt;/small&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;!--more--&gt;
&lt;div class=&quot;spacer&quot;&gt;• • •&lt;/div&gt;

&lt;p&gt;애자일 선언서는 동 시대를 살아가는 가장 유명한 애자일 멘토들이 개발자들에게 외치는 “복무신조”, “우리의 다짐” 같은 것이다&lt;small class=&quot;text-muted&quot;&gt;(맞나요? 제대한 지 20년도 넘어서)&lt;/small&gt;. 선언서에서 오른쪽의 것들이 중요하지 않다는 것이 아니라, 소프트웨어 개발자로서 왼쪽의 것을 추구하라고 말씀하신다.&lt;/p&gt;

&lt;p&gt;개인마다 해석이나 이 선언서가 주는 임팩트는 다를 수 있다. 필자가 나름대로 이해한 내용을 썰로 풀어 본다.&lt;/p&gt;

&lt;h2 id=&quot;individuals-and-interactions-over-processes-and-tools&quot;&gt;INDIVIDUALS AND INTERACTIONS &lt;small&gt;over&lt;/small&gt; PROCESSES AND TOOLS&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;프로세스나 도구를 모든 팀에 획일적으로 적용해서는 안되며, 팀의 성격에 맞게 써야 한다.&lt;/strong&gt; 가령 애자일 도구로 유명한 스크럼이나 칸반이 모든 팀이 따라야 하는 매직 프로세스는 아니라는 의미다. 프로세스나 도구에 매몰되어, 실제로 산출해야 할 결과물인 작동하는 소프트웨어를 등한시 하는 어리석음을 범하지 말아야 한다. 대기업이란 문맥에서는, 개발자의 생산성이 덜 나올 수 밖에 없다, 지켜야 할 프로세스가 많기 때문에…&lt;/p&gt;

&lt;p&gt;팀에서 위키, 지라, 슬랙, 이메일을 사용한다고 하자. 가장 위험한 상황은&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;“아 그거 이틀 전에 위키에 답변 드렸는데…“라고 말하거나,&lt;/li&gt;
  &lt;li&gt;슬랙으로 업무 요청하고 결과를 마냥 기다린다거나,&lt;/li&gt;
  &lt;li&gt;지라 티켓 등록하고 담당자 할당 후 팔로우 업을 하지 않는&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;상황들이다.&lt;/p&gt;

&lt;p&gt;우리&lt;small class=&quot;text-muted&quot;&gt;개발자&lt;/small&gt; 스스로에게 반문해보라. 작업에 몰두하고 있을 때, 이런 메시지를 확인하기 위해 주기적으로 자기 자신에게 인터럽트를 거는지? 필자의 경우, 담배 필 때나 화장실 갈 때 몰아서 보는 편이다.&lt;/p&gt;

&lt;p&gt;답은 의외로 간단하다. 자리에 가서, “스펙 수정 요청 보냈어요. 자세한 내용은 위키에 썼으니 확인해주세요”라고 한번 더 말하는 것이다, 상대방이 멀리 있다면 30초 짜리 전화 한통이면 된다. 아래 링크에서 한 숨만 나오는 CEO를 만나보라.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/learn-n-think/what-is-follow-up/&quot;&gt;Follow Up 이란?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;팀을 들여다 보라~ 적합한 프로세스와 도구로 인터랙션하고 있는가?&lt;/strong&gt; “남들이 하니까 무조건 따라한다”라는 위험한 선택을 하고 있지 않는가? “남들이 하니까”는 판단을 위한 참고자료일 뿐이다.&lt;/p&gt;

&lt;h2 id=&quot;working-software-over-comprehensive-documentation&quot;&gt;WORKING SOFTWARE &lt;small&gt;over&lt;/small&gt; COMPREHENSIVE DOCUMENTATION&lt;/h2&gt;

&lt;p&gt;너무나도 당연한 얘기다. &lt;strong&gt;최종 산출물&lt;small class=&quot;text-muted&quot;&gt;Deliverable&lt;/small&gt;이 무엇인지 잘 생각해 보라. “작동하는 서비스&lt;small class=&quot;text-muted&quot;&gt;=우리가 준비한 런타임 환경 + 우리가 개발한 소프트웨어&lt;/small&gt;“다.&lt;/strong&gt; UI 목업이나 초벌 구현 소프트웨어를 보면서 고객과 대화해 본 적이 있다면 그 강력함에 동의하며, “무릎을 탁~” 칠 것이다.&lt;/p&gt;

&lt;p&gt;문서가 중요하지 않다는 것이 아니다. 작동하는 소프트웨어 만큼이나 문서도 중요하다. 일을 시작하기 위해 문서가 필요하고, 일을 끝내기 위해서 문서가 필요하다. 상위 요구사항이 구체화되어야 일을 시작할 수 있고, 프로젝트 진행 중에 구체화된 하위 스펙을 전부 구현해야 일을 끝낼 수 있다는 점을 상기시켜보라&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;예를 들어, 완벽한 시스템을 상위 설계하고 문서화 했다고 하자. 그런데, 그것은 그냥 문서일 뿐이다. 작동하는 소프트웨어가 없는 문서가 무슨 의미가 있는가?&lt;/p&gt;

&lt;p&gt;개발자로 경력을 전환하기 위해 10개월의 준비 기간을 가지는 동안, 꽤 여러 명의 청년 창업가들을 만났다. 말하는 목표 시스템은 전부 애플/잡스 급이다. 그런데, 공허한 말로만 존재할 뿐, 심지어 문서도 없고, 작동하는 최소한의 서비스는 당연히 없었다. 창투사들이 MVP&lt;small class=&quot;text-muted&quot;&gt;Minimum Viable Product&lt;/small&gt;를 요구하는 이유다&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. 해결하고자하는 비즈니스 문제를 정확히 이해하고, 현실적인 해결책을 가지고 있는 창업가들은 조금씩이라도 힘 닿는데로 도와줬다.&lt;/p&gt;

&lt;h2 id=&quot;customer-collaboration-over-contract-negotiation&quot;&gt;CUSTOMER COLLABORATION &lt;small&gt;over&lt;/small&gt; CONTRACT NEGOTIATION&lt;/h2&gt;

&lt;p&gt;필자는 2002년부터 10년 동안 非 개발자로서, 투자를 받거나, 차입을 하거나, 기술을 도입하거나, 인력 파견 요청을 하거나, 회사를 파는 등 크고 작은 계약을 경험했다. 그런데, 생각해 보니 누군가의 요청을 받아 용역&lt;small class=&quot;text-muted&quot;&gt;SI&lt;/small&gt;을 제공하는 계약을 다루어 본 적 없는 甲이었다. 해서 이 원칙을 이해하는데 있어서 전문성이 떨어질 수 밖에 없다. 그런데, 고객이란 꼭 외부의 고객만을 의미하지 않는다. 개발자의 직접 고객인 팀 동료, 매니저, 기획과 QA, 간접 고객인 사업 부서도 넒은 의미의 고객이라 생각할 수 있다.&lt;/p&gt;

&lt;p&gt;필자는 이 원칙을 “상호 이득&lt;small class=&quot;text-muted&quot;&gt;Mutual Benefit&lt;/small&gt;“을 추구하기 위해 계약&lt;small class=&quot;text-muted&quot;&gt;=약속 또는 스펙&lt;/small&gt;보다는 고객과 지속적 협업을 이끌어 내야한다는 취지로 이해했다.&lt;/p&gt;

&lt;p&gt;역시 경력전환기 동안 생계를 위해 용역을 기웃대던 시절 이야기다. 일을 주겠다는 사람을 만나보면, 그들이 하고 싶은 것이 무엇인지 정확인 기술하지 못하는 경우가 많았다. 그들의 잘못이 아니다. 해보지 않았기 때문에, 고객도 용역을 제공하는 쪽도 알 수 없는 것이다. 일의 시작이 계약이라고 한다면, 요구사항이 명확하지 않으니 밀땅을 하며 계속 시간을 지체하고 계약을 하지 말라는 것인가? 그것은 서로간에 에너지 낭비다. 현실적으로 계약서에 완벽한 요구사항과 계약 완료 조건을 담을 수는 없다. 개발자는 이 시기에 구현 가능성을 검토하고, 필요한 도구를 조사하면 된다.&lt;/p&gt;

&lt;p&gt;훌륭한 고객은 구체적인 작업 목록을 제시하진 못해도, 해결하고자 하는 비즈니스 문제와 최종 결과물의 목표 이미지를 명확히 인지하고 있다. 또, 훌륭한 용역 제공자는 자신이 뭘 하고 싶은 지 설명하지 못하는 고객일지라도, 그들이 해결하고자 하는 문제를 구체화할 수 있도록 이끌어 주고, 최종 결과물의 목표 이미지와 기대 효과를 가늠할 수 있도록 해준다.&lt;/p&gt;

&lt;p&gt;일단 일을 시작하게 되면 고객과 계속 협업해야 한다. 계약을 수행하는 중에 스펙은 계속 변한다, 그것이 고객에 의해서든, 개발팀의 한계에 의해서든. 고객이 제시한 요구사항을 구현하다보면 더 좋은 설계를 역으로 제안하는 경우도 있다. 가끔은 팀의 현재 기술 수준, 시간, 또는 자원의 한계로 구현이 불가한 경우도 있다. 개발자는 매일 매일 선택의 순간을 만나게 되고(e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;=&lt;/code&gt;), 스스로 선택할 수 없는 문제라면, 고객에게 빠르게 결정을 요청해야 한다. 스펙 변경에 의해 개발자의 일 량이 늘거나 줄기도 하며, 기간을 늘리거나, 개발자를 더 투입해야 하는 순간도 있는데, 프로젝트/팀 매니저의 역할이다&lt;small class=&quot;text-muted&quot;&gt;오버타임하거나 태업하는 개발자를 관리하는 것은 매니저의 책임&lt;/small&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;계약을 하지 말라는 얘기가 아니다. 계약은 무조건해야 한다. 다만, “상호 이득”을 위해 서로가 긴밀하게 협업해야 한다&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;responding-to-change-over-following-a-plan&quot;&gt;RESPONDING TO CHANGE &lt;small&gt;over&lt;/small&gt; FOLLOWING A PLAN&lt;/h2&gt;

&lt;p&gt;필자는 반도체 설계 전문 회사&lt;small class=&quot;text-muted&quot;&gt;FABLESS라 부름&lt;/small&gt;에서 꽤 오래 근무했다. 제품성, 수익성, 사업성을 판단해서 콤포넌트 레벨의 상위 설계를 하는 제품 기획자 역할이었다. 목표 미세 공정 수준에 따라 다르긴 하지만, 32bit 범용 Applications Processor는 3개월 제품 기획 -&amp;gt; 1.5년 설계 -&amp;gt; 3년동안 생산/판매의 수명을 가진다. 설계가 끝나면 양산을 위해 마스킹 및 양산 셋팅 과정을 거치는데, 오류가 발견되면 마스크를 다시 떠야 한다. 당시 회사는 90~45nm 제품들을 설계했었는데, 45nm 기준 2년 개발 기간 동안 대략 100억원의 개발비를 쓰는데, 수정의 양에 따라 1억원 ~ 풀 리비전을 하게 되면 20억원의 비용이 더 써야한다. 개발은 끝났지만, 시장 환경이 변해서 제품성, 수익성, 사업성 측면에서 쓸모 없는 제품이면 매몰 비용으로 빨리 잊어버리고 다음 제품 개발에 몰두해야 한다.&lt;/p&gt;

&lt;p&gt;이 이야기로 시작한 이유는 반도체는 “하드웨어”이고 우리는 “소프트웨어”를 다룬다는 점을 부각시키기 위해서다. 애자일 멘토들이 말하는 “변경을 받아 들이라”는 가치는, 한국의 소프트웨어 개발자에게는 과하게 이상적이란 생각이 든다.&lt;/p&gt;

&lt;p&gt;그럼에도 불구하고, 소프트웨어는 원래 변경이 발생하는 것이 속성이며, 소프트웨어 개발자의 존재 이유는 그 변경을 처리하는 것이라 생각한다. 프로젝트에 관여하고 있는 등장 인물들의 역할을 잠깐 생각해 보자.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;고객은&lt;small class=&quot;text-muted&quot;&gt;앞 절에서 말한 광의의 고객&lt;/small&gt; 도메인 전문가 들이다.&lt;/li&gt;
  &lt;li&gt;우리들의 역할은 소프트웨어 설계라는 고도의 전문적인 기술을 가지고, 도메인 전문가들이 풀고자 하는 문제를 풀 수 있도록 도와주는 것이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;우리의 설계를 담은 최종 서비스를 사용하는 것은 우리 자신이 아니라 고객이다. 우리는 도메인을 잘 모르고, 그들이 처한 상황을 잘 모른다. 변경이 발생하는 원인도 생각나는대로 나열해보자.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;계획이 틀렸을 수 있다.&lt;/li&gt;
  &lt;li&gt;고객의 시장 또는 경쟁 환경이 변했을 수 있다.&lt;/li&gt;
  &lt;li&gt;고객이 더 효율적으로 일하는 방법을 찾았거나, 일하는 프로세스가 바뀌었을 수 있다.&lt;/li&gt;
  &lt;li&gt;설계가 틀렸을 수 있다&lt;small class=&quot;text-muted&quot;&gt;=bug&lt;/small&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;우리보다 더 제품에 대해 더 많은 지식을 가진, 그들이 항상 옳고 그들의 변경 요구사항을 처리해 주는 것이 우리의 존재 이유다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;처음부터 완벽한 계획도 없고, 처음부터 완벽한 시스템도 없다.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;strong&gt;개발자도 문서를 잘 써야 한다.&lt;/strong&gt; 필자는 코드 만큼이나 문서도 중요시 한다. 정확히는 “문서를 통한 의사소통”을 중요시 한다. 내 생각/설계를 다른 이에게 전달을 위해서다. 전체 코드를 디코드하는 비용과 문서를 이해하는 비용 중 어떤 것이 더 비용/시간 효율적일까? 라고 생각해보라. 또는 문서에 써놓은 예제 코드 몇 줄의 효용성을 생각해보라. 개발자가 쓴 문서는 그 문서를 읽는 3개월 뒤의 자신 또는 팀 동료가 고마워해야 한다. 그래서 개발자의 문서는 주절주절보다는 다이어그램이 좋다. 게다가 전세계 모든 개발자가 이해할 수 있는 표준 UML이면 더 좋을테다.&amp;nbsp;&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;&lt;strong&gt;MVP를 Base Code로 사용하지 말라.&lt;/strong&gt; 버리고 다시 만들어야 한다. MVP는 설계가 더럽지만 빨리 만드는 것이 목표이고, 실제 비즈니스할 서비스는 현재 시점에서 오버하지 않는 수준으로 설계 원칙을 지켜서 만들어야 한다.&amp;nbsp;&lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;&lt;strong&gt;상위 요구사항이 명확하면, 개발자는 하위 작업 목록을 식별할 수 있다.&lt;/strong&gt; 개발자는 각 하위 작업에 소요될 시간을 가늠할 수 있고, 전체 개발 기간을 계산할 수 있다. 그런데, 어떤 이유에서든 간에 개발자가 하위 작업 목록을 식별할 수 없는 상태에서 “이거 얼마냐 걸려?”라고 묻지 말아야 한다&lt;small class=&quot;text-muted&quot;&gt;엉클 밥도 그런 류의 질문을 거세게 비난했다&lt;/small&gt;. 요구사항이 구체화되지 전까지, 누구도 미래의 예측하는 마법의 수정 구슬을 가지고 있지 않으므로, 개발 기간은 Unknown Unknown이다. 개발 기간이 산정되지 않았다고 일을 시작하지 못하는 것은 아니다. 다만, 요구사항이 어렴풋한 상태에서 산출한 개발 기간은 바뀔 수 있다는 것을 서로가 이해해 주면 된다.&amp;nbsp;&lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 20 Aug 2017 00:00:00 +0900</pubDate>
        <link>http://blog.appkr.kr/learn-n-think/agile-manifesto/</link>
        <guid isPermaLink="true">http://blog.appkr.kr/learn-n-think/agile-manifesto/</guid>
        
        <category>개발자</category>
        
        <category>프로세스</category>
        
        
        <category>learn-n-think</category>
        
      </item>
    
      <item>
        <title>코드 비용에 대한 2016년의 메모</title>
        <description>&lt;p&gt;책상을 정리하다가 “라라벨 빨간책”이라 알려진 책을 집필하며 2016년 초에 쓴 메모 중 일부를 찾았다.&lt;/p&gt;

&lt;p&gt;실무 개발자로 일하지 않던 시절 피상적으로만 생각하던 내용들이 지금은 피부에 와 닿는다. 이 포스트의 본문은 최근 나 또는 내가 속한 팀이 처한 상황에 거의 흡사하게 오버랩핑되는 2016년 메모의 일부분이다. 내 기억이 맞다면, 누군가의 영상 강의를 보고 메모한 것이다.&lt;/p&gt;

&lt;p&gt;이 시대의 스승(엉클 밥, 파울러 옹 등)들이 언급한 소프트웨어 개발자로서 코드를 대하는 자세, 즉 소프트웨어의 제 2가치와 제 1가치에 대해 다시 한번 되새겨본다.&lt;/p&gt;

&lt;p&gt;개발해서 남에게 납품하는 소프트웨어는 굳이 이럴 필요까진 없다고 생각한다. 그러나, 자신의 서비스를 위해 소프트웨어를 개발한다면, 개발자가 코드를 완전히 소유할 수 있는 시간과 비용을 인정해 줘야 한다.&lt;/p&gt;

&lt;!--more--&gt;
&lt;div class=&quot;spacer&quot;&gt;• • •&lt;/div&gt;

&lt;h2 id=&quot;cost-of-codeprogram&quot;&gt;Cost of Code(=~Program)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Cost of introduction (최초 개발 비용, 모두가 합의한 비용)&lt;/li&gt;
  &lt;li&gt;Cost of change (수정 비용, 사업적 필요에 의해 발생할 수 밖에 없는 비용)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cost of ownership&lt;/strong&gt; (소유 비용, &lt;strong&gt;Time and effort it takes to maintain the owned application logic to support its ongoing change&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;That’s why some engineers try to increase the cost of introduction in an attempt to affect the cost of change curve.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;ownership-of-code&quot;&gt;Ownership of Code.&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Own only the logic you need to change (계속 유지보수할 코드만 소유).&lt;/li&gt;
  &lt;li&gt;Write only the logic you need to own (완전히 소유할 코드만 작성).&lt;/li&gt;
  &lt;li&gt;Own everything you write (작성한 것은 완전히 소유).&lt;/li&gt;
  &lt;li&gt;Try not to write anything that you will not own (소유&lt;small class=&quot;text-muted&quot;&gt;유지보수&lt;/small&gt;하지 않을 코드는 쓰지 말것).&lt;/li&gt;
  &lt;li&gt;Reuse everything else (나머지&lt;small class=&quot;text-muted&quot;&gt;이미 발명된 바퀴&lt;/small&gt;는 전부 재사용).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;code-process&quot;&gt;Code Process&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Document the needs (요구사항 문서화).&lt;/li&gt;
  &lt;li&gt;Experiment with tools available (선행 기술 조사).&lt;/li&gt;
  &lt;li&gt;Document changes and constraints (변경 필요 요구사항과 한계점 판단).&lt;/li&gt;
  &lt;li&gt;Stabilize. Claim ownership when the thing grows outside of tool boundary (소유할 것과 하지 않을 것을 구분해서 개발).&lt;/li&gt;
  &lt;li&gt;Isolate religiously (경계를 명확히).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016-l5book-memo-9.jpg&quot;&gt;&lt;img src=&quot;/images/2016-l5book-memo-9.jpg&quot; alt=&quot;Memo Page 9&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016-l5book-memo-10.jpg&quot;&gt;&lt;img src=&quot;/images/2016-l5book-memo-10.jpg&quot; alt=&quot;Memo Page 10&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://drive.google.com/file/d/0Bx8_tW_C70eNc2F4SC1tdzRabHM/view?usp=sharing&quot;&gt;Memo Captured(pdf)&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 12 Aug 2017 00:00:00 +0900</pubDate>
        <link>http://blog.appkr.kr/learn-n-think/memo-in-early-2016/</link>
        <guid isPermaLink="true">http://blog.appkr.kr/learn-n-think/memo-in-early-2016/</guid>
        
        <category>개발자</category>
        
        <category>프로세스</category>
        
        
        <category>learn-n-think</category>
        
      </item>
    
      <item>
        <title>MySQL 테이블 잠금 실험</title>
        <description>&lt;p&gt;MySQL의 잠금 특성을 확인하기 위한 실험 결과입니다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;읽기 잠금의 동작 특성&lt;/li&gt;
  &lt;li&gt;쓰기 잠금의 동작 특성&lt;/li&gt;
  &lt;li&gt;트랜잭션과 Row 잠금&lt;/li&gt;
  &lt;li&gt;라라벨에서 트랜잭션과 잠금&lt;/li&gt;
&lt;/ol&gt;

&lt;!--more--&gt;
&lt;div class=&quot;spacer&quot;&gt;• • •&lt;/div&gt;

&lt;p&gt;테스트 테이블 생성&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DATABASE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock_test&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CHARACTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;utf8&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;COLLATE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;utf8_unicode_ci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AUTO_INCREMENT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VARCHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;140&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENGINE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INNODB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;SHOW&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STATUS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;messages&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;1-읽기-잠금의-동작-특성&quot;&gt;1. 읽기 잠금의 동작 특성&lt;/h2&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mysql1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LOCK&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TABLES&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;READ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mysql1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SHOW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROCESSLIST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- Query ok&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- 다른 프로세스(=~커넥션=~세션)에서 실행&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mysql2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LOCK&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TABLES&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WRITE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mysql1&lt;/code&gt; 프로세스에서 테이블 전체에 대해 읽기 잠금을 걸었으므로, &lt;code class=&quot;highlighter-rouge&quot;&gt;mysql2&lt;/code&gt; 프로세스는 무한 뺑글이.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mysql1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SHOW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROCESSLIST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- &quot;Waiting for table metadata lock&quot; &amp;lt;= mysql2 프로세스의 상태&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mysql1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UNLOCK&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TABLES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mysql1&lt;/code&gt;이 테이블 잠금을 푸는 순간 &lt;code class=&quot;highlighter-rouge&quot;&gt;mysql2&lt;/code&gt; 프로세스는 뺑글이 사라지고, 쓰기 잠금 얻어감.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mysql1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mysql2&lt;/code&gt; 프로세스가 테이블에 대해 쓰기 잠금을 얻어 갔으므로, &lt;code class=&quot;highlighter-rouge&quot;&gt;mysql1&lt;/code&gt; 프로세스는 무한 뺑글이.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- 무한 뺑글이 돌던 SELECT 쿼리 취소 후&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mysql1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UNLOCK&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TABLES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mysql1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SHOW&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;OPEN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TABLES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mysql2&lt;/code&gt; 프로세스가 잠금을 가지고 있으므로 다른 프로세스에서 잠금 해제 불가.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mysql2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UNLOCK&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TABLES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mysql1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- Query ok.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mysql1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LOCK&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TABLES&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;READ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mysql1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- Query ok.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mysql2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- Query ok.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mysql2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'FOO'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mysql1&lt;/code&gt; 프로세스가 읽기 잠금을 걸었으므로, &lt;code class=&quot;highlighter-rouge&quot;&gt;mysql2&lt;/code&gt; 프로세스에서도 읽기는 가능하지만, 쓰기를 시도하면 무한 뺑글이.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mysql1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'BAR'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- Table 'messages' was locked with a READ lock and can't be updated&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;읽기 잠금을 건 &lt;code class=&quot;highlighter-rouge&quot;&gt;mysql1&lt;/code&gt; 프로세스도 쓰기 불가능을 마찬가지임.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mysql1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UNLOCK&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TABLES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;테이블에 걸린 모든 잠금이 풀렸으므로, 뺑글이를 돌던 &lt;code class=&quot;highlighter-rouge&quot;&gt;mysql2&lt;/code&gt;의 뺑글이는 사라지고 &lt;code class=&quot;highlighter-rouge&quot;&gt;INSERT&lt;/code&gt; 쿼리가 작동함.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mysql1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mysql2&lt;/code&gt; 프로세스에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;INSERT&lt;/code&gt;한 레코드 확인 가능.&lt;/p&gt;

&lt;h3 id=&quot;11-결론&quot;&gt;1.1. 결론&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;READ&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;WRITE&lt;/code&gt; 무관한게 먼저 테이블을 잠근 프로세스가 잠금을 반환하기 전에 다른 프로세스는 잠금을 얻을 수 없다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;READ&lt;/code&gt; 잠금이 걸린 상태에서
    &lt;ul&gt;
      &lt;li&gt;다른 프로세스에서 테이블을 읽는 것은 가능하다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;READ&lt;/code&gt; 잠금은 건 프로세스를 포함해 모든 프로세스에서 테이블에 쓰기 작업은 할 수 없다.&lt;/li&gt;
      &lt;li&gt;잠금을 가진 프로세스에서 쓰기를 시도하면 바로 오류가 발생하지만, 다른 프로세스에서는 잠금이 풀릴 때 까지 기다린다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-쓰기-잠금의-동작-특성&quot;&gt;2. 쓰기 잠금의 동작 특성&lt;/h2&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mysql1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LOCK&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TABLES&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WRITE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mysql1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'BAZ'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mysql1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- Query ok.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mysql2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mysql2&lt;/code&gt; 프로세스에서는 무한 뺑글이.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mysql1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;RENAME&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- Can't execute the given command because you have active locked tables or an active transaction&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WRITE&lt;/code&gt; 잠금을 가진 &lt;code class=&quot;highlighter-rouge&quot;&gt;mysql1&lt;/code&gt; 프로세스지만, 테이블 이름을 변경하는 등의 DDL은 불가능함.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mysql1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UNLOCK&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TABLES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;테이블에 걸린 모든 잠금이 풀렸으므로, 뺑글이를 돌던 &lt;code class=&quot;highlighter-rouge&quot;&gt;mysql2&lt;/code&gt;의 뺑글이는 사라지고 &lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT&lt;/code&gt; 쿼리가 작동함.&lt;/p&gt;

&lt;h3 id=&quot;21-결론&quot;&gt;2.1. 결론&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WRITE&lt;/code&gt; 잠금을 가진 프로세스에서만 읽기, 쓰기 가능하다.&lt;/li&gt;
  &lt;li&gt;다른 프로세스에서는 잠금이 풀릴 때가지 읽기, 쓰기 모두 불가능하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-트랜잭션과-row-잠금&quot;&gt;3. 트랜잭션과 Row 잠금&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT ... LOCK IN SHARE MODE&lt;/code&gt; for READ, &lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT ... FOR UPDATE&lt;/code&gt; for UPDATE and DELETE.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mysql1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;START&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRANSACTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;mysql1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LOCK&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SHARE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mysql2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- Query ok.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mysql2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;START&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRANSACTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;mysql2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DELETE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;mysql2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;COMMIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Lock wait timeout exceeded; try restarting transaction&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mysql1&lt;/code&gt; 프로세스에서 1번 Row를 잠궜지만, &lt;code class=&quot;highlighter-rouge&quot;&gt;mysql2&lt;/code&gt; 프로세스에서 읽기는 가능. 반면, 쓰기 동작을 하려하면 50초 동안 뺑글이를 돌다가 쿼리 실패함. 50초에 대한 힌트는 아래 쿼리에서 찾을 수 있음.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SHOW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VARIABLES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VARIABLE_NAME&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIKE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;%innodb_lock%&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- innodb_lock_wait_timeout: 50&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mysql2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DELETE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;mysql2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;COMMIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mysql2&lt;/code&gt; 프로세스에서 뺑글이가 돌고 있는 상태에서 쨉싸게 &lt;code class=&quot;highlighter-rouge&quot;&gt;mysql1&lt;/code&gt; 프로세스에서 같은 Row 1번을 지움.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mysql1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DELETE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;mysql1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;COMMIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- No errors; 1 row affected&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;한편 mysql2 프로세스에서는… 데드락이 발생함.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- [ERROR in query 2] Deadlock found when trying to get lock; try restarting transaction&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mysql2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SHOW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENGINE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INNODB&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STATUS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;31-결론&quot;&gt;3.1. 결론&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Row 잠금이 걸려도 다른 프로세스에서 읽기는 가능하지만, 쓰기는 불가능하다.&lt;/li&gt;
  &lt;li&gt;Row 잠금이 걸린 상태에서 다른 프로세스에서 쓰기를 시도하려 하면, &lt;code class=&quot;highlighter-rouge&quot;&gt;innodb_lock_wait_timeout&lt;/code&gt; 옵션으로 설정된 시간 만큼 기다리다가 잠금을 얻는 것을 포기하고 쿼리 실패한다.&lt;/li&gt;
  &lt;li&gt;같은 Row에 대해 여러 개의 프로세스가 동시에 쓰기를 시도할 때 Dead Lock(교착상태)이 발생할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;4-라라벨에서-트랜잭션과-잠금&quot;&gt;4. 라라벨에서 트랜잭션과 잠금&lt;/h2&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// https://github.com/appkr/db-lock-poc/blob/master/core/Myshop/Infrastructure/Eloquent/EloquentProductRepository.php#L22-L25
&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beginTransaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lockForUpdate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findOrFail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;prime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;\Exception&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rollBack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;spacer&quot;&gt;• • •&lt;/div&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- http://minsql.com/mysql/information_schema-innodb_xxx-%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-lock-%EC%A0%95%EB%B3%B4-%ED%99%95%EC%9D%B8/&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;information_schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INNODB_LOCK_WAITS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;information_schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INNODB_LOCKS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;information_schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INNODB_TRX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;straight_join&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trx_mysql_thread_id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;waiting_thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trx_id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;waiting_trx_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trx_query&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;waiting_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trx_mysql_thread_id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blocking_thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trx_id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blocking_trx_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trx_query&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blocking_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;bl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock_id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blocking_lock_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;bl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock_mode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blocking_lock_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;bl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock_type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blocking_lock_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;bl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock_table&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blocking_lock_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;bl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock_index&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blocking_lock_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;wl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock_id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;waiting_lock_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;wl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock_mode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;waiting_lock_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;wl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock_type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;waiting_lock_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;wl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock_table&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;waiting_lock_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;wl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock_index&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;waiting_lock_index&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;information_schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INNODB_LOCK_WAITS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ilw&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;information_schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INNODB_TRX&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
   &lt;span class=&quot;n&quot;&gt;information_schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INNODB_TRX&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
   &lt;span class=&quot;n&quot;&gt;information_schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INNODB_LOCKS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
   &lt;span class=&quot;n&quot;&gt;information_schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INNODB_LOCKS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wl&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trx_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ilw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blocking_trx_id&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trx_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ilw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requesting_trx_id&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ilw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blocking_lock_id&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ilw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requested_lock_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 04 Aug 2017 00:00:00 +0900</pubDate>
        <link>http://blog.appkr.kr/cheatsheet/understanding-mysql-db-lock/</link>
        <guid isPermaLink="true">http://blog.appkr.kr/cheatsheet/understanding-mysql-db-lock/</guid>
        
        <category>개발자</category>
        
        <category>데이터베이스</category>
        
        
        <category>cheatsheet</category>
        
      </item>
    
      <item>
        <title>아키텍처와 의존성</title>
        <description>&lt;p&gt;이 글은 그간 내가 짠 코드에 대한 반성이며, 앞으로 더 잘 만들겠다는 약속이며, 이런 실수를 하지 말라는 계몽이기도합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;割鷄焉用牛刀(할계언용우도)
닭 잡는 데 어찌 소 잡는 칼을 쓰겠는가?&lt;/p&gt;

  &lt;footer&gt;&lt;cite&gt;논어(論語) &quot;양화(陽貨)&quot;편&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;오해를 하실까봐 미리 쉴드를 칩니다. 제가 좋아하고 자주 인용하는 말입니다.&lt;/p&gt;

&lt;p&gt;그런데 바꾸어 생각해보면, 소잡는데 닭 잡는 칼을 쓰는 것도 바보 같은 짓입니다. 일회성으로 사용할 소프트웨어을 개발할 때는 모든 설계 원칙을 지킬 필요 없습니다만, 계속 유지 보수해야 하는 대형 서비스를 개발할 때는 소 잡는 칼을 써야지요.&lt;/p&gt;

&lt;p&gt;지난 몇 개월간 저의 포커스는 &lt;strong&gt;읽기 쉬운 코드&lt;/strong&gt;였습니다. &lt;em&gt;“팀에 처음 합류한 신입이 코드를 이해하고 바로 프로젝트에 투입할 수 있는가?”&lt;/em&gt; 라는 관점이죠.&lt;/p&gt;

&lt;div class=&quot;panel panel-default&quot;&gt;
  &lt;div class=&quot;panel-body&quot;&gt;
    &lt;p class=&quot;lead&quot;&gt;컴퓨터가 인식 가능한 코드는 바보라도 작성할 수 있지만, 인간이 이해할 수 있는 코드는 실력 있는 프로그래머만 작성할 수 있다.&lt;/p&gt;
    &lt;small class=&quot;text-muted&quot;&gt;- 마틴파울러 &quot;리팩토링&quot;&lt;/small&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;저는 2016년 12월 부터 라라벨 5.2로 개발한 메쉬프라임이라는 서비스 개발에 참여하고 있습니다. 이 서비스는 오픈한 지 대략 1년 됐고 현재는 매일 2만 트랜잭션 정도가 발생하고, 이 트랜잭션에는 네다섯 개 정도의 테이블이 연결되어 있어서, 대략 10만 레코드가 생성됩니다. 오늘 기준으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; 브랜치에 총 3,495 커밋이 있고, 추가된 코드는 대략 42만 라인입니다. 결코 작은 서비스가 아니죠?&lt;/p&gt;

&lt;p&gt;팀 합류 초기에 폭풍같이 몰아치던 기능 추가 프로젝트가 어느 정도 마무리되어, 한 숨 돌리면서, 몇 주전에 라라벨 프레임워크 버전 업을 시도한 적이 있습니다. 운영 서버에 적용할 의도는 아니었지만, 곧 5.5 LTS가 나오니 5.3 -&amp;gt; 5.4까지 마이그레이션 해보자는 취지였지요. 공식 매뉴얼에서 말하는 마이그레이션 가이드를 따라 5.3 마이그레이션을 수행했습니다. 랜딩 페이지가 나오고 로그인도 잘 됐습니다만, API 엔드포인트를 하나씩 호출해 보고 문제점들을 하나씩 잡아가는 과정에서 마이그레이션이 불가하다는 점을 깨닫고 뒤로 물러섰습니다.&lt;/p&gt;

&lt;p&gt;왜 그랬을까요? 바로 이 글에서 쓰고자 하는 &lt;strong&gt;1) 커플링된 코드&lt;/strong&gt;와 &lt;strong&gt;2) 아키텍처&lt;/strong&gt; 때문이었습니다. 본문에 나오는 코드는 메쉬프라임과 무관함을 밝힙니다.&lt;/p&gt;

&lt;p&gt;이제 나는 &lt;strong&gt;읽기 쉬울 뿐만 아니라 유지 보수가 편리한 코드&lt;/strong&gt;를 개발할 것을 약속합니다.&lt;/p&gt;

&lt;div class=&quot;panel panel-default&quot;&gt;
  &lt;div class=&quot;panel-body&quot;&gt;
    &lt;p class=&quot;lead&quot;&gt;프로그램이 지닌 가치는 두 종류다. 하나는 &lt;strong&gt;1) 현재의 기능이라는 가치&lt;/strong&gt;이고, 또 하나는 &lt;strong&gt;2) 미래의 기능이라는 가치&lt;/strong&gt;다. 프로그래밍할 때 개발자는 주로 그 프로그램에 현재 무슨 기능을 넣을지에 전념한다. 버그를 수정하든 새 기능을 추가하든, 그것은 프로그램의 성능을 높임으로써 현재 기능의 가치를 높이는 일이다.&lt;/p&gt;
    &lt;p class=&quot;lead&quot;&gt;프로그램의 현재 기능은 그저 일부에 불과하다는 사실을 깨우치지 않으면 개발자로서 오래 가지 못한다. 오늘 일을 오늘 할 수 있어도 내일 일을 내일 할 능력이 없다면 개발자로서 싪패하게 된다. 오늘 해야 할 일은 알아도 내일 일은 알 수 없는 것이 당연하다. 이런 일, 저런 일, 또는 어쩌면 생각지도 못한 일을 하게 될 수도 있다.&lt;/p&gt;
    &lt;small class=&quot;text-muted&quot;&gt;- 켄트 벡&lt;/small&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;!--more--&gt;
&lt;div class=&quot;spacer&quot;&gt;• • •&lt;/div&gt;

&lt;h2 id=&quot;1-강한-결합&quot;&gt;1. 강한 결합&lt;/h2&gt;

&lt;p&gt;어떤 모듈 A가 다른 모듈 B에 “의존”한다는 것은 A가 B의 변수(데이터) 또는 함수(데이터는 변경하는 로직)를 사용하고 있거나, A의 함수에서 B를 파라미터로 받거나 B를 생성하거나, A의 함수에서 B 모듈을 반환하는 등의 모든 행위를 포함합니다. 즉, 모듈 B의 데이터 구조 또는 함수가 변경되면, 모듈 A도 영향을 받는다고 해석할 수 있습니다. 극단적인 경우에는 멀쩡하던 모듈 B의 함수 또는 모듈 자체가 다음 버전에 갑자기 사라질 수도 있겠죠?&lt;/p&gt;

&lt;p&gt;우리의 코드는 프레임워크 개발팀을 믿고 신뢰하며 프레임워크나 ORM의 함수를 사용합니다. 그러나, 그들은 우리에게 자신의 코드를 변경하지 않는다고 어떤 약속도 하지 않았습니다. 결합도가 높은 코드 예제를 볼까요?&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// app/Product.php
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;\Illuminate\Database\Eloquent\Model&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...  
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getProductImageAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$productImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;public_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;images/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$productImage&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Pure 해야 할 도메인 모델이 엘로퀀트라는 큰 덩어리는 상속하고 있습니다. 상속은 아주 강한 결합입니다. 또 이 코드는 &lt;code class=&quot;highlighter-rouge&quot;&gt;public_path()&lt;/code&gt;라는 라라벨 전역 함수에 의존합니다. 문제는 여기에 그치지 않고, 도메인 서비스나 애플리케이션 서비스에서도 &lt;code class=&quot;highlighter-rouge&quot;&gt;app()&lt;/code&gt; 전역 함수나 &lt;code class=&quot;highlighter-rouge&quot;&gt;DB&lt;/code&gt;와 같은 라라벨 파사드에 의존하고 있을 겁니다. 지금도 이렇게 짜고 있지 않나요? “아니오” 라고 대답했다면, 둘 중 하나입니다. 거짓말을 하고 있거나, 개발자가 아니거나…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;참고&lt;/code&gt;&lt;/strong&gt; “의존성”에 대해 깃허브 저장소에 예제 코드와 함께 정리하고 있습니다. &lt;a href=&quot;https://github.com/appkr/pattern/tree/master/dependency&quot;&gt;https://github.com/appkr/pattern/tree/master/dependency&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-클린-아키텍처&quot;&gt;2. 클린 아키텍처&lt;/h2&gt;

&lt;p&gt;아래 엉클 밥의 비디오에는 나오지는 않는데, 이 분은 OO(객체지향)를 이렇게 정의하셨습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;OO란 Low level detail로 부터 High level policy를 보호하는 것이다.&lt;/p&gt;

  &lt;footer&gt;&lt;cite&gt;로버트 C. 마틴&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;이게 어떻게 가능할까요? 아래 비디오에서는 경계(&lt;code class=&quot;highlighter-rouge&quot;&gt;||&lt;/code&gt;, 두 줄로 표시합니다)라고 답하고 있습니다. 쉽게 말하면 인터페이스입니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=o_TH-Y78tt4&amp;amp;t=10m45s&quot;&gt;&lt;img src=&quot;http://img.youtube.com/vi/o_TH-Y78tt4/0.jpg&quot; alt=&quot;The Principles of Clean Architecture by Uncle Bob Martin&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;중요 내용만 요약했습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;High Level 폴더 구조를 보고 Ruby on Rails 앱인줄 바로 알았다.
    &lt;ul&gt;
      &lt;li&gt;웹은 입출력 장치(==딜리버리 메커니즘)인데, 왜 이 앱이 하고자 하는 바를 폴더 구조에서 알 수 없는가?&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;주&lt;/code&gt;&lt;/strong&gt; RoR 폴더 구조를 벤치마크한 라라벨도 마찬가지입니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;아키텍처는 해결하고자 하는 문제에 관한 의도를 표현해야한다.
    &lt;ul&gt;
      &lt;li&gt;아키텍처는 스프링, MySQL과 같은 툴이 아니다.&lt;/li&gt;
      &lt;li&gt;의도는 유스케이스(Use Case)를 통해서 드러난다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Interactor는 애플리케이션에 종속적인 비즈니스 룰을 다룬다.
    &lt;ul&gt;
      &lt;li&gt;Domain은 애플리케이션과 무관한 비즈니스 룰을 다룬다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;주&lt;/code&gt;&lt;/strong&gt; 애플리케이션은 웹 시스템에 적용, 모바일 앱에 적용 등을 말할 때의 “적용”의 의미. 앱과 혼동하지 말것.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;앱과 무관한 웹 시스템, 데이터베이스등의 입출력 장치들은 경계(&lt;code class=&quot;highlighter-rouge&quot;&gt;||&lt;/code&gt;)를 통해서 소스 코드의 의존성을 역전시켜야 한다.
    &lt;ul&gt;
      &lt;li&gt;비즈니스 룰 보다 UI가 더 자주 변경된다. UI의 변경 때문에 비즈니스 률이 영향받지 않아야 한다.&lt;/li&gt;
      &lt;li&gt;데이터베이스도 마찬가지로 디테일에 해당한다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;주&lt;/code&gt;&lt;/strong&gt; 화살표의 방향에 주의하라고 여러번 말씀하심&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;프레임워크는 편리함을 선사하지만, 그에 따른 대가를 치러야 하는 시점이 찾아 온다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;비디오에 나온 그림을 전부 종합하면 아래 그림 및 설명과 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017-07-09-img-01.png&quot; alt=&quot;&quot; /&gt;
&lt;small class=&quot;text-muted&quot;&gt;그림 출처: http://hugo.ferreira.cc/architecture-the-lost-years/&lt;/small&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;small class=&quot;text-muted&quot;&gt;(실선 두 개로 표시된)&lt;/small&gt; 경계 왼쪽에는 우리가 흔히 아는 &lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;Controller&lt;/code&gt;가 있습니다. 아래 쪽에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;DataBase(=~Persistence Engine)&lt;/code&gt;가 있습니다.&lt;/li&gt;
  &lt;li&gt;컨트롤러는 사용자의 요청을 받아 &lt;code class=&quot;highlighter-rouge&quot;&gt;Request Model(DTO, Command)&lt;/code&gt;을 만들어서 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;I&amp;gt;&amp;gt;Boundary&lt;/code&gt;의 함수를 호출할 때 인자로 담아서 경계 안쪽으로 전달합니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Interactor(=~Service Object)&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;I&amp;gt;&amp;gt;Boundary&lt;/code&gt;를 구현하고 있고, &lt;code class=&quot;highlighter-rouge&quot;&gt;Controller&lt;/code&gt;에서 넘겨준 &lt;code class=&quot;highlighter-rouge&quot;&gt;Request Model&lt;/code&gt;을 사용해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Entity&lt;/code&gt;의 함수를 호출합니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Interactor&lt;/code&gt;는 요청을 수행하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;Entity Gateway(=~&amp;lt;&amp;lt;I&amp;gt;&amp;gt;Repository)&lt;/code&gt;의 함수를 호출해서 저장된 상태를 불러 오기도 하고, 변경된 상태를 저장하기도 합니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Entity Gateway Impl&lt;/code&gt;은 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;I&amp;gt;&amp;gt;Entity Gateway&lt;/code&gt;를 구현하고 있으며, 데이터베이스 API(SQL, ORM) 또는 File, Collection 등의 함수를 이용해서 조회 및 저장 작업을 수행합니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Interactor&lt;/code&gt;는 요청을 처리한 후 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;I&amp;gt;&amp;gt;Boundary&lt;/code&gt;의 함수를 호출할 때 인자로 &lt;code class=&quot;highlighter-rouge&quot;&gt;Response Model&lt;/code&gt;을 만들어 경계 바깥 쪽으로 전달합니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Presentor&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;I&amp;gt;&amp;gt;Boundary&lt;/code&gt;를 구현하고 있으며, &lt;code class=&quot;highlighter-rouge&quot;&gt;Interactor&lt;/code&gt;가 전달한 &lt;code class=&quot;highlighter-rouge&quot;&gt;Response Model&lt;/code&gt;을 가공하고, &lt;code class=&quot;highlighter-rouge&quot;&gt;View Model&lt;/code&gt;의 데이터를 채워줍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-모범-사례&quot;&gt;3. 모범 사례&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/leopro/trip-planner&quot;&gt;Trip Planner&lt;/a&gt;라는 예제 프로젝트입니다. 커맨드와 유스케이스를 이용하고 있습니다. 아쉽게도 라라벨은 아니고, &lt;a href=&quot;http://symfony.com/&quot;&gt;심포니(Symfony)&lt;/a&gt;와 &lt;a href=&quot;http://www.doctrine-project.org/&quot;&gt;독트린(Doctrine)&lt;/a&gt;을 사용하네요.&lt;/p&gt;

&lt;h3 id=&quot;31-controller&quot;&gt;3.1. Controller&lt;/h3&gt;

&lt;p&gt;컨트롤러에서 아래와 같은 코드를 이용해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;CreateTripCommand(=~Request Model)&lt;/code&gt;를 만들어서 &lt;code class=&quot;highlighter-rouge&quot;&gt;UseCase::run()(=~&amp;lt;&amp;lt;I&amp;gt;&amp;gt;Boundary)&lt;/code&gt;을 호출합니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;new CreateTripCommand('my trip')&lt;/code&gt; 부분을 실제 Http 컨트롤러에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;new CreateTripCommand($request-&amp;gt;get('trip_name')&lt;/code&gt;처럼 사용할 겁니다. 그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;new CreateTripUseCase($tripRepository)&lt;/code&gt; 구문은 IoC 또는 의존성 주입을 사용할 것이므로 생략될 것입니다.&lt;/p&gt;

&lt;p&gt;이 예제는 특별하게도 커맨드 버스를 이용하므로, 컨트롤러 코드에서 커맨드를 만들고, 커맨드 버스를 이용해서 생성된 커맨드를 전달하고, 커맨드 핸들러가 커맨드를 처리할 커맨드 핸들러(=~&lt;code class=&quot;highlighter-rouge&quot;&gt;Interactor&lt;/code&gt;)를 찾아서 &lt;code class=&quot;highlighter-rouge&quot;&gt;run()&lt;/code&gt; 메서드를 실행하고 컨트롤러 쪽으로 실행 결과를 반환해 줍니다.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// https://github.com/leopro/trip-planner/blob/master/src/Leopro/TripPlanner/Application/Tests/CreateTripTest.php
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Leopro\TripPlanner\Application\Tests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateTripTest&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;\PHPUnit_Framework_TestCase&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testCreateTrip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$tripRepository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMockBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'...'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CreateTripCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'my trip'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$useCase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CreateTripUseCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$tripRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;nv&quot;&gt;$trip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$useCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertInstanceOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'...'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;32-request-model&quot;&gt;3.2. Request Model&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CreateTripCommand&lt;/code&gt;라는 Request Model 입니다. 커맨드를 사용하므로 커맨드 버스나 핸들러와 같은 복잡한 개념이 나오는데, 커맨드의 근본은 DTO(Data Transfer Object)를 사용하는 것과 마찬가지로 로직이 없는 순수 데이터 구조체입니다.&lt;/p&gt;

&lt;p&gt;DTO 보다 커맨드 시스템이 더 나은 점은 1) 커맨드 이름만으로 의도가 확실히 드러난다는 점, 2) 웹, 콘솔 등 다양한 애플리케이션(=~적용 방식, 입출력 장치)에서 재사용할 수 있다는 점, 3) 테스트가 편하다는 점 등을 들 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// https://github.com/leopro/trip-planner/blob/master/src/Leopro/TripPlanner/Application/Command/CreateTripCommand.php
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Leopro\TripPlanner\Application\Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateTripCommand&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Command&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ArrayCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
          &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;33-interactor&quot;&gt;3.3. Interactor&lt;/h3&gt;

&lt;p&gt;이 예제에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;UseCase&lt;/code&gt;가 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;I&amp;gt;&amp;gt;Boundary&lt;/code&gt;이고, 이를 구현한 &lt;code class=&quot;highlighter-rouge&quot;&gt;CreateTripUseCase&lt;/code&gt;가 &lt;code class=&quot;highlighter-rouge&quot;&gt;Interactor&lt;/code&gt;입니다. DTO를 사용하는 전통적인 구현이라면, &lt;code class=&quot;highlighter-rouge&quot;&gt;CreateTripService&lt;/code&gt;와 같은 이름으로 지었을 겁니다.&lt;/p&gt;

&lt;p&gt;코드를 살펴보면, 유효한 커맨드인지 검사를 수행하고, &lt;code class=&quot;highlighter-rouge&quot;&gt;createWithFirstRoute()&lt;/code&gt; 함수를 호출해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Trip&lt;/code&gt; 이라는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Entity&lt;/code&gt;를 만듭니다. 그리고, 생성자를 통해서 주입 받은 &lt;code class=&quot;highlighter-rouge&quot;&gt;TripRepository&lt;/code&gt; 인터페이스의 &lt;code class=&quot;highlighter-rouge&quot;&gt;add()&lt;/code&gt; 함수를 호출함으로써 생성된 엔티티를 영속화시킵니다. 뒤에서 다시 보겠지만, &lt;code class=&quot;highlighter-rouge&quot;&gt;TripRepository&lt;/code&gt;는 2절의 그림에서 본 경계 안 쪽에 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;I&amp;gt;&amp;gt;Entity Gateway&lt;/code&gt;입니다.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// https://github.com/leopro/trip-planner/blob/master/src/Leopro/TripPlanner/Application/UseCase/CreateTripUseCase.php
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Leopro\TripPlanner\Application\UseCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateTripUseCase&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AbstractUseCase&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UseCase&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$tripRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TripRepository&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$tripRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getManagedCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Command&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exceptionIfCommandNotManaged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;nv&quot;&gt;$trip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Trip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createWithFirstRoute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TripIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;uniqid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()),&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;tripRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$trip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$trip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;34-entity&quot;&gt;3.4. Entity&lt;/h3&gt;

&lt;p&gt;3.3. 절에서 호출한 &lt;code class=&quot;highlighter-rouge&quot;&gt;createWithFirstRoute&lt;/code&gt; 함수가 &lt;code class=&quot;highlighter-rouge&quot;&gt;Trip&lt;/code&gt; 모델의 상태를 변경합니다.&lt;/p&gt;

&lt;p&gt;여기서 주목할 점은 데이터베이스와의 결합도를 낮추기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;TripIdentity&lt;/code&gt; 타입의 식별자를 사용한다는 점입니다. 데이터베이스에 의존하는 구현에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;INSERT INTO ...&lt;/code&gt; 하기 전에는 엔티티의 식별자를 알 수 없고, 메모리 안에서 불완전한 상태로 살아있게 되는 문제가 있습니다.&lt;/p&gt;

&lt;p&gt;또 하나 지적하고 싶은 점은 PHP의 한계 중에 하나인 메서드 오버로딩(overloading)입니다. 오버로딩을 할 수 없기 때문에 생성자를 Private로 선언하고, &lt;code class=&quot;highlighter-rouge&quot;&gt;createWithFirstRoute()&lt;/code&gt;라는 정적 팩토리 메서드를 제공하고 있습니다. 오버로딩이 지원되었다면, &lt;code class=&quot;highlighter-rouge&quot;&gt;__construct(TripIdentity $identity)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;__construct(TripIdentity $identity, $name)&lt;/code&gt;처럼 생성자를 여러 개 만들었겠지요?&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// https://github.com/leopro/trip-planner/blob/master/src/Leopro/TripPlanner/Domain/Entity/Trip.php
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Leopro\TripPlanner\Domain\Entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Trip&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$identity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TripIdentity&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$identity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createWithFirstRoute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TripIdentity&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$identity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$trip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$identity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$trip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$trip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$trip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;35-entity-gateway&quot;&gt;3.5. Entity Gateway&lt;/h3&gt;

&lt;p&gt;3.4. 절에서 호출했던 그 인터페이스입니다. 특이한 점은 &lt;code class=&quot;highlighter-rouge&quot;&gt;save()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;persist()&lt;/code&gt; 대신 &lt;code class=&quot;highlighter-rouge&quot;&gt;add()&lt;/code&gt;라는 함수명을 쓰고 있습니다. 현재까지의 전체 구현이 PHP의 네이티브 배열을 랩핑한 &lt;code class=&quot;highlighter-rouge&quot;&gt;Collection&lt;/code&gt;을 데이터 저장소로 사용하고 있어서이며, 영속성을 위한 저장 장치에 앱이 의존하지 않는다는 것을 한번 더 강조하는 네이밍입니다.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// https://github.com/leopro/trip-planner/blob/master/src/Leopro/TripPlanner/Domain/Contract/TripRepository.php
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Leopro\TripPlanner\Domain\Contract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TripRepository&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TripIdentity&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$identity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Trip&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$trip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;36-response-model&quot;&gt;3.6. Response Model&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Interactor&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Response&lt;/code&gt; 모델에 데이터를 담아서 경계 바깥 쪽으로 내보냅니다.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// https://github.com/leopro/trip-planner/blob/master/src/Leopro/TripPlanner/Application/Response/Response.php
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Leopro\TripPlanner\Application\Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Response&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;37-all-together&quot;&gt;3.7. All Together&lt;/h3&gt;

&lt;p&gt;아래 UML을 엉클 밥의 그림에 겹쳐보면… 소름이 돋습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017-07-09-img-02.png&quot; alt=&quot;Trip Planner&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;38-why&quot;&gt;3.8. Why?&lt;/h3&gt;

&lt;p&gt;다음 코드와 같이 컨트롤러에서 몇 줄만 쓰면 될 것을 복잡한 보일러 플레이트를 양산하면서 이렇게 짜고 있을까요?&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App\Http\Controllers&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TripController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Trip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;강한 결합도(소프트웨어의 제 2가치 위반)로 발생하는 비용은 보일러 플레이트를 쓰는 비용보다 더 크기 때문입니다. 의존성이 없다는 것은 독립적으로 개발할 수 있다는 의미입니다. 독립적으로 개발할 수 있다는 것은 독립적으로 컴파일(패키징)할 수 있다는 의미입니다. 독립적으로 컴파일할 수 있다는 것은 독립적으로 배포할 수 있다는 의미입니다.&lt;/p&gt;

&lt;p&gt;업종마다 서비스마다 다를 수 있으니 오해마시기 바랍니다. 가령 여러 고객의 요구사항을 빠르게 찍어 내야 하는 웹 에이전시나, 한 달짜리 마케팅 캠페인용 서비스라면 바로 위의 코드와 같이 짠다고 해도 누가 뭐라 하겠습니까?&lt;/p&gt;

&lt;p&gt;Ruby On Rails 커뮤니티에서도 DHH가 직접 나서서 똑같은 주제로 논쟁을 하고 있습니다. &lt;a href=&quot;https://gist.github.com/dhh/4849a20d2ba89b34b201&quot;&gt;https://gist.github.com/dhh/4849a20d2ba89b34b201&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;4-앞으로-할-일&quot;&gt;4. 앞으로 할 일&lt;/h2&gt;

&lt;p&gt;이 글에서 소개한 “커맨드 버스”와 지난 포스트에서 소개한 “&lt;small&gt;(의사, Pseudo)&lt;/small&gt; 이벤트 소싱”은 라라벨에도 내장되어 있습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;Job&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;Notification&lt;/code&gt;이 바로 그것들인데요. 또 프레임워크에 의존하는 코드를 생산할까봐 조심스럽습니다. 컴포저로 설치한 3rd Party 컴포넌트도 전부 마찬가지 아니냐고 반문할 수 있습니다. 예! 맞습니다. 피하려면 라이브러리에서 제공하는 객체를 의존성 주입으로 사용하거나, IoC(서비스 컨테이너)를 이용해서 주입하거나, 앱 경계 안쪽에 인터페이스를 만들고 라이브러리를 &lt;a href=&quot;https://en.wikipedia.org/wiki/Adapter_pattern&quot;&gt;Adapter&lt;/a&gt; 또는 &lt;a href=&quot;https://en.wikipedia.org/wiki/Decorator_pattern&quot;&gt;Decorator&lt;/a&gt; 패턴으로 한번 랩핑해서 사용하는 방법이 있습니다.&lt;/p&gt;

&lt;p&gt;지난 포스트 이후, 설계에 관한 고민을 하며 여기저기 기웃댔지만, 아직 라라벨의 의존성을 완전히 걷어낸 오픈 소스, 예제 프로젝트, 또는 방법을 설명하는 블로그 포스트는 찾지 못했습니다. 우선 라라벨 프로젝트에서 엘로퀀트를 완전히 경계 밖으로 내보내고 도메인 엔티티를 POPO(Plain Old PHP Object)로 만드는 방법을 연구할 겁니다. 이게 된다면, 엉클 밥이 말씀하신 프레임워크에 의존하지 않는, 또는 본문의 Trip Planner 예제처럼 HTTP와 같은 입출력 장치에 완전히 격리되어 작동하는 앱을 얻을 수 있을 겁니다. POPO를 이용함으로 그냥 공짜로 얻는 이점은 서두에 언급한 누구나 읽을 수 있는 코드입니다. 라라벨 매직이 전부 빠졌기 때문이죠.&lt;/p&gt;

&lt;p&gt;지난 번 불변 엔티티도 깃허브 리포만 파 놓고 설계에 대한 고민들을 하다가 손을 못 대고 있었습니다. 확보된 코드는 도메인 주도 설계, 커맨드 주도 아키텍처, 이벤트소싱 &amp;amp; CQRS 등 새로운 아키텍처를 실험하기 위한 베이스로 사용할 예정입니다. 이번에도 조언 환영합니다.&lt;/p&gt;
</description>
        <pubDate>Sun, 09 Jul 2017 00:00:00 +0900</pubDate>
        <link>http://blog.appkr.kr/learn-n-think/clean-architecture-and-dependency/</link>
        <guid isPermaLink="true">http://blog.appkr.kr/learn-n-think/clean-architecture-and-dependency/</guid>
        
        <category>개발자</category>
        
        <category>아키텍처</category>
        
        
        <category>learn-n-think</category>
        
      </item>
    
      <item>
        <title>불변 밸류와 불변 엔티티</title>
        <description>&lt;p&gt;&lt;strong&gt;상수는 변하지 않는 값&lt;/strong&gt;, &lt;strong&gt;변수는 변하는 값&lt;/strong&gt;이라고 배웠습니다. 객체에서도 마치 상수처럼 &lt;strong&gt;한 번 생성된 이후에 상태를 변경할 수 없는 객체를 불변(Immutable) 객체&lt;/strong&gt;라고 합니다.&lt;/p&gt;

&lt;h2 id=&quot;1-불변성에-대한-개념-익히기&quot;&gt;1. 불변성에 대한 개념 익히기&lt;/h2&gt;

&lt;p&gt;아래 예제를 살펴 볼까요?&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;위 코드의 실행 결과는 &lt;code class=&quot;highlighter-rouge&quot;&gt;int(1)&lt;/code&gt;입니다. 변수 &lt;code class=&quot;highlighter-rouge&quot;&gt;$b&lt;/code&gt;에 변수 &lt;code class=&quot;highlighter-rouge&quot;&gt;$a&lt;/code&gt;의 값을 할당한 후, &lt;code class=&quot;highlighter-rouge&quot;&gt;$b&lt;/code&gt;에 새로운 값 &lt;code class=&quot;highlighter-rouge&quot;&gt;3&lt;/code&gt;을 할당했습니다. 당연히 &lt;code class=&quot;highlighter-rouge&quot;&gt;$b&lt;/code&gt;에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;3&lt;/code&gt;이 담겨 있고, &lt;code class=&quot;highlighter-rouge&quot;&gt;$a&lt;/code&gt;에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;이 담겨 있을 겁니다. 아주 쉽죠?&lt;/p&gt;

&lt;p&gt;그런데, 객체 컨텍스트에서도 이 규칙이 그대로 적용될까요? 클래스는 변수와 함수로 구성된 템플릿이며, 객체란 그 템플릿에 필요한 값을 채워서 완성한 실체입니다. 여튼 위의 예제와 똑같이 동작해야 하지않을까요?&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;stdClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Bar'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// class stdClass#696 (1) {
//   public $name =&amp;gt;
//   string(3) &quot;Bar&quot;
// }
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// class stdClass#696 (1) {
//   public $name =&amp;gt;
//   string(3) &quot;Bar&quot;
// }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;변수 &lt;code class=&quot;highlighter-rouge&quot;&gt;$b&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;$a&lt;/code&gt;에 담긴 객체를 그대로 할당한 후, &lt;code class=&quot;highlighter-rouge&quot;&gt;$b&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;$name&lt;/code&gt; 속성을 변경했습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;$b::name&lt;/code&gt; 속성 값만 &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;Bar&quot;&lt;/code&gt;로 바뀔 것이라 생각했지만, &lt;code class=&quot;highlighter-rouge&quot;&gt;$a::name&lt;/code&gt; 속성 값도 &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;Bar&quot;&lt;/code&gt;로 변경되어버렸습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;var_dump()&lt;/code&gt;로 출력된 결과물에 객체 번호를 보면 힌트를 얻을 수 있습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;$a&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;$b&lt;/code&gt; 모두 &lt;code class=&quot;highlighter-rouge&quot;&gt;#696&lt;/code&gt;으로 같습니다. 즉, 객체 &lt;code class=&quot;highlighter-rouge&quot;&gt;$b&lt;/code&gt;는 객체 &lt;code class=&quot;highlighter-rouge&quot;&gt;$a&lt;/code&gt;의 메모리 번지를 그냥 참조하고 있다고 볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;해결법은 의외로 간단합니다. 복제하는거죠. &lt;code class=&quot;highlighter-rouge&quot;&gt;clone&lt;/code&gt; 키워드와 객체 번호가 &lt;code class=&quot;highlighter-rouge&quot;&gt;#696&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;#697&lt;/code&gt;로 서로 다름을 확인해주세요.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;stdClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;clone&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Bar'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// class stdClass#697 (1) {
//   public $name =&amp;gt;
//   string(3) &quot;Bar&quot;
// }
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// class stdClass#696 (1) {
//   public $name =&amp;gt;
//   string(3) &quot;Foo&quot;
// }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!--more--&gt;
&lt;div class=&quot;spacer&quot;&gt;• • •&lt;/div&gt;

&lt;h2 id=&quot;2-불변-밸류&quot;&gt;2. 불변 밸류&lt;/h2&gt;

&lt;h3 id=&quot;21-carbon&quot;&gt;2.1. Carbon&lt;/h3&gt;

&lt;p&gt;라라벨 프로젝트에서 가장 쉽게 만날 수 있는 밸류 객체(Value Object, 값 객체)는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Carbon&lt;/code&gt; 입니다. 엘로퀀트 모델을 만들면 기본적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;created_at&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;updated_at&lt;/code&gt;이란 속성이 추가되고, 이 속성에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Carbon&lt;/code&gt; 객체가 할당됩니다.&lt;/p&gt;

&lt;p&gt;객체의 이점을 얻기 위해서 보통 원시 타입(&lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;array&lt;/code&gt;)을 밸류 객체로 바꿔서 사용하는데, 예를 들면, &lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt; 타입의 블로그 포스트 제목을 &lt;code class=&quot;highlighter-rouge&quot;&gt;Title&lt;/code&gt; 객체를 만들어 사용하는 것 같은 것이죠. 예제가 현실적이지는 않지만, 앞서 말한 &lt;code class=&quot;highlighter-rouge&quot;&gt;Carbon&lt;/code&gt;을 이용함으로써 다음과 같은 편리함이 더해집니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;php artisan tinker
&lt;span class=&quot;c&quot;&gt;# Psy Shell v0.8.3 (PHP 7.1.2 — cli) by Justin Hileman&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$article&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Article::first&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$article&lt;/span&gt;-&amp;gt;created_at &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$article&lt;/span&gt;-&amp;gt;created_at-&amp;gt;addDays&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$article&lt;/span&gt;-&amp;gt;save&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;그런데 &lt;code class=&quot;highlighter-rouge&quot;&gt;Carbon&lt;/code&gt;은 불변 밸류가 아닙니다.&lt;/strong&gt; 아래 예제는 무시무시합니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;php artisan tinker
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Carbon&lt;span class=&quot;se&quot;&gt;\C&lt;/span&gt;arbon::now&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;;
&lt;span class=&quot;c&quot;&gt;# =&amp;gt; Carbon\Carbon {#663&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#      +&quot;date&quot;: &quot;2017-06-04 03:00:22.272655&quot;,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#    }&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$now&lt;/span&gt;-&amp;gt;addMonths&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
&lt;span class=&quot;c&quot;&gt;# =&amp;gt; Carbon\Carbon {#663&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#      +&quot;date&quot;: &quot;2017-07-04 03:00:22.272655&quot;,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#    }&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$now&lt;/span&gt;;
&lt;span class=&quot;c&quot;&gt;# =&amp;gt; Carbon\Carbon {#663&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#      +&quot;date&quot;: &quot;2017-07-04 03:00:22.272655&quot;,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#    }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$now&lt;/code&gt;라는 변수를 여러 곳에서 참조한다고 가정해보죠. 어떤 로직에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;$now&lt;/code&gt; 변수에 &lt;code class=&quot;highlighter-rouge&quot;&gt;addMonths()&lt;/code&gt; API를 호출했다고 가정하죠. 그러면 그 뒤에 &lt;code class=&quot;highlighter-rouge&quot;&gt;$now&lt;/code&gt; 변수를 참조하는 로직은 전부 한 달 뒤의 날짜 값을 사용하게 되는 겁니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;Carbon&lt;/code&gt;의 특성을 모르는 개발자가 이와 같이 코드를 짰을 때, &lt;code class=&quot;highlighter-rouge&quot;&gt;Carbon&lt;/code&gt;의 특성에 대해 이해하고 있는 다른 개발자가 이 버그를 잡을 수 있을까요?&lt;/p&gt;

&lt;p&gt;아참 해결방법은 &lt;code class=&quot;highlighter-rouge&quot;&gt;clone&lt;/code&gt; 키워드를 이용하는 것입니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;php artisan tinker
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Carbon&lt;span class=&quot;se&quot;&gt;\C&lt;/span&gt;arbon::now&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$oneMonthFromNow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;clone &lt;span class=&quot;nv&quot;&gt;$now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;-&amp;gt;addMonths&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;22-money&quot;&gt;2.2. Money&lt;/h3&gt;

&lt;p&gt;불변 객체는 한 번 생성된 이후에 상태를 변경할 수 없는 객체입니다. 아래 &lt;code class=&quot;highlighter-rouge&quot;&gt;Money&lt;/code&gt; 클래스 예제를 살펴보면, &lt;code class=&quot;highlighter-rouge&quot;&gt;add()&lt;/code&gt; 메서드는 다른 &lt;code class=&quot;highlighter-rouge&quot;&gt;Money&lt;/code&gt; 객체를 인자로 받고, &lt;code class=&quot;highlighter-rouge&quot;&gt;$value&lt;/code&gt; 속성의 상태를 변경하는 것이 아니라, 완전 새로운 &lt;code class=&quot;highlighter-rouge&quot;&gt;Money&lt;/code&gt; 객체를 반환합니다.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// https://github.com/appkr/db-lock-poc/blob/master/core/Myshop/Common/Model/Money.php
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Money&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Money&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Money&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAmount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAmount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Money&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;get_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__CLASS__&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAmount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;아래 팅커 출력 결과에서 객체의 번호가 &lt;code class=&quot;highlighter-rouge&quot;&gt;#683&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;#692&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;#694&lt;/code&gt;로 모두 다름에 주목해야 합니다. 매번 다른 객체가 생성된다는 뜻이죠~&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;php artisan tinker
&lt;span class=&quot;c&quot;&gt;# Psy Shell v0.8.3 (PHP 7.1.2 — cli) by Justin Hileman&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$baseSalary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new Money&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;100&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
&lt;span class=&quot;c&quot;&gt;# =&amp;gt; Money {#683}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$overtimeAllowance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new Money&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;100&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
&lt;span class=&quot;c&quot;&gt;# =&amp;gt; Money {#692}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$baseSalary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$overtimeAllowance&lt;/span&gt;;
&lt;span class=&quot;c&quot;&gt;# =&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$baseSalary&lt;/span&gt;-&amp;gt;isEqualTo&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$overtimeAllowance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
&lt;span class=&quot;c&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$totalSalary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$baseSalary&lt;/span&gt;-&amp;gt;add&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$overtimeAllowance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
&lt;span class=&quot;c&quot;&gt;# =&amp;gt; Money {#694}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$totalSalary&lt;/span&gt;-&amp;gt;getAmount&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;;
&lt;span class=&quot;c&quot;&gt;# =&amp;gt; 200&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;밸류 객체는 객체의 속성 값이 모두 같다면 “같다”라고 할 수 있습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; 객체를 예로 들어 볼까요? 공교롭게도 어떤 &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt;가 저와 같은 &lt;code class=&quot;highlighter-rouge&quot;&gt;$name&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;$age&lt;/code&gt;를 가지고 있다고 가정해보죠? 그럼 두 &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt;는 같을까요? 당연히 다르죠? 그런데, 2017-06-04 라는 값을 가진 &lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt; 객체를 가정해보죠. 다른 &lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt; 객체가 똑같이 2017-06-04라는 값을 가지고 있다면 둘은 같은걸까요? 예. 예로 든 &lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt;는 밸류이고, &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt;는 엔티티입니다.&lt;/p&gt;

&lt;h2 id=&quot;3-불변-엔티티&quot;&gt;3. 불변 엔티티&lt;/h2&gt;

&lt;p&gt;도메인 모델은 앤티티(Entity)와 밸류(Value, 값 객체)로 구분됩니다. 모델, 엔티티, 밸류, … 어려운 용어라 생각되지만, 따지고보면 결국은 클래스입니다. 앞서 클래스는 변수와 함수의 집합이라 했는데, 좀 더 구체적으로 말하면 다음과 같이 표현할 수 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;클래스란 Private 변수들과 그 Private 변수들을 사용하는 Public 함수들의 집합이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;엔티티는 고유 식별자를 가지고 있습니다. 엔티티는 생성된 후 식별자를 제외한 상태가 변경될 수 있습니다. “상태”라 표현한 것이 결국 클래스의 Private 변수들의 값이며, 이 Private 변수에는 다른 엔티티, 밸류 객체, 원시 타입 값들이 담기게 됩니다. 엔티티를 사용하는 클라이언트 클래스에서 엔티티의 Public 함수(API)를 호출하여 엔티티의 상태를 변경하겠죠~&lt;/p&gt;

&lt;p&gt;밸류는 식별자가 없습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;Carbon&lt;/code&gt;처럼 상태가 변경될 수도 있지만, 앞서 살펴본 대로 불변 객체를 사용하는 것이 더 나은 설계라고 알려져 있습니다. 앞서 살펴본 &lt;code class=&quot;highlighter-rouge&quot;&gt;Money&lt;/code&gt; 밸류처럼 말이죠. 밸류 객체 역시, 해당 밸류를 상태로 사용하는 엔티티가 대상 밸류에 포함된 Public API를 호출함으로써 엔티티 자신의 상태를 변경할 겁니다.&lt;/p&gt;

&lt;p&gt;객체로 생성되어 메모리에 살아 있는 동안 상태를 변경하고, 데이터베이스에 저장함으로써 다시 꺼내서 재생할 때까지 냉동 수면을 하게 됩니다.&lt;/p&gt;

&lt;p&gt;그런데 불변 엔티티란 무엇일까요? 웹에서 정확한 정의를 찾지 못했습니다만, 앞서 살펴본 내용을 응용해보면, 최초 한번 생성후 상태가 변하지 않는 엔티티가 아닐까요? Private 변수에 담긴 값을 전혀 변경할 수 없고, 데이터베이스에서 삭제하기 전까지 돌부처 같이 처음 만든 상태를 그대로 유지하는 녀석이 아닐까요?&lt;/p&gt;

&lt;h3 id=&quot;31-필요성&quot;&gt;3.1. 필요성&lt;/h3&gt;

&lt;p&gt;지난 번 회사 프로젝트를 하면서 불변 엔티티의 필요성을 느꼈습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;생성 시점의 정보를 참조해서 계산한 값으로 채워진 모델일 때 (e.g. 청구서)&lt;/li&gt;
  &lt;li&gt;그리고 한 번 생성된 후, 상태가 변경된다면 변경 이력을 추적해야 할 때&lt;/li&gt;
  &lt;li&gt;시간이 지남에 따라 변경될 수 있는 값을 생성 시점의 값으로 고정시키고자 할 때 (e.g. 청구서 발행 시점의 피청구자 정보)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;32-리서치&quot;&gt;3.2. 리서치&lt;/h3&gt;

&lt;p&gt;조사 결과 세 가지 정도의 구현 방식으로 정리됐습니다.&lt;/p&gt;

&lt;h4 id=&quot;321-상태-테이블과-변경-내역-저장-테이블-분리&quot;&gt;3.2.1. 상태 테이블과 변경 내역 저장 테이블 분리&lt;/h4&gt;

&lt;p&gt;최종 상태를 저장하는 메인 테이블과 변경 이력을 기록하는 테이블을 별도로 구성하는 방식입니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Table: bills
+-------------------------------+
| 1 Bill &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;User#1 &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;2017-06 |
+-------------------------------+
| 2 Bill &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;User#2 &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;2017-06 |
+-------------------------------+

UPDATE bills SET base_charge &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 100 WHERE id &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1;

Tables:bill_history
+-------------------------------+
| History &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;bill_id#1 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;...&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;   |
+-------------------------------+
| History &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;bill_id#1 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;...&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;   |
+-------------------------------+

INSERT INTO bill_history &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;bill_id, changed, changed_by, changed_at, ...&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
VALUES &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1, &lt;span class=&quot;s2&quot;&gt;&quot;{original:{base_charge:90}, changed:{base_charge:100}}&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;Foo&quot;&lt;/span&gt;, NOW&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;, ...&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;322-하나의-엔티티에-대해-여러-레코드를-기록&quot;&gt;3.2.2. 하나의 엔티티에 대해 여러 레코드를 기록&lt;/h4&gt;

&lt;p&gt;3.2.1의 두 개 테이블을 하나로 합쳐서 상태를 저장하는 방식입니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;UPDATE&lt;/code&gt; 쿼리는 없고, 오직 &lt;code class=&quot;highlighter-rouge&quot;&gt;INSERT&lt;/code&gt;만 허용합니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Table: bills
+-------------------------------+
| Last state of Bill#1          |
+-------------------------------+
| Past state of Bill#1          |
+-------------------------------+
| Last state of Bill#2          |
+-------------------------------+
SELECT &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; FROM bills WHERE entity_id &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1 ORDER BY version DESC LIMIT 1;

INSERT INTO bills &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;entity_id, version, subscriber_id, term, base_charge, 
    valud_added_charge, discount_amout, fulfilled, last_modified_by, ...&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
VALUES &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1, 2, 1, &lt;span class=&quot;s2&quot;&gt;&quot;2017-06&quot;&lt;/span&gt;, 100, 100, 50, &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;Foo&quot;&lt;/span&gt;, ...&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;323-이벤트-소싱&quot;&gt;3.2.3. 이벤트 소싱&lt;/h4&gt;

&lt;p&gt;이벤트를 데이터 소스로 사용하는 디자인 패턴입니다. 이벤트 데이터를 스택에 쌓아 놓고, 이벤트 리플레이를 통해 현재 상태를 계산해 냅니다. 핵심 함수와 전체 개념은 아래와 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;decide&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ListEvent&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;replay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initialState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ListEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.leifbattermann.de/wp-content/uploads/2017/04/event-sourcing.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;웹에서 만난 전문가들도 이벤트 소싱의 이점을 충분히 누릴 수 있는 도메인에만 도입할 것을 권장합니다. 포스트 끝에 참고 자료들을 기록해 두었습니다.&lt;/p&gt;

&lt;h3 id=&quot;33-예제-프로젝트&quot;&gt;3.3. 예제 프로젝트&lt;/h3&gt;

&lt;p&gt;매월 주기적으로 핸드폰 청구서를 발행하는 예제를 통해서 불변 엔티티를 구현해 보고자 합니다. 데이터를 자주 변경하는 도메인이 아니므로 3.2.2 방식으로 구현하려고 합니다.&lt;/p&gt;

&lt;p&gt;틈틈이 작업 중인 저장소입니다. &lt;a href=&quot;https://github.com/appkr/immutable-entity-poc&quot;&gt;https://github.com/appkr/immutable-entity-poc&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;읽어보면-좋을만한-자료들&quot;&gt;읽어보면 좋을만한 자료들&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ocramius.github.io/doctrine-best-practices&quot;&gt;doctrine-best-practices&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ziobrando.blogspot.kr/2010/06/about-entities-aggregates-and-data.html&quot;&gt;About Entities, Aggregates and Data Duplication.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ntaso.com/why-i-dont-use-value-objects-in-laravel-anymore/&quot;&gt;Why I Don’t Use Value Objects in Laravel Anymore&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ntaso.com/value-objects-laravel-eloquent/&quot;&gt;Value Objects in Laravel 5 with Eloquent Done Right&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.slideshare.net/madvirus/event-source&quot;&gt;이벤트 소싱 학습 내용 공유 by 최범균&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.leifbattermann.de/2017/04/21/12-things-you-should-know-about-event-sourcing/&quot;&gt;12 Things You Should Know About Event Sourcing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://msdn.microsoft.com/magazine/mt422577&quot;&gt;Cutting Edge - Event Sourcing for the Common Application&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.aliencube.org/ko/2015/11/12/building-applications-on-cloud-with-event-sourcing-pattern-and-cqrs-pattern/&quot;&gt;이벤트 소싱 패턴과 CQRS 패턴을 적용해서 클라우드상에서 유연하게 앱 개발하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nWidart/Laravel-broadway&quot;&gt;Laravel adapter for Broadway.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 04 Jun 2017 00:00:00 +0900</pubDate>
        <link>http://blog.appkr.kr/learn-n-think/immutable-object-and-immutalbe-entity/</link>
        <guid isPermaLink="true">http://blog.appkr.kr/learn-n-think/immutable-object-and-immutalbe-entity/</guid>
        
        <category>개발자</category>
        
        
        <category>learn-n-think</category>
        
      </item>
    
      <item>
        <title>DDD Memo</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://image.yes24.com/goods/27750871/L&quot; alt=&quot;http://www.yes24.com/24/Goods/27750871&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;1-도메인-모델-시작&quot;&gt;1. 도메인 모델 시작&lt;/h1&gt;

&lt;p&gt;p7. 아키텍쳐 구성&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;사용자 인터페이스 또는 표현 (UI, Presentation)&lt;/li&gt;
  &lt;li&gt;응용 (Application)&lt;/li&gt;
  &lt;li&gt;도메인 (Domain)&lt;/li&gt;
  &lt;li&gt;인프라스트럭처 (Infrastructure)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;p11. 도메인을 모델링할 때 기본이 되는 작업은 모델을 구성하는 &lt;strong&gt;핵심 구성요소&lt;/strong&gt;, &lt;strong&gt;규칙&lt;/strong&gt;, &lt;strong&gt;기능&lt;/strong&gt;을 찾는 것이다.&lt;/p&gt;

&lt;p&gt;p17. 엔티티와 밸류&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;엔티티의 가장 큰 특징은 &lt;strong&gt;식별자&lt;/strong&gt;를 갖는다는 점.&lt;/li&gt;
  &lt;li&gt;밸류 타입은 &lt;strong&gt;개념적으로 완전한 하나를 표현&lt;/strong&gt;할 때 사용한다 (예: “받는 사람”이란 밸류는 이름과 전화번호 속성으로 구성됨).&lt;/li&gt;
  &lt;li&gt;밸류 객체의 데이터를 변경할 때는 기존 데이터를 변경하기보다는 변경한 데이터를 갖는 새로운 밸류 객체를 생성한다(Immutable).&lt;/li&gt;
  &lt;li&gt;엔티티 타입의 두 객체가 같은지 비교할 때 주로 식별자를 사용한다면, 두 밸류 객체가 같은지 비교할 때는 모든 속성이 같은지 비교해야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;p32. 도메인 객체가 불완전한 상태로 사용되는 것을 막으려면 생성 시점에 필요한 것을 전달해 주어야 한다. 즉, &lt;strong&gt;생성자&lt;/strong&gt;를 통해 필요한 데이터를 모두 받아야 한다.&lt;/p&gt;

&lt;!--more--&gt;
&lt;div class=&quot;spacer&quot;&gt;• • •&lt;/div&gt;

&lt;h1 id=&quot;2-아키텍처-개요&quot;&gt;2. 아키텍처 개요&lt;/h1&gt;

&lt;p&gt;p39. 주문 도메인의 경우 ‘배송지 변경’, ‘결제 완료’, ‘주문 총액 계산’과 같은 핵심 로직을 &lt;strong&gt;도메인 모델&lt;/strong&gt;에서 구현한다.&lt;/p&gt;

&lt;p&gt;p51. DIP(Dependency Inversion Principle)를 적용할 때 하위 기능을 추상화한 인터페이스는 고수준 모듈 관점에서 도출한다 (예: 인프라에 대한 인터페이스는 도메인 영역에 존재).&lt;/p&gt;

&lt;p&gt;p54. 도메인의 주요 구성 요소&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;엔티티(Entity)&lt;/strong&gt;: 고유의 식별자를 갖는 객체로 자신의 라이프사이클을 갖는다. 주문, 회원, 상품과 같이 도메인의 고유한 개념을 표현한다. 도메인 모델의 데이터를 포함하며 해당 데이터와 관련된 기능을 함께 제공한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;밸류(Value)&lt;/strong&gt;: 고유의 식별자를 갖지 않는 객체로 주로 개념적으로 하나인 도메인 객체의 속성을 표현할 때 사용된다. 배송지 주소를 표현하기 위한 주소나 구매 금액을 위한 금액과 같은 타입이 밸류 타입이다. 엔티티의 속성으로 사용될 뿐만아니라 다른 밸류 타입의 속성으로도 사용될 수 있다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;애그리거트(Aggregate)&lt;/strong&gt;: 관련된 엔티티와 밸류 객체를 개념적으로 하나로 묶은 것이다. 예를 들어, 주문과 관련된 Order 엔티티, OrderLine 밸류, Orderer 밸류 객체를 주문 애그리커트로 묶을 수 있다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;리포지터리(Repository)&lt;/strong&gt;: 도메인 모델의 영속성을 처리한다. 예를 들어,DBMS 테이블에서 엔티티 객체를 로딩하거나 저장하는 기능을 제공한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;도메인 서비스(Domain Service)&lt;/strong&gt;: 특정 엔티티에 속하지 않은 도메인 로직을 제공한다. ‘할인 금액 계산’은 상품, 쿠폰, 회원 등급, 구매 금액 등 다양한 조건을 이용해서 구현하게 되는데, 이렇게 도메인 로직이 여러 엔티티와 밸류를 필요로 할 경우 도메인 서비스에서 로직을 구현한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;p56. 도메인 모델의 엔티티는 단순히 데이터를 담고 있는 데이터 구조라기보다는 &lt;strong&gt;데이터&lt;/strong&gt;와 함께 &lt;strong&gt;기능&lt;/strong&gt;을 제공하는 객체이다. 도메인 관점에서 기능을 구현하고 기능 구현을 캡슐화해서 데이터가 임의로 변경되는 것을 막는다.&lt;/p&gt;

&lt;p&gt;p59. 애그리거트는 군집에 속한 객체들을 관리하는 루트 엔티티를 갖는다.&lt;/p&gt;

&lt;p&gt;p61. 주문 애그리거트는 Order를 통하지 않고 ShippingInfo를 변경할 수 있는 방법을 제공하지 않는다.&lt;/p&gt;

&lt;h1 id=&quot;3-애그리거트&quot;&gt;3. 애그리거트&lt;/h1&gt;

&lt;p&gt;p74. 애그리거트는 독립된 객체 군이며, 각 애그리거트는 자기 자신을 관리할 뿐 다른 애그리거트를 관리하지 않는다. ‘A가 B를 갖는다’로 해석할 수 있는 요구사항이 있다고 하더라도 이것이 반드시 A와 B가 한 애그리거트에 속한다는 것을 의미하는 것은 아니다(예: 상품과 리뷰).&lt;/p&gt;

&lt;p&gt;p76. 애그리거트에 속한 모든 객체가 일관된 상태를 유지하려면 애그리거트 전체를 관리할 주체가 필요한데 이 책임을 지는 것이 바로 애그리거트의 루트 엔티티다.&lt;/p&gt;

&lt;p&gt;p82. 트랜잭션 범위는 작을 수록 좋다.&lt;/p&gt;

&lt;p&gt;p83. 만약 부득이하게 한 트랜잭션으로 두 개 이상의 애그리거트를 수정해야 한다면, 애그리거트에서 다른 애그리거트를 직접 수정하지 말고, &lt;strong&gt;응용 서비스&lt;/strong&gt;에서 두 애그리거트를 수정하도록 구현해야 한다. 도메인 이벤트를 사용하면 한 트랜잭션에서 한 개의 애그리거트를 수정하면서도 동기나 비동기로 다른 애그리거트의 상태를 변경하는 코드를 작성할 수 있다.&lt;/p&gt;

&lt;p&gt;p85. 리포지터리는 애그리거트 단위로 존재한다. Order 애그리거트와 관련된 테이블이 세 개라면 리포지터리를 통해서 Order 애그리거트를 저장할 때 애그리거트 루트와 매핑되는 테이블뿐만 아니라 애그리거트에 속한 모든 구성요소를 위한 테이블에 데이터를 저장해야 한다.&lt;/p&gt;

&lt;p&gt;p101. 애그리거트가 갖고 있는 데이터를 이용해서 다른 애그리거트를 생성해야 한다면 애그리거트에 팩토리 메서드를 구현하는 것을 고려해보자. Product의 경우 제품을 생성한 Store의 식별자를 필요로한다. 즉, Store의 데이터를 이용해서 Product를 생성한다. 게다가 Product를 생성할 수 있는 조건을 판단할 때 Store 상태를 이용한다. 따라서 Store에 Product를 생성하는 팩토리 메서드를 추가하면 Product를 생성할 때 필요한 데이터의 일부를 직접 제공하면서 동시에 중요한 도메인 로직을 함께 구현할 수 있게 된다.&lt;/p&gt;

&lt;h1 id=&quot;4-리포지터리와-모델-구현&quot;&gt;4. 리포지터리와 모델 구현&lt;/h1&gt;

&lt;p&gt;p114. 엔티티가 객체로서 제 역할을 하려면 외부에 set 메서드 대신 의도가 잘 드러나는 기능을 제공해야 한다. 상태 변경을 위한 &lt;code class=&quot;highlighter-rouge&quot;&gt;setState()&lt;/code&gt; 메서드 보다 주문 취소를 위한 &lt;code class=&quot;highlighter-rouge&quot;&gt;cancel()&lt;/code&gt; 메서드가 도메인을 더 잘 표현하고, &lt;code class=&quot;highlighter-rouge&quot;&gt;setShippingInfo()&lt;/code&gt; 메서드보다 배송지를 변경한다는 의미를 갖는 &lt;code class=&quot;highlighter-rouge&quot;&gt;changeShippingInfo()&lt;/code&gt;가 도메인을 더 잘 표현한다.&lt;/p&gt;

&lt;p&gt;p134. 애그리거트 루트를 로딩하면 루트에 속한 모든 객체가 완전한 상태여야 한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// product는 완전한 하나여야 한다.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;p137. 애그리거트가 완전해야 하는 이유는 두 가지 정도로 생각해 볼 수 있다. 첫 번째 이유는 상태를 변경하는 기능을 실행할 때 애그리거트 상태가 완전해야 하고, 두 번째 이유는 표현 영역에서 애그리거트의 상태 정보를 보여줄 때 필요하기 때문이다.&lt;/p&gt;

&lt;p&gt;p138. 애그리거트 내의 모든 연관을 즉시 로딩으로 설정할 필요는 없다. 지연 로딩은 동작 방식이 항상 동일하기 때문에 즉시 로딩처럼 경우의 수를 따질 필요가 없는 장점이 있다. 물론, 지연 로딩은 즉시 로딩보다 쿼리 실행 횟수가 많아질 가능성이 더 높다. 따라서, 무조건 즉시 로딩이나 지연로딩으로만 설정하기보다는 애그리거트에 맞게 즉시 로딩과 지연로딩을 선택해야 한다.&lt;/p&gt;

&lt;p&gt;p142. 자동 증가 컬럼은 DB의 insert 쿼리를 실행해야 식별자가 생성되므로 도메인 객체를 리포지터리에 저장할 때 식별자가 생성된다. 이 이야기는 도메인 객체를 생성하는 시점에는 식별자를 알 수 없고 도메인 객체를 저장한 뒤에 식별자를 구할 수 있음을 의미한다.&lt;/p&gt;

&lt;h1 id=&quot;5-리포지터리의-조회-기능&quot;&gt;5. 리포지터리의 조회 기능&lt;/h1&gt;

&lt;p&gt;p144. 스펙(Specification)은 애그리거트가 특정 조건을 충족하는지 여부를 검사한다.&lt;/p&gt;

&lt;h1 id=&quot;6-응용-서비스와-표현-영역&quot;&gt;6. 응용 서비스와 표현 영역&lt;/h1&gt;

&lt;p&gt;p170. 응용 서비스의 메서드가 요구하는 파라미터와 표현 영역이 사용자로부터 전달받은 데이터는 형식이 일치하지 않기 때문에 표현 영역은 응용 서비스가 요구하는 형식으로 사용자 요청을 변환한다.&lt;/p&gt;

&lt;p&gt;p171. 사용자와의 상호작용은 표현 영역이 처리하기 때문에 응용 서비스는 표현 영역에 의존하지 않는다. 응용 용역은 사용자가 웹 브라우저를 사용하는지, REST API를 호출하는지, TCP 소켓을 사용하는지 여부를 알 필요가 없다. 단지, 응용 영역은 기능 실행에 필요한 입력값을 전달받고 실행 결과만 리턴하면 될 뿐이다.&lt;/p&gt;

&lt;p&gt;p171. 응용 서비스는 주로 도메인 객체 간의 흐름을 제어하기 때문에 다음과 같이 단순한 형태를 갖는다. &lt;strong&gt;응용 서비스가 이것보다 복잡하다면 응용 서비스에 도메인 로직의 일부를 구현하고 있을 가능성이 높다&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doSomeFunc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SomeReq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 1. 리포지터리에서 애그리거트를 구한다.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SomeAgg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aaa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someAggRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;checkNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;agg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// 2. 애그리거트의 도메인 기능을 실행한다.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;agg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doFunc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// 3. 결과를 리턴한다.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createSuccessResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;agg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doSomeCreation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateSomeReq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 1. 데이터 중복 등 데이터가 유효한지 검사한다.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;checkValid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// 2. 애그리거트를 생성한다.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SomeAgg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newAgg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createSome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// 3. 리포지터리에 애그리거트를 저장한다.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;someAggRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newAgg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// 4. 결과를 리턴한다.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createSuccessResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newAgg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;p172. 도메인 객체 간의 실행 흐름을 제어하는 것과 더불어 응용 서비스의 주된 역할 중 하나는 트랜잭션 처리이다. 응용 서비스는 도메인의 상태 변경을 트랜잭션으로 처리해야 한다.&lt;/p&gt;

&lt;p&gt;p174. 도메인 로직을 도메인 영역과 응용 서비스에 분산해서 구현하면 코드 품질에 문제가 발생한다. 첫 번째 문제는 코드의 &lt;strong&gt;응집성&lt;/strong&gt;이 떨어진다는 것이다. 도메인 데이터와 그 데이터를 조작하는 도메인 로직이 한 영역에 위치하지 않고 서로 다른 영역에 위치한다는 것은 도메인 로직을 파악하기 위해 여러 영역을 분석해야 한다는 것을 뜻한다. 두 번째 문제는 여러 응용 서비스에서 동일한 도메인 로직을 구현할 가능성이 높아진다는 것이다. 예를 들어, 비정상적인 계정 정지를 막기 위해 암호를 확인한다고 해보자. 이 경우 계정 정지 기능을 구현하는 응용 서비스는 다음과 같이 암호를 확인하는 코드를 구현해야 한다.&lt;/p&gt;

&lt;p&gt;p181. 인터페이스가 명확하게 필요하기 전까지는 응용 서비스에 대한 인터페이스를 작성하는 것이 좋은 설계라고 볼 수 없다.&lt;/p&gt;

&lt;p&gt;p189. 이벤트를 사용하면 코드가 다소 복잡해지는 대신 도메인 간의 의존성이나 외부 시스템에 대한 의존을 낮춰주는 장점을 얻을 수 있다. 또한 시스템을 확장하는 데에 이벤트가 핵심 역할을 수행하게 된다.&lt;/p&gt;

&lt;p&gt;p197. 응용 서비스를 실행하는 주체가 표현 영역이면 응용 서비스는 논리적 오류 위주로 값을 검증해도 문제가 없지만, 응용 서비스를 실행하는 주체가 다양하면 응용 서비스에서 반드시 파라미터로 전달받은 값이 올바른지 검사해야 한다.&lt;/p&gt;

&lt;p&gt;p202. 응용 서비스가 사용자 요청 기능을 실행하는데 별다른 기여를 하지 못한다면 굳이 서비스를 만들지 않아도 된다고 생각한다(예: 컨트롤러-&amp;gt;데이터 조회)&lt;/p&gt;

&lt;h1 id=&quot;7-도메인-서비스&quot;&gt;7. 도메인 서비스&lt;/h1&gt;

&lt;p&gt;p209. 특정 기능이 응용 서비스인지 도메인 서비스인지 감을 잡기 어려울 때는 해당 로직이 애그리거트의 상태를 변경하거나 애그리거트의 상태 값을 계산하는 지 검사해 보면 된다.&lt;/p&gt;

&lt;h1 id=&quot;8-애그리거트-트랜잭션-관리&quot;&gt;8. 애그리거트 트랜잭션 관리&lt;/h1&gt;

&lt;p&gt;p217. 선점 잠금(Pessimistic Lock) 기능을 사용할 때 잠금 순서에 따른 교착 상태(Deadlock)가 발생하지 않도록 주의해야 한다. 이런 문제가 발생하지 않도록 하려면 잠금을 구할 때 최대 대기 시간을 지정해야 한다.&lt;/p&gt;

&lt;p&gt;p219. 비선점 잠금(Optimistic Lock) 방식은 잠금을 해서 동시에 접근하는 것을 막는 대신 변경한 데이터를 실제 DBMS에 반영하는 시점에 변경 가능 여부를 확인하는 방식이다.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aggtable&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;colx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coly&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aggid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;현재버전&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;p221. 비선점 잠금을 위한 쿼리를 실행할 때 쿼리 실행 결과로 수정된 행의 개수가 0이면 이미 누군가 앞서 데이터를 수정한 것이다.&lt;/p&gt;

&lt;p&gt;p227. 루트 엔티티의 값이 바뀌지 않았더라도 애그리거트의 구성요소 중 일부 값이 바뀌면 논리적으로 그 애그리거트는 바뀐 것이다(강제 버전 증가).&lt;/p&gt;

&lt;h1 id=&quot;9-도메인-모델과-bounded-context&quot;&gt;9. 도메인 모델과 BOUNDED CONTEXT&lt;/h1&gt;

&lt;p&gt;p249. 이때 카탈로그 컨텍스트와 추천 컨텍스트의 도메인 모델(&lt;code class=&quot;highlighter-rouge&quot;&gt;Product&lt;/code&gt;)은 서로 다르다. 카탈로그는 제품을 중심으로 도메인 모델을 구현하지만, 추천은 추천 연산을 위한 모델을 구한다.&lt;/p&gt;

&lt;p&gt;p255. 이런 마이크로서비스의 특징은 BOUNDED CONTEXT와 잘 어울린다. 각 BOUNDED CONTEXT는 모델의 경계를 형성하는데, BOUNDED CONTEXT를 마이크로서비스로 구현하면 자연스럽게 컨텍스트별로 모델이 분리된다. 코드로 치면 마이크로서비스마다 프로젝트를 생성하므로 BOUNDED CONTEXT마다 프로젝트를 만들게 된다 이는 코드 수준에서 모델을 분리해서 두 BOUNDED CONTEXT의 모델이 섞이지 않도록 해 준다. 별도 프로세스로 개발한 BOUNDED CONTEXT는 독립적으로 배포하고 모니터링하고 확장하게 되는데 이 역시 마이크로서비스의 특징이다.&lt;/p&gt;

&lt;p&gt;p258. 두 BOUNDED CONTEXT가 같은 모델을 공유하는 경우도 있다. 예를 들어 운영자를 위한 주문 관리 도구를 개발하는 팀과 고객을 위한 주문 서비스를 개발하는 팀이 다르다고 가정하자. 이 경우, 두 팀은 주문을 표현하는 모델을 공유함으로써 주문과 관련된 중복 개발을 막을 수 있다. 이렇게 두 팀이 공유하는 모델을 공유 커널(SHARED KERNEL)이라고 부른다.&lt;/p&gt;

&lt;p&gt;p259. 컨텍스트 맵&lt;/p&gt;

&lt;h1 id=&quot;10-이벤트&quot;&gt;10. 이벤트&lt;/h1&gt;

&lt;p&gt;p264. Order는 주문을 표현하는 도메인 객체인데 결제 도메인의 환불 관련 로직이 뒤섞이게 된다. 이는 환불 기능에 바뀌면 Order도 영향을 받게 된다는 것을 의미한다.&lt;/p&gt;

&lt;p&gt;p266. 모메인 모델에서 &lt;strong&gt;이벤트 주체&lt;/strong&gt;는 엔티티, 밸류, 도메인 서비스와 같은 도메인 객체다. &lt;strong&gt;이벤트 핸들러&lt;/strong&gt;는 이벤트 생성 주체가 발생한 이벤트에 반응한다. 이벤트 생성 주체와 이벤트 핸들러를 연결해 주는 것이 &lt;strong&gt;이벤트 디스패처&lt;/strong&gt;이다.&lt;/p&gt;

&lt;p&gt;p266. 이벤트의 구성&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;이벤트 종류: 클래스 이름으로 이벤트 종류를 표현&lt;/li&gt;
  &lt;li&gt;이벤트 발생 시각&lt;/li&gt;
  &lt;li&gt;추가 데이터: 주문번호, 신규 배송지 정보 등 이벤트와 &lt;strong&gt;관련된&lt;/strong&gt; 정보&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;p269. 이벤트는 크게 두가지 용도로 쓰인다. 첫 번째 용도는 트리거이다. 이벤트의 두 번째 용도는 서로 다른 시스템 간의 데이터 동기화이다.&lt;/p&gt;

&lt;p&gt;p284. 생각해 볼만한 것은 외부의 환불 서비스 실행에 실패했다고 해서 반드시 트랜잭션을 롤백해야 하는 지에 대한 문제이다. 일단 구매 취소 자체는 처리하고 환불만 재처리하거나 수동으로 처리할 수도 있다.&lt;/p&gt;

&lt;p&gt;p296. 이벤트는 과거에 벌어진 사건이므로 데이터가 변경되지 않는다. 이런 이유로 &lt;code class=&quot;highlighter-rouge&quot;&gt;EventStore&lt;/code&gt; 인터페이스는 새로운 이벤트를 추가하는 기능과 조회하는 기능만 제공하고 기존 이벤트 데이터를 수정하는 기능은 제공하지 않는다.&lt;/p&gt;

&lt;p&gt;p307. 이벤트 적용시 추가 고려사항&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;이벤트 소스의 추가&lt;/li&gt;
  &lt;li&gt;포워더에서 전송 실패를 얼마나 허용할 것이냐&lt;/li&gt;
  &lt;li&gt;이벤트 손실&lt;/li&gt;
  &lt;li&gt;이벤트 순서&lt;/li&gt;
  &lt;li&gt;이벤트 재처리&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;11-cqrs-command-query-responsibility-segregation&quot;&gt;11. CQRS (Command Query Responsibility Segregation)&lt;/h1&gt;

&lt;p&gt;p312. 시스템이 제공하는 기능은 크게 두 가지로 나누어 생각해 볼 수 있다. 하나는 상태를 변경하는 기능이다. 또 다른 하나는 사용자 입장에서 상태 정보를 조회하는 기능이다.&lt;/p&gt;

&lt;p&gt;p314. 단순히 데이터를 읽어와 조회하는 기능은 응용 로직이 복잡하지 않기 때문에 컨트롤러에서 바로 DAO를 실행해도 무방하다&lt;/p&gt;

&lt;p&gt;p317. 메모리에 캐시하는 데이터는 DB에 보관된 데이터를 그대로 저장하기보다는 화면에 맞는 모양으로 변환한 데이터를 캐시할 때 성능에 더 유리하다.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;├── application
│   └── service
├── common
│   ├── events
│   ├── exceptions
│   └── model
├── domain
│   ├── model
│   ├── repository
│   └── service
├── infra
│   ├── dao
│   └── external
└── ui
    └── controller
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 02 May 2017 00:00:00 +0900</pubDate>
        <link>http://blog.appkr.kr/learn-n-think/ddd-memo/</link>
        <guid isPermaLink="true">http://blog.appkr.kr/learn-n-think/ddd-memo/</guid>
        
        <category>개발자</category>
        
        <category>DDD</category>
        
        
        <category>learn-n-think</category>
        
      </item>
    
      <item>
        <title>Intro to RPC - Apache Thrift</title>
        <description>&lt;p&gt;이 슬라이드는 Modern PHP User Group 2017년 3월 정기 모임 발표 자료입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017-03-07-img-01.png&quot; alt=&quot;Intro to RPC - Apache Thrift&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;panel panel-default&quot; style=&quot;width:100%; max-width: 600px; margin: 1em auto;&quot;&gt;
  &lt;div class=&quot;panel-body text-center&quot;&gt;
    &lt;a href=&quot;/files/RPC-intro-to-apache-thrift.pdf&quot;&gt;
      &lt;i class=&quot;material-icons&quot;&gt;open_in_browser&lt;/i&gt;
      브라우저에서 슬라이드 열기
    &lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 07 Mar 2017 00:00:00 +0900</pubDate>
        <link>http://blog.appkr.kr/work-n-play/intro-to-apache-thrift-rpc/</link>
        <guid isPermaLink="true">http://blog.appkr.kr/work-n-play/intro-to-apache-thrift-rpc/</guid>
        
        <category>개발자</category>
        
        <category>RPC</category>
        
        <category>Apache Thrift</category>
        
        <category>PHP</category>
        
        
        <category>work-n-play</category>
        
      </item>
    
      <item>
        <title>AWS ECS/ECR을 이용한 서비스 배포</title>
        <description>&lt;p&gt;&lt;strong&gt;AWS ECS(EC2 Container Service)&lt;/strong&gt;는 갓마존이 제공하는 도커 기반 서비스 인프라입니다. EC2 인스턴스 위에 도커 엔진을 올려 놓은 것이라 생각하면 쉽습니다. &lt;strong&gt;AWS ECR(Container Registry)&lt;/strong&gt;은 빌드한 도커 이미지를 올리고 내릴 수 있는 사설 도커 허브라 생각할 수 있습니다.&lt;/p&gt;

&lt;p&gt;아래는 ECS 랜딩 페이지에 걸린 공식 유튜브 동영상입니다(그림을 클릭하여 재생).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=zBqjh61QcB4&quot;&gt;&lt;img src=&quot;http://img.youtube.com/vi/zBqjh61QcB4/0.jpg&quot; alt=&quot;Introduction to Amazon EC2 Container Service (ECS) - Docker Management on AWS&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS에서 어떤 협찬도 받지 않았지만, 필자가 느낀 ECS의 장점은 다음과 같습니다&lt;small&gt;(협찬 좀…)&lt;/small&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;이미 익숙한 AWS Console 및 서비스를 그대로 이용할 수 있다.&lt;/li&gt;
  &lt;li&gt;Service Discovery나 Container Orchestration등을 위해 &lt;a href=&quot;https://kubernetes.io/&quot;&gt;쿠버네티스(Kubernetes)&lt;/a&gt;와 같이 어려운 도구를 다룰 필요가 없다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;그런데 &lt;strong&gt;아직 서울 지역는 오픈되지 않았습니다.&lt;/strong&gt; 빨리 좀 오픈해 주세요~ 갓마존.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이 포스트에서는 ECS에 라라벨 서비스를 배포하는 방법을 다룹니다. 사실 다른 플랫폼이나 프레임워크라고 해도 &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; 레시피만 달라질 뿐 ECS를 사용하는 방법 자체에는 큰 차이가 없습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;!--more--&gt;
&lt;div class=&quot;spacer&quot;&gt;• • •&lt;/div&gt;

&lt;h2 id=&quot;1-예제-프로젝트-설치&quot;&gt;1. 예제 프로젝트 설치&lt;/h2&gt;

&lt;p&gt;ECS에 배포할 서비스가 있어야겠죠? 아래 주소를 방문하여 가이드에 따라 프로젝트를 설치하고, 도커 이미지를 빌드합니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/appkr/deploy-laravel-with-ecs-and-ecr&quot;&gt;https://github.com/appkr/deploy-laravel-with-ecs-and-ecr&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이 예제에서는 로컬의 &lt;code class=&quot;highlighter-rouge&quot;&gt;.env&lt;/code&gt; 파일을 도커 이미지에 포함하여 애플리케이션의 실행 환경 변수를 설정하고 있습니다. 실제 배포에서는 AWS Console/로컬 셸에서 환경 변수를 등록하거나, &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;에서 S3 등에 저장된 &lt;code class=&quot;highlighter-rouge&quot;&gt;.env&lt;/code&gt;를 도커 이미지로 다운로드 받아 사용하도록 하는 것이 안전할 것입니다.&lt;/p&gt;

&lt;h2 id=&quot;2-hello-ecs&quot;&gt;2. Hello ECS&lt;/h2&gt;

&lt;p&gt;AWS Console에 로그인합니다. 가장 먼저 해야할 일은 리전을 Tokyo나 Singapore 등 ECS가 오픈된 지역으로 변경하는 일입니다. 필자는 Tokyo로 선택했습니다.&lt;/p&gt;

&lt;p&gt;Services 목록에서 &lt;kbd&gt;EC2 Container Service&lt;/kbd&gt;로 진입하고 &lt;kbd&gt;Get Started&lt;/kbd&gt; 버튼을 누릅니다.&lt;/p&gt;

&lt;p&gt;다음 화면이 나오면 체크박스를 모두 체크하고 &lt;kbd&gt;Continue&lt;/kbd&gt; 버튼을 누릅니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[v] Deploy a sample application onto Amazon ECS Cluster&lt;/li&gt;
  &lt;li&gt;[v] Store container images securely with Amazon ECR&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017-02-12-img-02.png&quot;&gt;&lt;img src=&quot;/images/2017-02-12-img-02.png&quot; alt=&quot;Getting Started with Amazon EC2 Container Service(ECS)&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;지금부터 여섯 단계를 거칩니다.&lt;/p&gt;

&lt;h3 id=&quot;21-step-1-configure-repository&quot;&gt;2.1. Step 1: Configure repository&lt;/h3&gt;

&lt;p&gt;ECR 레지스트리에 저장소 이름을 정하는 화면입니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;appkr/myshop&lt;/code&gt;으로 이름을 정했습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017-02-12-img-03.png&quot;&gt;&lt;img src=&quot;/images/2017-02-12-img-03.png&quot; alt=&quot;Step 1: Configure repository&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;22-step-2-build-tag-and-push-docker-image&quot;&gt;2.2. Step 2: Build, tag, and push Docker image&lt;/h3&gt;

&lt;p&gt;화면에 ECR을 초기화하기 위한 자세한 안내가 나옵니다. 1 절에서 이미지는 빌드하고 테스트했으므로 빌드 과정은 건너 뜁니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;appkr/myshop:latest&lt;/code&gt; 이미지를 빌드했고, 실행하여 작동 테스트를 완료했다고 가정합니다. 나머지 과정은 다음과 같습니다.&lt;/p&gt;

&lt;p&gt;로컬 셸에서 ECR 서비스에 로그인합니다. 도커 허브나 &lt;a href=&quot;https://docs.docker.com/registry/&quot;&gt;도커 레지스트리&lt;/a&gt;에 로그인하는 방법과 같습니다. 굉장히 긴 비밀번호가 달린 명령문을 콘솔에 출력하는데 그대로 복사해서 붙여 넣고 로그인합니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/any &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;aws ecr get-login --region ap-northeast-1

~/any &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker login -u AWS -p &amp;lt;LONG_PASS_STRING&amp;gt; -e none https://628988759087.dkr.ecr.ap-northeast-1.amazonaws.com
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;이제 ECR 레지스트리 URL을 포함한 네임스페이스를 달아 태깅하고, 태깅된 이미지를 ECR에 푸쉬합니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/any &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker tag appkr/myshop:latest 628988759087.dkr.ecr.ap-northeast-1.amazonaws.com/appkr/myshop:latest

~/any &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker images
&lt;span class=&quot;c&quot;&gt;# REPOSITORY                                                       TAG       IMAGE ID         CREATED           SIZE&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# appkr/myshop                                                     latest    126f36ac9412     58 minutes ago    549 MB&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 628988759087.dkr.ecr.ap-northeast-1.amazonaws.com/appkr/myshop   latest    126f36ac9412     58 minutes ago    549 MB&lt;/span&gt;

~/any &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker push 628988759087.dkr.ecr.ap-northeast-1.amazonaws.com/appkr/myshop:latest
&lt;span class=&quot;c&quot;&gt;# The push refers to a repository [628988759087.dkr.ecr.ap-northeast-1.amazonaws.com/appkr/myshop]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# latest: digest: sha256:b8d0e4d0ab86db7436943573b11d06bdac34deb3d874423005670dfd47a39908 size: 5331&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;23-step-3-create-a-task-definition&quot;&gt;2.3. Step 3: Create a task definition&lt;/h3&gt;

&lt;p&gt;필자도 ECS를 배우고 있는 과정으로, 두 번 밖에 사용해 보지 않았기에 갓마존에서 말하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;task&lt;/code&gt;의 개념을 정확히 이해하지 못했습니다. &lt;kbd&gt;Create a task definition&lt;/kbd&gt; 창에 다음과 같이 입력했습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Task definition name*: deploy&lt;/li&gt;
  &lt;li&gt;Container name*: myshop&lt;/li&gt;
  &lt;li&gt;Image*: 628988759087.dkr.ecr.ap-northeast-1.amazonaws.com/appkr/myshop:latest&lt;/li&gt;
  &lt;li&gt;Memory Limits (MB)*: Hard limit 256&lt;/li&gt;
  &lt;li&gt;Port mappings: 80 80 tcp&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;24-step-4-configure-service&quot;&gt;2.4. Step 4: Configure service&lt;/h3&gt;

&lt;p&gt;서비스를 설정하고, ELB(Elastic Load Balancer)를 활성화했습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Service name*: myshop&lt;/li&gt;
  &lt;li&gt;Desired number of tasks*: 1&lt;/li&gt;
  &lt;li&gt;Elastic load balancing
    &lt;ul&gt;
      &lt;li&gt;Container name: myshop:80&lt;/li&gt;
      &lt;li&gt;ELB listener protocol*: HTTP&lt;/li&gt;
      &lt;li&gt;ELB health check: http:80/&lt;/li&gt;
      &lt;li&gt;ELB listener port*: 80&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;25-step-5-configure-cluster&quot;&gt;2.5. Step 5: Configure cluster&lt;/h3&gt;

&lt;p&gt;클러스터는 서비스를 구성하기 위한 서버(컨테이너)들의 논리적 집합이라 이해하고 있습니다. 가령 지금 배포하는 애플리케이션이 RDS나 ElasticCache를 쓸 수도 있지만, MySQL과 Redis를 직접 컨테이너로 구성해서 클러스터에 넣을 수도 있을 겁니다. 여튼 다음과 같이 설정했습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cluster name*: myshop&lt;/li&gt;
  &lt;li&gt;EC2 instance type*: t2.micro&lt;/li&gt;
  &lt;li&gt;Number of instances*: 1&lt;/li&gt;
  &lt;li&gt;Key pair: aws-tokyo-ecs&lt;/li&gt;
  &lt;li&gt;Security group
    &lt;ul&gt;
      &lt;li&gt;Allowed ingress source(s)*: Anywhere&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Key pair는 컨테이너에 SSH 접속을 위해 필요합니다. 인스턴스 타입도 실험해 보고 지울 것이므로 가장 작은 것으로 선택하고, 인스턴스는 1개만 선택했습니다. AWS를 쓰던 사용자라면 각 입력 박스의 의미를 이해할 수 있을 것입니다.&lt;/p&gt;

&lt;h3 id=&quot;26-step-6-review&quot;&gt;2.6. Step 6: Review&lt;/h3&gt;

&lt;p&gt;지금까지 설정한 값들을 보여줍니다. &lt;kbd&gt;Launch&lt;/kbd&gt; 버튼을 누르면 환경 구성이 시작됩니다. 환경 구성이 완료되면 &lt;kbd&gt;View Instance&lt;/kbd&gt; 버튼이 활성화됩니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017-02-12-img-04.png&quot;&gt;&lt;img src=&quot;/images/2017-02-12-img-04.png&quot; alt=&quot;Step 6: Review&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;우선 여기까지 수행하면 애플리케이션이 ECS에서 작동하고 있는 상태가 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;3-로드-밸런싱-및-오토-스케일링&quot;&gt;3. 로드 밸런싱 및 오토 스케일링&lt;/h2&gt;

&lt;h3 id=&quot;31-로드-밸런서&quot;&gt;3.1. 로드 밸런서&lt;/h3&gt;

&lt;p&gt;&lt;kbd&gt;Cluster&lt;/kbd&gt; 메뉴에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;myshop&lt;/code&gt; 서비스를 선택하면, &lt;kbd&gt;Load Balancing&lt;/kbd&gt; 섹션을 볼 수 있습니다. 누르면 다음 화면을 볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017-02-12-img-05.png&quot;&gt;&lt;img src=&quot;/images/2017-02-12-img-05.png&quot; alt=&quot;EC2 Load Balancing&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;하이라이트된 URL이 도커 컨테이너에서 실행 중인 서비스로서, 사용자가 접근할 수 있는 URL이 됩니다. 브라우저에서 열어보면 컨테이너 &lt;code class=&quot;highlighter-rouge&quot;&gt;59450439db83&lt;/code&gt;에서 서비스가 실행 중인 것을 확인할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017-02-12-img-06.png&quot;&gt;&lt;img src=&quot;/images/2017-02-12-img-06.png&quot; alt=&quot;EC2 Load Balancing&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;32-오토-스케일링&quot;&gt;3.2. 오토 스케일링&lt;/h3&gt;

&lt;p&gt;아직 트래픽을 많이 만들지 못해서 오토 스케일링은 경험하지 못했습니다. 오토 스케일링을 설정한 후, 다음 스크립트를 여러 개의 셸에서 실행해서 서버에 부하를 주었지만 좀 처럼 CPU 로드가 올라가진 않더라구요ㅜ.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/any &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;curl http://ec2contai-ecselast-1lgfqkql0okbd-452428627.ap-northeast-1.elb.amazonaws.com:80&lt;span class=&quot;se&quot;&gt;\;&lt;/span&gt; sleep 1; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;어쨌든 Elastic Beanstalk처럼 인스턴스를 처음부터 만들고, 서버 인프라를 구성하고, 환경변수를 추가하고, 애플리케이션 코드를 복제해야 하는 것과 달리, 도커는 애플리케이션까지 포함된 이미지를 ECR에서 받아 실행만 하는 것으므로, (로컬 환경의 경험으로 부터 유추해 보아) 대략 수 초 내에 새 컨테이너를 띄울 수 있을 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;kbd&gt;Cluster&lt;/kbd&gt; 메뉴에서 &lt;kbd&gt;Update&lt;/kbd&gt; 버튼을 눌러 오토 스케일링 옵션을 설정했습니다. 총 세 단계를 거칩니다.&lt;/p&gt;

&lt;h4 id=&quot;1-단계-min-max-tasks-설정&quot;&gt;1 단계: Min, Max Tasks 설정&lt;/h4&gt;

&lt;p&gt;그림과 같습니다. 필자는 최소 1대, 최대 2대로 설정했습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017-02-12-img-07.png&quot;&gt;&lt;img src=&quot;/images/2017-02-12-img-07.png&quot; alt=&quot;EC2 Load Balancing&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;23-단계-오토-스케일링-조건-및-액션-설정&quot;&gt;2~3 단계: 오토 스케일링 조건 및 액션 설정&lt;/h4&gt;

&lt;p&gt;직전 5분 동안 CPU 사용량이 40%를 넘어서면 스케일링 아웃하도록 설정했습니다. 아~ 아까비!! 이 값을 5% 정도로 낮게 설정했다면 오토 스케일을 볼 수 있었을 텐데… 지금은 모든 환경을 지운 상태라 실험해 볼 수 없네요.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017-02-12-img-08.png&quot;&gt;&lt;img src=&quot;/images/2017-02-12-img-08.png&quot; alt=&quot;EC2 Load Balancing&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017-02-12-img-09.png&quot;&gt;&lt;img src=&quot;/images/2017-02-12-img-09.png&quot; alt=&quot;EC2 Load Balancing&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;4-워크-플로우&quot;&gt;4. 워크 플로우&lt;/h2&gt;

&lt;p&gt;이제 로컬 개발 환경에서 애플리케이션 코드가 변경되면, &lt;code class=&quot;highlighter-rouge&quot;&gt;docker build&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;docker tag&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;docker push&lt;/code&gt; 명령만으로 변경된 애플리케이션을 AWS ECS 클러스터에 배포할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/deploy-laravel-with-ecs-and-ecr &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker build --tag appkr/myshop .

~/any &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker tag appkr/myshop:latest 628988759087.dkr.ecr.ap-northeast-1.amazonaws.com/appkr/myshop:latest

~/any &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker push 628988759087.dkr.ecr.ap-northeast-1.amazonaws.com/appkr/myshop:latest
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;이상의 과정을 Jenkins등 CI/CD 도구에 걸어 놓으면, 코드 변경 -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt; -&amp;gt; Test by CI tool -&amp;gt; Deploy by CD tool 등으로 애플리케이션 개발 및 수정 이후의 모든 과정을 완전 자동화할 수 있을 겁니다. 도커, CI/CD를 통한 테스트 및 배포 자동화는 배포에 대한 개발자의 두려움을 없애 줍니다.&lt;/p&gt;

&lt;p&gt;배포 및 운영만을 담당하는 엔지니어가 별도로 있는 조오~은 회사가 아니라면, 결과적으로 ECS/ECR를 이용한 서비스 배포는 개발자가 비즈니스 로직 개발에만 집중할 수 있도록 함으로써, 비즈니스 싸이클이 빨리지는 효과를 얻을 수 있습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;도커 이용의 장점이나 사용법을 배우려면 &lt;code class=&quot;highlighter-rouge&quot;&gt;subicura&lt;/code&gt;님의 블로그 포스트를 참고하시기 바랍니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://subicura.com/2017/01/19/docker-guide-for-beginners-1.html&quot;&gt;초보를 위한 도커 안내서 by subicura(김충섭)&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 12 Feb 2017 00:00:00 +0900</pubDate>
        <link>http://blog.appkr.kr/work-n-play/deploy-with-ecs/</link>
        <guid isPermaLink="true">http://blog.appkr.kr/work-n-play/deploy-with-ecs/</guid>
        
        <category>개발자</category>
        
        <category>Docker</category>
        
        
        <category>work-n-play</category>
        
      </item>
    
      <item>
        <title>데이터베이스 쿼리 성능 차이를 이해하기 위한 실험</title>
        <description>&lt;p&gt;많은 양의 데이터를 체계적으로 저장하기 위해 데이터베이스를 사용합니다. 필요할 때마다 빠르게 꺼내 보거나, 수정하고, 불필요해지면 삭제하기도 합니다. 이처럼 데이터베이스는 수 많은 레코드셋에서 원하는 레코드만 빠르게 추출해 낼 수 있는데, &lt;strong&gt;내부에서 어떻게 작동하는 지는 완전 블랙박스&lt;/strong&gt;죠?&lt;/p&gt;

&lt;p&gt;가령 ‘인덱스를 걸면 빠르다’, ‘조인은 느리다’처럼 일반적으로 알려진 상식이 있고, 이런 상식에 따라 모델링을 하면 대체적으로 잘 돌아가지만…&lt;/p&gt;

&lt;p&gt;최근 회사에서 관련된 일도 있었고 해서, 스물스물 호기심이 발동하기 시작했습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/mysql/mysql-server&quot;&gt;MySQL은 소스코드가 깃허브에 완전 공개&lt;/a&gt;되어있어 블랙박스라 할 수는 없지만, 죽을 때까지 코드를 까볼 생각은 없습니다. 대신 &lt;strong&gt;간단한 배열을 이용해서 데이터베이스를 흉내내고, 기본 키(Primary Key), 문자열 컬럼에 대한 풀 스캔, 바이너리 스캔, 인덱스, 조인 등에서 성능 차이가 발생하는 이유를 추측해보기&lt;/strong&gt;로 했습니다.&lt;/p&gt;

&lt;p&gt;이 실험을 위한 소스코드는 &lt;a href=&quot;https://github.com/appkr/db-performance-illustration&quot;&gt;이곳에서 다운로드&lt;/a&gt; 받을 수 있습니다.&lt;/p&gt;

&lt;!--more--&gt;
&lt;div class=&quot;spacer&quot;&gt;• • •&lt;/div&gt;

&lt;h2 id=&quot;1-실험-도구&quot;&gt;1. 실험 도구&lt;/h2&gt;

&lt;p&gt;웹 브라우저를 이용해서 각 실험 시나리오를 수행하고 화면에 결과를 출력하는 간단한 실험 도구를 만들어 봤습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017-02-11-img-02.png&quot;&gt;&lt;img src=&quot;/images/2017-02-11-img-02.png&quot; alt=&quot;테스트 러너&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;다음과 같은 폴더로 구성했습니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.
├── app             &lt;span class=&quot;c&quot;&gt;# 모델(PHP Class)입니다.&lt;/span&gt;
│   │               &lt;span class=&quot;c&quot;&gt;# PSR4 오토로드를 이용합니다. &lt;/span&gt;
│   ├── Model.php
│   ├── Team.php
│   └── User.php
├── data            &lt;span class=&quot;c&quot;&gt;# 실험에 사용할 데이터를 생성합니다 (모델 인스턴스들로 구성된 배열).&lt;/span&gt;
│   │               &lt;span class=&quot;c&quot;&gt;# 테스트 러너에서 파일을 임포트합니다.&lt;/span&gt;
│   ├── index.php
│   ├── teams.php
│   └── users.php
├── scenario        &lt;span class=&quot;c&quot;&gt;# 테스트 시나리오입니다.&lt;/span&gt;
│   │               &lt;span class=&quot;c&quot;&gt;# 테스트 러너에서 파일을 임포트합니다.&lt;/span&gt;
│   ├── binary.php
│   ├── fullscan.php
│   ├── indexed.php
│   ├── join.php
│   └── primary.php
└── index.php       &lt;span class=&quot;c&quot;&gt;# 테스트 러너입니다.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;테스트 러너(&lt;code class=&quot;highlighter-rouge&quot;&gt;index.php&lt;/code&gt;)는&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;필요한 데이터를 생성하여 메모리에 로드하고&lt;/li&gt;
  &lt;li&gt;테스터와 인터랙션하기 위한 간단한 라우팅과&lt;/li&gt;
  &lt;li&gt;사용자가 선택한 시나리오를 수행한 후&lt;/li&gt;
  &lt;li&gt;결과를 계산하고 출력하는&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;총 네 개의 모듈로 구성되어 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// index.php
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 오토로드
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__DIR__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/vendor/autoload.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 허용 메모리 키우고, 테스트 데이터 생성
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ini_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'memory_limit'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'512M'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$teams&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__DIR__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/data/teams.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__DIR__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/data/users.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$userIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__DIR__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/data/index.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 타이머 시작
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'START'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;microtime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 변수 초기화
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$uri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'REQUEST_URI'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$scenario&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;parse_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'path'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$allowed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'primary'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'fullscan'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'binary'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'indexed'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'join'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 유효성 검사
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;in_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$scenario&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$allowed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'정의되지 않은 시나리오입니다.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 테스트 수행
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__DIR__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/scenario/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$scenario&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.php&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 결과 계산
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'처리시간(ms)'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;microtime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;START&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'메모리(MB)'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;memory_get_usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'CPU(%)'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sys_getloadavg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'found'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$found&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 결과 출력
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json;charset=utf-8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;json_encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON_PRETTY_PRINT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;2-실험-데이터-생성&quot;&gt;2. 실험 데이터 생성&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;App\Team&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;App\User&lt;/code&gt; 모델은 POPO(Plain Old PHP Object)이라 설명을 생략했으니, 소스코드를 살펴보시기 바랍니다.&lt;/p&gt;

&lt;h3 id=&quot;21-teams-배열&quot;&gt;2.1. &lt;code class=&quot;highlighter-rouge&quot;&gt;$teams&lt;/code&gt; 배열&lt;/h3&gt;

&lt;p&gt;인덱스나 조인할 때 사용할 데이터입니다. 총 네 개를 만들었습니다.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// data/teams.php
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App\Team&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Team&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'id'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'청팀'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'since'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1970&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'subscription'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'monthly'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Team&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Team&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Team&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'id'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'흑팀'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'since'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'subscription'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'forever'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;22-users-배열&quot;&gt;2.2. &lt;code class=&quot;highlighter-rouge&quot;&gt;$users&lt;/code&gt; 배열&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; 인스턴스 만 개를 담은 배열입니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;Faker&lt;/code&gt; 라이브러리와 같이 동작해서 매번 테스트 시나리오를 수행할 때마다 지난 번과 다른 일 만 개의 &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; 인스턴스를 담은 배열을 새로 만듭니다. 각 인스턴스는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Team&lt;/code&gt; 모델에 &lt;code class=&quot;highlighter-rouge&quot;&gt;team_id&lt;/code&gt;라는 속성으로 연결되어 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// data/users.php
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App\User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$faker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;\Faker\Factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ko_KR'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$team&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$faker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;randomElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$teams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nv&quot;&gt;$users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'id'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$faker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'email'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$faker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;safeEmail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'team_id'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$team&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;23-userindex-배열&quot;&gt;2.3. &lt;code class=&quot;highlighter-rouge&quot;&gt;$userIndex&lt;/code&gt; 배열&lt;/h3&gt;

&lt;p&gt;필자는 인덱스를 일종의 그룹핑이라고 생각했습니다. 가령 만 개의 &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; 인스턴스로 구성된 레코드셋을 총 네 개의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Team&lt;/code&gt;으로 구분할 수 있다면, 풀스캔의 대상은 1/4로 줄어들기 때문입니다. 정식으로 공부해 본 적이 없는 데알못인데, 개발자의 촉으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;users.team_id&lt;/code&gt; 컬럼에 인덱스를 건다면, 1:(1,2,..), 2:(3,7,..), team_id:(users.id 리스트) 식으로 어딘가에 저장해 놓고, 쿼리 시점에 저장된 맵(인덱스)를 먼저 탐색하지 않을까 싶습니다.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// data/index.php
&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$userIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$users&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$userIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;team_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$userIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;참고&lt;/code&gt;&lt;/strong&gt; 이 코드에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;foreach&lt;/code&gt;를 사용하는 것이 &lt;code class=&quot;highlighter-rouge&quot;&gt;array_map&lt;/code&gt;을 사용하는 것 보다 더 빨랐습니다.&lt;/p&gt;

&lt;h2 id=&quot;3-시나리오&quot;&gt;3. 시나리오&lt;/h2&gt;

&lt;p&gt;1 절의 테스트 러너에서 봤듯이 데이터 생성이 끝난 후 타이머를 시작하고, 테스터가 선택한 시나리오를 수행합니다.&lt;/p&gt;

&lt;p&gt;이하 모든 실험 환경은 필자의 맥북 프로기준이며, PHP 7.1(xdebug on, opcache off)과 &lt;a href=&quot;https://laravel.kr/docs/valet&quot;&gt;라라벨 Valet 서버&lt;/a&gt;를 이용했습니다.&lt;/p&gt;

&lt;h3 id=&quot;31-primary-시나리오&quot;&gt;3.1. &lt;code class=&quot;highlighter-rouge&quot;&gt;primary&lt;/code&gt; 시나리오&lt;/h3&gt;

&lt;p&gt;데이터베이스의 기본 키 쿼리를 흉내냅니다. 필자는 배열의 인덱스를 바로 접근하는 것과 비슷하다고 생각하고 다음과 같이 시나리오 코드를 구성했습니다.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// scenario/primary.php
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9999&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;총 5회 실험하고, 처리시간 기준으로 아웃라이어 2개는 버렸습니다.&lt;/p&gt;

&lt;div class=&quot;language-http highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;GET /primary
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;처리시간(ms)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;메모리(MB)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;CPU(%)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1.645088196&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5.5276&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1.685058594&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1.547813416&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5.528152&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1.797851563&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1.681804657&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5.527568&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1.865722656&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;평균&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1.624902089&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5.527773333&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1.782877604&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;32-fullscan-시나리오&quot;&gt;3.2. &lt;code class=&quot;highlighter-rouge&quot;&gt;fullscan&lt;/code&gt; 시나리오&lt;/h3&gt;

&lt;p&gt;문자열 컬럼을 풀스캔하는 쿼리를 흉내냅니다.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// scenario/fullscan.php
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$users&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;strpos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'_9999'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;\App\User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;총 5회 실험하고, 처리시간 기준으로 아웃라이어 2개는 버렸습니다.&lt;/p&gt;

&lt;div class=&quot;language-http highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;GET /fullscan
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;처리시간(ms)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;메모리(MB)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;CPU(%)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;9.595155716&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5.528248&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2.473632813&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;9.42492485&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5.527952&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2.122070313&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;12.29596138&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5.527776&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2.5234375&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;평균&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;10.43868065&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5.527992&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2.373046875&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;33-indexed-시나리오&quot;&gt;3.3. &lt;code class=&quot;highlighter-rouge&quot;&gt;indexed&lt;/code&gt; 시나리오&lt;/h3&gt;

&lt;p&gt;인덱스된 컬럼을 쿼리하는 시나리오입니다. ‘흑팀’에서 사용자 이름이 _9999로 끝나는 레코드를 찾는데, 앞서 말했듯이 매번 만 개의 테스트 데이터를 생성하기 때문에, _9999 사용자가 ‘흑팀’이 아닐 수도 있어서, 빈 레코드를 반환할 수도 있습니다. 빈 레코드가 반환될 때는 ‘흑팀’에 해당하는 대략 2500개의 레코드를 끝까지 스캔하기 때문에 미미하지만 시간이 더 오래 걸릴 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// scenario/indexed.php
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$userIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;strpos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'_9999'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;\App\User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;총 5회 실험하고, 처리시간 기준으로 아웃라이어 2개는 버렸습니다.&lt;/p&gt;

&lt;div class=&quot;language-http highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;GET /indexed.php
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;처리시간(ms)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;메모리(MB)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;CPU(%)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3.381967545&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5.5282&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1.997558594&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4.05216217&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5.528056&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1.793457031&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3.484964371&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5.52896&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1.578613281&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;평균&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3.639698029&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5.528405333&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1.789876302&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;34-join-시나리오&quot;&gt;3.4. &lt;code class=&quot;highlighter-rouge&quot;&gt;join&lt;/code&gt; 시나리오&lt;/h3&gt;

&lt;p&gt;&lt;del&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;users&lt;/code&gt; 테이블과 &lt;code class=&quot;highlighter-rouge&quot;&gt;teams&lt;/code&gt; 테이블간의 조인 쿼리를 흉내냅니다. 휙 봐도 반복문이 두 번 등장하고, &lt;code class=&quot;highlighter-rouge&quot;&gt;$joined&lt;/code&gt;라는 만 개의 원소를 담고 있는 새로운 배열이 메모리 공간에 생기게 되므로, 당연히 테이블 한 개보다 처리에 오랜 시간이 걸릴 수 밖에 없을 겁니다.&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;게다가 우리 시나리오의 경우, 찾고자 하는 값이 배열 맨 끝에 위치하고 있어 총 2 만번의 루프가 발생하고 있습니다.&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@huhushow&lt;/code&gt;님의 가르침으로 검색을 먼저하고 맵핑하는 로직으로 변경했습니다. 배열 순회 회수는 풀스캔과 같고, 찾은 사용자가 속한 &lt;code class=&quot;highlighter-rouge&quot;&gt;Team&lt;/code&gt;을 찾아 머지하는 로직만 추가 되었으므로 풀스캔 대비 성능 차이는 거의 없었습니다.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// scenario/join.php
&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$users&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;strpos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'_9999'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$found&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$team&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$teams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$found&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;team_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$found&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;team_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$team&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$found&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;team_since&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$team&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;since&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$found&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;team_subscription&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$team&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$found&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;\App\User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;총 5회 실험하고, 처리시간 기준으로 아웃라이어 2개는 버렸습니다.&lt;/p&gt;

&lt;div class=&quot;language-http highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;GET /join.php
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;처리시간(ms)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;메모리(MB)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;CPU(%)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;10.13612747&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5.528432&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2.827148438&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;10.37597656&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5.529192&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1.83203125&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;10.39290428&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5.528472&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2.174804688&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;평균&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;10.30166944&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5.528698667&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2.277994792&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;35-binary-시나리오&quot;&gt;3.5. &lt;code class=&quot;highlighter-rouge&quot;&gt;binary&lt;/code&gt; 시나리오&lt;/h3&gt;

&lt;p&gt;실험 목적과는 좀 거리가 있지만, 좀 더 지능적인 풀스캔 전략을 보여주기 위해 수록했습니다. 바이너리 검색에 대한 자세한 내용은 &lt;a href=&quot;http://algo-visualizer.jasonpark.me/#path=search/binary_search/recursive&quot;&gt;Algorithm Visualizer 프로젝트&lt;/a&gt;를 참고해주세요.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// scenario/binary.php
&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$search&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9999&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$startIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$endIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$endIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$startIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$medianIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$startIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$endIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$search&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$medianIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$startIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$medianIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;elseif&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$search&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$medianIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$endIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$medianIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$medianIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;\App\User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;총 5회 실험하고, 처리시간 기준으로 아웃라이어 2개는 버렸습니다.&lt;/p&gt;

&lt;div class=&quot;language-http highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;GET /binary.php
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;처리시간(ms)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;메모리(MB)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;CPU(%)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;7.062911987&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5.528104&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2.474121094&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2.383947372&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5.52812&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2.753417969&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1.770973206&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5.528288&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3.248535156&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;평균&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3.739277522&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5.528170667&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2.825358073&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;4-관찰-결과-및-시사점&quot;&gt;4. 관찰 결과 및 시사점&lt;/h2&gt;

&lt;p&gt;막연하게만 알던 내용을, 실험을 통해 검증하는 계기가 되었습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;@huhushow&lt;/code&gt;님의 의견의 따라 로직을 수정하니 결론은 완전히 달라졌습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;어떤 방식을 사용하든 풀스캔의 대상이 될 레코드셋의 양을 줄이는 것은 성능 향상에 도움이 된다.&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;테이블 조인은 메모리를 많이 사용하고, 속도도 느리다.&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;del&gt;데이터베이스 모델링할 때, 중복을 최소화하고, 데이터간 무결성을 유지하기 위해 정규화를 했습니다. 하지만 레코드 수가 많아지면 조인으로 인한 성능 낭비가 커지므로, &lt;strong&gt;조인이 잦은 테이블을 비정규화&lt;/strong&gt;하여 약간의 중복을 허용하는 식으로 구성하는 것도 좋은 방법이란 생각이 들었습니다. 또는 조인할 때 &lt;strong&gt;참조되는 테이블을 애플리케이션의 배열이나 인-메모리 캐시&lt;/strong&gt;에 올려두는 것도 생각해 볼 수 있겠네요.&lt;/del&gt;&lt;/p&gt;

&lt;h2 id=&quot;5-mysql-테스트&quot;&gt;5. MySQL 테스트&lt;/h2&gt;

&lt;p&gt;이상의 테스트를 MySQL에서 그대로 재연하고 결과를 측정해 보았습니다.&lt;/p&gt;

&lt;p&gt;맥용 Docker에 &lt;a href=&quot;https://hub.docker.com/_/mysql/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mysql:5.7&lt;/code&gt;&lt;/a&gt; 이미지를 이용했고, SequelPro를 클라이언트로 사용했습니다.&lt;/p&gt;

&lt;p&gt;테스트에 사용한 쿼리는 아래와 같습니다. 테이블 스키마를 생성하고 데이터를 심는 쿼리는 소스코드의 &lt;code class=&quot;highlighter-rouge&quot;&gt;/sql&lt;/code&gt; 폴더에서 찾을 수 있습니다. 역시 만 개의 &lt;code class=&quot;highlighter-rouge&quot;&gt;users&lt;/code&gt; 레코드와 네 개의 &lt;code class=&quot;highlighter-rouge&quot;&gt;teams&lt;/code&gt; 레코드를 만들었습니다. 애플리케이션이 아니므로 매 시나리오를 수행할 때마다 테스트 벡터가 달라지지는 않습니다.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- #1 primary&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`users`&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`id`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;99999&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- #2 fullscan&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`users`&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`name`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIKE&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'%_99999'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- #3 indexed&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`users`&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`team_id`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- #4 join&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`users`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`teams`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`team_id`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`id`&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`name`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'홍팀'&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`name`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIKE&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'%_99997'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;동일하게 5회 실험하고, 처리시간 기준으로 아웃라이어 2개는 버렸습니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;SQL&lt;/th&gt;
      &lt;th&gt;시나리오&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;3회 평균 처리 시간(ms)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;#1&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;primary&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2.233333333&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;#2&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fullscan&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;46.06666667&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;#3&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;indexed&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;13.36666667&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;#4&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;join&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;35.16666667&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;spacer&quot;&gt;• • •&lt;/div&gt;

&lt;p&gt;스택오버플로에 올라온 &lt;a href=&quot;http://stackoverflow.com/a/389824/7511247&quot;&gt;‘mysql 5.0 indexes - Unique vs Non Unique’&lt;/a&gt;라는 질답의 좌표를 남기며 마칩니다. 링크의 내용을 요약하면 성능은 &lt;del&gt;Primary &amp;gt; Unique &amp;gt; Index &amp;gt; Non-indexed&lt;/del&gt; Primary &amp;gt; Unique &amp;amp; Non-Unique-Index &amp;gt; Non-indexed 순이란 이야기입니다.&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Feb 2017 01:00:00 +0900</pubDate>
        <link>http://blog.appkr.kr/work-n-play/db-query-performance-illustration-using-array/</link>
        <guid isPermaLink="true">http://blog.appkr.kr/work-n-play/db-query-performance-illustration-using-array/</guid>
        
        <category>개발자</category>
        
        <category>PHP</category>
        
        <category>Database</category>
        
        
        <category>work-n-play</category>
        
      </item>
    
      <item>
        <title>존칭형으로 블로그 쓰기</title>
        <description>&lt;p&gt;이 블로그는 직업인으로서의 일상과 생각을 정리하여 기록하기 위해 2008년부터 쓰기 시작했습니다. 당시에는 모바일 반도체를 개발하는 회사에서 제품을 기획하는 일을 하고 있었지요. 블로그 플랫폼도 네이버로 시작했던 걸로 기억합니다. 일기처럼 쓰는 글이었으므로 당연히 평서형(반말)을 썼습니다.&lt;/p&gt;

&lt;p&gt;네이버에서 텍스타일로, 텍스타일에서 티스토리로, 다시 워드프레스로 이전하며 블로깅을 하다가 2011년 반도체 회사를 떠나면서 더 이상 글을 쓰지 않았습니다. 개발자의 삶을 살기로 마음먹은 2015년 중반부터 개발자스럽게 블로그 플랫폼을 Jekyll로 옮겨 개발자로서 배운 내용을 하나씩 남기기 시작했습니다.&lt;/p&gt;

&lt;p&gt;깃허브에 라라벨 프레임워크에 대한 온라인 강의를 연재하고, 책을 집필하고, 오프라인 강의를 하면서, &lt;strong&gt;블로그는 지난 세월 기획자로 살던 저를 개발자 appkr로 세상에 알리는 든든한 지원군 역할&lt;/strong&gt;을 해 왔습니다. 덕분에 성공적으로 경력 전환도 할 수 있었습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017-02-11-img-01.png&quot;&gt;&lt;img src=&quot;/images/2017-02-11-img-01.png&quot; alt=&quot;블로그 방문자 추이&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;그림처럼 꽤 많은 분들이 찾아 주셨고, 이제 이 블로그는 혼자만의 일상을 기록하기보다는 다른 개발자들과 소통하는 공간으로 성격이 변모되었습니다. 해서 &lt;strong&gt;앞으로는 존칭형(존댓말)으로 글을 쓰려고 합니다&lt;/strong&gt;. 사실 존칭형으로 글 쓰는 것이 더 쉽기도하고요~&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Feb 2017 00:00:00 +0900</pubDate>
        <link>http://blog.appkr.kr/learn-n-think/style-changed/</link>
        <guid isPermaLink="true">http://blog.appkr.kr/learn-n-think/style-changed/</guid>
        
        
        <category>learn-n-think</category>
        
      </item>
    
  </channel>
</rss>
