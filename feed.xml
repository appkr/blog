<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Appkr.memo(new Life)</title>
    <description>appkr's blog to record day-to-day life &amp; thoughts.</description>
    <link>http://blog.appkr.kr/</link>
    <atom:link href="http://blog.appkr.kr/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 04 Dec 2016 07:42:36 +0900</pubDate>
    <lastBuildDate>Sun, 04 Dec 2016 07:42:36 +0900</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>Monolog를 이용한 애플리케이션 로깅</title>
        <description>&lt;p&gt;이 포스트에서는 &lt;strong&gt;PHP 커뮤니티에서 De facto(사실상) 표준으로 인식되는 로깅 라이브러리인 &lt;a href=&quot;https://github.com/Seldaek/monolog&quot;&gt;Monolog&lt;/a&gt;의 사용법을 소개&lt;/strong&gt;한다. Monolog는 &lt;a href=&quot;https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md&quot;&gt;PSR-3&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;LoggerInterface&lt;/code&gt;를 구현한 구현체이며, RFC-5424에서 정의한 심각도 규격(e.g. DEBUG, INFO, ..)에 따라 로그를 핸들링한다. 컴포저를 만든 조르디 보기아노(Jordi Boggiano)가 구현했으며, &lt;strong&gt;파일 뿐만 아니라 데이터베이스, 메일, SaaS 서비스등 다양한 방법으로 로그를 처리&lt;/strong&gt;할 수 있다.&lt;/p&gt;

&lt;p&gt;이 포스트에서는 라라벨 프로젝트에서 기본 로그 저장소인 파일(&lt;code class=&quot;highlighter-rouge&quot;&gt;storage/logs/laravel.log&lt;/code&gt;)에 더해서 Elastic Search에도 로그를 적재하는 방법을 다룬다. 다음 도구 또는 서비스를 사용한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;라라벨: PHP 프로그래밍 언어로 작성된 풀 스택 웹 프레임워크&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;Elastic Search: 검색에 특화된 데이터베이스. CRUD 및 설정을 위한 REST API를 제공한다.&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;Docker: 컨테이너화된 애플리케이션 운영 환경을 관리하는 도구&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 포스트의 소스 코드는 &lt;a href=&quot;https://github.com/appkr/monolog-scratchpad&quot;&gt;https://github.com/appkr/monolog-scratchpad&lt;/a&gt;에서 받을 수 있다.&lt;/p&gt;

&lt;!--more--&gt;
&lt;div class=&quot;spacer&quot;&gt;• • •&lt;/div&gt;

&lt;h2 id=&quot;section&quot;&gt;1. 로그 쓰기&lt;/h2&gt;

&lt;p&gt;새로 만든 라라벨 프로젝트의 라우팅 정의 파일을 이용해서 로그를 써 봤다.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// routes/web.php
&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello Monolog&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bar'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    
    &lt;span class=&quot;nx&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;emergency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;critical&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;warning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;notice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'welcome'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;그리고, 로그 파일을 확인해 보면 다음과 같은 로그가 기록된 것을 확인할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# storage/logs/laravel.log&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2016-12-03 06:58:34] local.EMERGENCY: Hello Monolog &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2016-12-03 06:58:34] local.ALERT: Hello Monolog  
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2016-12-03 06:58:34] local.CRITICAL: Hello Monolog  
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2016-12-03 06:58:34] local.ERROR: Hello Monolog  
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2016-12-03 06:58:34] local.WARNING: Hello Monolog  
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2016-12-03 06:58:34] local.NOTICE: Hello Monolog  
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2016-12-03 06:58:34] local.INFO: Hello Monolog  
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2016-12-03 06:58:34] local.DEBUG: Hello Monolog  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;monolog--&quot;&gt;2. Monolog 살펴 보기&lt;/h2&gt;

&lt;p&gt;Monolog 라이브러리는 다음과 같은 디렉토리 구조로, 크게 보면&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;PSR-3 &lt;code class=&quot;highlighter-rouge&quot;&gt;LoggerInterface&lt;/code&gt; 구현체&lt;/li&gt;
  &lt;li&gt;로그 핸들러&lt;/li&gt;
  &lt;li&gt;로그 포매터&lt;/li&gt;
  &lt;li&gt;로그 프로세서&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;로 구성되어 있다. 각각의 역할과 예는 아래 블럭에 인라인 주석으로 표시했다.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/monolog-scratchpad &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tree vendor/monolog/monolog/src/Monolog
&lt;span class=&quot;c&quot;&gt;# vendor/monolog/monolog/src/Monolog&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ├── ErrorHandler.php            # Monolog를 전역 예외 처리기로 등록할 때 편리한 헬퍼&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ├── Logger.php                  # PSR-3 LoggerInterface를 구현한 구체 클래스&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ├── Registry.php                # 로거 인스턴스를 등록해놓은 간단한 레지스트리 클래스&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# |                                 애플리케이션에서 여러 개의 로거를 사용할 때 쓴다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ├── Formatter                   # 포매터&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# │   ├── FormatterInterface.php&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# │   ├── ...&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# │   └── LineFormatter.php       # 로그를 문자열(String)로 포매팅한다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ├── Handler                     # 로그 핸들러&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# │   ├── AbstractHandler.php&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# │   ├── HandlerInterface.php&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# │   ├── ErrorLogHandler.php     # 로그를 stdout으로 보낸다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# │   ├── ...&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# │   └── SlackHandler.php        # 로그를 슬랙으로 보낸다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# └── Processor                   # 프로세서, 로그를 가공하거나 추가 정보를 더한다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#     ├── ...&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#     └── GitProcessor.php        # 로그에 Git 브랜치와 커밋 해시를 추가한다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 7 directories, 88 files&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;elastic-search---&quot;&gt;3. Elastic Search를 이용한 로그 핸들링&lt;/h2&gt;

&lt;h3 id=&quot;elastic-search-&quot;&gt;3.1. Elastic Search 설치&lt;/h3&gt;

&lt;p&gt;Elastic Search를 이용하는 이유는 다음과 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;검색이 빠르다.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.elastic.co/products/kibana&quot;&gt;Kibana&lt;/a&gt; 등 시각화 도구와 연결하기 좋다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;docker--&quot;&gt;3.1.1. Docker 데몬 설치&lt;/h4&gt;

&lt;p&gt;아래 설치법은 맥 OS X 기준인데, 다른 운영체제도 &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker 홈페이지&lt;/a&gt;를 방문해서 Docker 패키지를 다운로드 받으면 된다. Docker 패키지는 가벼운 리눅스 커널과 유틸리티의 모음이라고 이해하면 된다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;brew tap caskroom/cask
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;brew cask install docker --appdir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/Application
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Note&lt;/code&gt;`&lt;/strong&gt; Docker 데몬은 관리자 권한을 요구하므로, 설치 후 최초 한번 실행해서 운영체제 로그인 정보를 입력하여 권한을 부여해야한다.&lt;/p&gt;

&lt;h4 id=&quot;elastic-search----&quot;&gt;3.1.2. Elastic Search 이미지 다운로드 및 실행&lt;/h4&gt;

&lt;p&gt;Docker를 쓰는 이유는 환경 격리다. 호스트 운영체제가 윈도우든 맥이든 Docker 이미지는 같은 리눅스 커널 위에서 작동하므로 호스트 운영체제의 영향을 받지 않는다. 게다가 운영체제에 맞춘 복잡한 컴파일 과정을 거치지 않아도 된다. 그냥 아래 명령어들을 복사해서 콘솔에 붙여넣기만 하면 된다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 도커 컨테이너와 호스트 머신이 공유할 폴더를 만든다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 호스트 머신이란 로컬 컴퓨터를 말한다. &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Docker 이미지는 서버의 스냅샷이고 이를 실행한 상태를 컨테이너라 한다(정확한 표현은 아니다.)&lt;/span&gt;
~/monolog-scratchpad &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir esdata

&lt;span class=&quot;c&quot;&gt;# 이미지를 다운로드 받고 실행한다.&lt;/span&gt;
~/monolog-scratchpad &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run -d &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --name es50 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    -v &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;/esdata:/usr/share/elasticsearch/data &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    -p 9200:9200 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    elasticsearch
&lt;span class=&quot;c&quot;&gt;# Unable to find image 'elasticsearch:latest' locally&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Status: Downloaded newer image for elasticsearch:latest&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# a88d12860180...&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 실행 상태를 확인한다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# CONTAINER ID 해시는 필자의 것과 다르다.&lt;/span&gt;
~/monolog-scratchpad &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker ps
&lt;span class=&quot;c&quot;&gt;# CONTAINER ID        IMAGE            COMMAND    CREATED    STATUS    PORTS    NAMES&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# a88d12860180        elasticsearch    ...        ...        ...       9200/tcp es50&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;브라우저에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:9200&lt;/code&gt;을 방문해서 방금 Docker 컨테이너로 구동한 Elastic Search가 잘 작동하나 확인해 보자.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016-12-03-img-01.png&quot;&gt;&lt;img src=&quot;/images/2016-12-03-img-01.png&quot; alt=&quot;Elastic Search Welcome Page&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;elastic-search-php-----&quot;&gt;3.2. Elastic Search PHP 클라이언트 설치 및 작동 확인&lt;/h3&gt;

&lt;p&gt;앞서 Elastic Search는 REST API를 제공한다고 했다. REST API를 소비하는 PHP 클라이언트를 설치한다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/monolog-scratchpad &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;composer require elasticsearch/elasticsearch
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;라우트 정의 파일로 설치한 Elastic Search 라이브러리가 작동하지는 확인한다.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// routes/web.php 
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Elasticsearch\ClientBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$esClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ClientBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;dd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$esClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016-12-03-img-02.png&quot;&gt;&lt;img src=&quot;/images/2016-12-03-img-02.png&quot; alt=&quot;Elastic Search Client&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;monolog--elastic-search--&quot;&gt;3.3. Monolog를 위한 Elastic Search 핸들러 만들기&lt;/h3&gt;

&lt;p&gt;Monolog 라이브러리에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;ElasticSearchHandler&lt;/code&gt;가 이미 포함되어 있다. 그런데, 앞 절에서 설치한 Elastic Search 공식 클라이언트가 아닌 다른 클라이언트를 사용하고 있다. API가 달라 부득이 별도의 핸들러를 만들어야 한다. Monolog와 Elastic Search 문서를 읽어 보니 어렵지 않다. 만들어 보자.&lt;/p&gt;

&lt;p&gt;라라벨 &lt;a href=&quot;https://laravel.com/docs/5.3/errors#configuration&quot;&gt;공식 문서&lt;/a&gt;에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;bootstrap/app.php&lt;/code&gt;에서 등록하는 방법을 설명하고 있다. 좀 더 고급지고, 다른 프로젝트에서 재활용할 수 있도록 별도 서비스 프로바이더로 만들어 봤다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/monolog-scratchpad &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;php artisan make:provider CustomLogProvider
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;boot()&lt;/code&gt; 메서드에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;ESHandler&lt;/code&gt; 인스턴스를 만들고 포매터와 프로세서를 추가한 후, &lt;code class=&quot;highlighter-rouge&quot;&gt;Monolog&lt;/code&gt; 인스턴스에 추가한다. 몇 가지 예제를 더 추가했는데 인라인 주석을 달아 두었다.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// app/Providers/CustomLogProvider.php
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App\Providers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App\LogHandlers\ESHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Elasticsearch\ClientBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Illuminate\Support\ServiceProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Monolog\Formatter\NormalizerFormatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Monolog\Processor\WebProcessor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CustomLogProvider&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ServiceProvider&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;boot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 라라벨이 부팅하면서 서비스 컨테이너에 이미 등록해놓은 Monolog 인스턴스를 가져온다.
&lt;/span&gt;        &lt;span class=&quot;nv&quot;&gt;$monolog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'log'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMonolog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;// Elastic Search REST 클라이언트 인스턴스를 만든다.
&lt;/span&gt;        &lt;span class=&quot;nv&quot;&gt;$esClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ClientBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;// Monolog에 추가할 Elastic Search 핸들러 인스턴스를 만든다.
&lt;/span&gt;        &lt;span class=&quot;nv&quot;&gt;$esHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ESHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$esClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;// NormalizerFormatter는 라이브러리에 내장되어 있다.
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// Monolog 메서드의 인자인 $message, $context 값을 정규화한다.
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// 정규화란 데이터 타입을 판단하고 적졀한 형태로 가공하는 것을 말한다.
&lt;/span&gt;        &lt;span class=&quot;nv&quot;&gt;$esHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setFormatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NormalizerFormatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Y-m-d\TH:i:s.uP'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;// WebProcessor는 HTTP 요청에서 url, ip, http_method, referrer 등의 
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// 값을 추출하고 로그 메시지에 추가하는 일을 한다.
&lt;/span&gt;        &lt;span class=&quot;nv&quot;&gt;$esHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pushProcessor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;WebProcessor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;// Monolog 라이브러리에 기본 포함된 프로세서가 아닌 정말 정말 커스컴 프로세서를 추가해서
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// 로깅할 데이터를 더 추가한다. 여기서는 애플리케이션 이름, 버전, HTTP 요청을 구분할 수 있는 Hash 값을 추가했다.
&lt;/span&gt;        &lt;span class=&quot;nv&quot;&gt;$esHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pushProcessor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'extra'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'app_name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'app.name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'extra'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'app_version'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'APP_VERSION'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'extra'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'fingerprint'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fingerprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;// Elastic Search 핸들러를 Monolog에 추가했다.
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// Monolog는 핸들러를 쌓아 두었다가, 하나씩 순차적으로 실행한다.
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// 즉, 라라벨이 기본으로 생성한 StreamHanlder(파일 로그)를 실행하고, 방금 만든 ESHandler도 실행한다.
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// 이미 생성된 인스턴스의 속성을 변경하는 것이므로 return할 필요 없다.
&lt;/span&gt;        &lt;span class=&quot;nv&quot;&gt;$monolog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pushHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$esHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;이제 &lt;code class=&quot;highlighter-rouge&quot;&gt;ESHandler&lt;/code&gt;를 만들 차례인데, Elastic Search API 문서를 참고해야 한다. 다음 코드 블록에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;write&lt;/code&gt; 메서드는 부모 클래스에서 구현을 강제한 메서드이며, 메서드 본문은 Elastic Search PHP 클라이언트의 사용법을 참고한 것이다.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// app/LogHandlers/ESHandler.php
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App\LogHandlers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Elasticsearch\Client&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ESClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Monolog\Handler\AbstractProcessingHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Monolog\Logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ESHandler&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AbstractProcessingHandler&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$esClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ESClient&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$esClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$level&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DEBUG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$bubble&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$bubble&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;esClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$esClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$record&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'refresh'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'body'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
                    &lt;span class=&quot;s1&quot;&gt;'index'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
                        &lt;span class=&quot;s1&quot;&gt;'_index'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'monolog'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;s1&quot;&gt;'_type'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'app.name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'formatted'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;esClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bulk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-1&quot;&gt;3.4. 서비스 프로바이더 등록 및 테스트&lt;/h3&gt;

&lt;p&gt;라라벨 프로젝트에서 서비스 프로바이더를 등록하는 일반적인 방법이다.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// config/app.php
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;'providers'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;        &lt;span class=&quot;nx&quot;&gt;App\Providers\CustomLogProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;라우트 정의 파일에서 로그 쓰는 부분을 좀 더 단순히 고쳤다.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// web/routes.php
&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello Monolog&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bar'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'welcome'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;아래 그림은 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:9200/monolog/Laravel/_search?size=100&amp;amp;sort=datetime:desc&lt;/code&gt;로 요청했을 때의 출력 결과다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016-12-03-img-03.png&quot;&gt;&lt;img src=&quot;/images/2016-12-03-img-03.png&quot; alt=&quot;Elastic Search에 적재된 로그&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;라라벨의 로그 저장소(파일)에도 잘 기록되었나 확인해 보자.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# storage/logs/laravel.log&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2016-12-03 10:36:35] local.DEBUG: Hello Monolog &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-2&quot;&gt;4. 결론&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Monolog는 PHP 커뮤니티 규칙을 따르는 로거&lt;/strong&gt;로서, 핸들러, 포매터, 프로세서 등의 기능을 이용해서, 애플리케이션 로깅의 자유도와 확장성을 제공한다. 본문에서 봤다시피 &lt;strong&gt;핸들러를 계속 스태킹(stacking)하여 여러 가지 방법으로 로그를 처리&lt;/strong&gt;할 수 있다. 가령 이 글의 예제처럼 파일에도 쓰고, Elastic Search에도 쓰고, 덧붙여서 &lt;code class=&quot;highlighter-rouge&quot;&gt;stdout&lt;/code&gt; 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;stderr&lt;/code&gt;로도 출력하고 싶다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;ErrorLogHandler&lt;/code&gt;를 추가하면 된다. 아래처럼 말이다.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// app/Providers/CustomLogProvider.php
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CustomLogProvider&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ServiceProvider&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;boot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;        &lt;span class=&quot;nv&quot;&gt;$errorLogHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;\Monolog\Handler\ErrorLogHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$monolog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pushHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$errorLogHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Note&lt;/code&gt;&lt;/strong&gt; Docker 컨테이너를 중지하려면 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker stop es50&lt;/code&gt; 명령을 수행한다. &lt;code class=&quot;highlighter-rouge&quot;&gt;docker rm es50&lt;/code&gt; 명령으로 이미 만든 컨테이너를 완전히 삭제하지 않았다면 다음 번 실행할 때는 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker start es50&lt;/code&gt; 명령으로 간단히 시작할 수 있다. Elastic Search는 꽤 무거운 서비스라 부팅하는데 10초 정도 걸릴 수 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;라라벨 https://laravel.com &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;Elastic Search https://www.elastic.co/kr/ &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;Docker https://www.docker.com/ &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 03 Dec 2016 00:00:00 +0900</pubDate>
        <link>http://blog.appkr.kr/work-n-play/php-application-logging-to-elasticsearch-using-monolog/</link>
        <guid isPermaLink="true">http://blog.appkr.kr/work-n-play/php-application-logging-to-elasticsearch-using-monolog/</guid>
        
        <category>개발자</category>
        
        <category>PHP</category>
        
        <category>laravel</category>
        
        
        <category>work-n-play</category>
        
      </item>
    
      <item>
        <title>[광고 같은 광고 아닌 알짜 정보] '라라벨로 배우는 실전 PHP 웹 프로그래밍' 출간 안내</title>
        <description>&lt;p&gt;제가 집필한 책이 어제 출간되었습니다. &lt;strong&gt;웹 프로그래밍&lt;/strong&gt;을 다룹니다. 웹 프로그래밍을 위한 도구로는 &lt;strong&gt;PHP 언어로 작성된 라라벨 프레임워크&lt;/strong&gt;를 사용합니다.&lt;/p&gt;

&lt;p&gt;2016년 초에 완성하고 깃허브에 공개한 &lt;strong&gt;&lt;a href=&quot;https://github.com/appkr/l5essential&quot;&gt;무료 온라인 강의&lt;/a&gt;를 토대로 제이펍 출판사에 계신 프로페셔널들의 도움을 받아 비문을 고치고 부족한 설명을 보충&lt;/strong&gt;하였습니다. 게다가 생활 코딩 오프라인 수업에 조교로 자원 봉사(5회?), 8시간 또는 14시간 짜리 라라벨 입문 강의(각 4회씩 총 8회) 등을 통해 입문자와 예비 독자들을 만나며, 여러분들이 어려워하거나 실수하기 쉬운 내용을 캐치하고 책의 내용과 구성에 반영했습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://cfile2.uf.tistory.com/image/261326505829771C18CBB0&quot;&gt;&lt;img src=&quot;http://cfile2.uf.tistory.com/image/261326505829771C18CBB0&quot; alt=&quot;라라벨로 배우는 실전 PHP 웹 프로그래밍&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;프로그래밍을 생짜 처음 하신다고요?&lt;/h4&gt;

&lt;p&gt;생활코딩의 &lt;a href=&quot;https://opentutorials.org/course/1688&quot;&gt;웹 애플리케이션 만들기&lt;/a&gt; 정도만 공부하신 수준이면 이 책을 시작하는데 무리가 없습니다.&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;임베디드, 응용, 시스템 프로그래밍을 하시거나/하셨는데, 필요에 의해 웹 프로그래밍을 하셔야 한다고요?&lt;/h4&gt;

&lt;p&gt;이 책으로 시작하시는 당신은 행운아입니다.&lt;/p&gt;

&lt;p&gt;이 곳에서 구매할 수 있습니다. &lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;amp;mallGb=KOR&amp;amp;barcode=9791185890623&quot;&gt;교보문고&lt;/a&gt;, &lt;a href=&quot;http://www.bandinlunis.com/front/product/detailProduct.do?prodId=4011008&quot;&gt;반디앤루니스&lt;/a&gt;, &lt;a href=&quot;http://www.aladin.co.kr/shop/wproduct.aspx?ItemId=96495117&quot;&gt;알라딘&lt;/a&gt;, &lt;a href=&quot;http://www.yes24.com/24/goods/33320248&quot;&gt;yes24&lt;/a&gt;, &lt;a href=&quot;http://book.interpark.com/product/BookDisplay.do?_method=detail&amp;amp;sc.shopNo=0000400000&amp;amp;sc.prdNo=261904099&quot;&gt;인터파크&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;개발자들은 코드를 보면 코드를 짠 사람의 실력과 성격을 어느 정도 가늠할 수 있다는 얘기를 들었습니다. 마찬가지로, 저희들은 원고를 보고 지은이의 내공과 성격을 어느 정도 유추하곤 합니다. 김주원 님의 원고를 처음 받았을 때의 느낌은 ‘참 꼼꼼하면서 정갈한 분이시겠구나’였습니다. 책 전체의 뼈대와 같은 차례도 탄탄하고, 글을 풀어가는 느낌도 군더더기가 없어서 좋았습니다. 물론, 원고를 받고 책이 나오기까지 많은 분의 도움으로 수정 및 보완 작업을 거치긴 했지만요.&lt;/p&gt;
  &lt;footer&gt;제이펍 블로그 포스트 중에서 (http://jpub.tistory.com/622)&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;안내&lt;/code&gt;&lt;/strong&gt; 매월 첫째 주 수요일에 열리는 &lt;a href=&quot;http://www.modernpug.org/&quot;&gt;모던퍼그&lt;/a&gt; 정기 모임에 책을 들고 참여하시면 저자 싸인해 드리겠습니다.&lt;/p&gt;

&lt;!--more--&gt;
&lt;div class=&quot;spacer&quot;&gt;• • •&lt;/div&gt;

&lt;h2 id=&quot;section-2&quot;&gt;1. 라라벨이 뭐길래?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://laravel.com/&quot;&gt;&lt;img src=&quot;/images/2016-11-27-img-01.png&quot; alt=&quot;라라벨 홈페이지&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;온오프믹스 오프라인 강의 모집 공고에 썼던 내용을 그대로 옮겨 왔습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;라라벨은 PHP 언어로 만든 풀 스택 웹 프레임워크&lt;/strong&gt;입니다. 루비하면 레일즈와 시나트라, 파이썬하면 장고와 플라스크가 대표적인 웹 프레임워크로 자리매김하고 있듯이, 지금은 PHP하면 라라벨로 통할 정도로 인기있는 도구입니다. 태어난 지 5년됐고 현재 최신 버전은 5.3입니다. 지난 5년 동안 16,000개의 이슈와 20,000개의 커밋이 발생했을 정도로 활동이 활발합니다. 오늘 기준으로 깃허브 전체 인기도 41위를 차지하고 있습니다&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. 국내에서도 라라벨을 채택하는 회사와 프로젝트가 최근에 부쩍 늘고 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;라라벨을 장착하면&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;MVC로 깔끔하게 떨어지는 구조의 서비스를 개발할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;남들은 다 한다는 ‘모던’ 개발 방법론과 서비스 아키텍처가 뭔지에 대해 서서히 눈뜨게 됩니다.&lt;/li&gt;
  &lt;li&gt;객체 지향 프로그래밍의 디자인 패턴, SOLID를 이해하기 시작합니다. 이쯤되면 더 나은 코드에 대한 갈망이 용솟음 칩니다.&lt;/li&gt;
  &lt;li&gt;레벨 업 → 더 좋은 회사 취업, 이직의 자유도 → 이력서에 ‘라라벨’ 한 줄로 러브콜이 쇄도하는 선순환 고리에 들어섭니다.&lt;/li&gt;
  &lt;li&gt;결국은 만렙 웹 개발자가 되고, 다른 언어와 프레임워크를 친구 자취방처럼 넘나들 수 있는 경지에 이릅니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;한 마디로 라라벨은 모범 웹 개발 방법론의 결정체입니다. 라라벨에서 배운 라우팅, 템플릿, 마이그레이션, ORM, 의존성 관리, 객체 지향 설계등의 지식은 다른 프레임워크를 시작할 때도 그대로 이식할 수 있습니다. 반대로 다른 웹 프레임워크를 해 보신 분이 라라벨을 시작하신다면 이미 절반은 알고 계신거나 마찬가지입니다.&lt;/p&gt;

&lt;h2 id=&quot;php-&quot;&gt;2. PHP가 뭐길래?&lt;/h2&gt;

&lt;p&gt;PHP는 20년이 넘는 역사를 가지고 있습니다. 현존하는 모든 컴퓨터 언어를 놓고 봤을 때 전세계적으로 7위 정도의 인기를 누리고 있습니다&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;스스로를 범용 언어라고 포지셔닝하려하지만, 사실은 태생부터가 &lt;strong&gt;웹을 위한 언어&lt;/strong&gt;였습니다(시작은 C로 짠 템플릿 엔진 수준). 책 머리글에 PHP의 간략한 역사를 포함하고 있으니 참고해주세요. 그래서 웹만 이야기하면 PHP의 인기도와 채택율은 완전 달라집니다. 통계에 따르면 전세계 웹 트래픽의 80% 이상을 PHP 언어가 서브하는 것으로 알려져있습니다&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;. 페이스북과 워드프레스의 영향이 크긴하지만 엄청난 수치입니다.&lt;/p&gt;

&lt;p&gt;제가 현재 속한 회사도 안정성과 확장성이 필요한 핵심 서비스는 자바나 스칼라를 쓰지만, 고객과 인터페이스가 발생하고 자주 변하는 부분(API 엔드포인트)은 모두 PHP로 처리하고 있습니다. 즉, 웹 브라우저, iOS/Andorid 애플리케이션을 비롯한 웹 클라이언트의 80%가 PHP로 짠 서버에 접속한다는 의미입니다.&lt;/p&gt;

&lt;h4 id=&quot;section-4&quot;&gt;그러나,&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;PHP 문법이나 동작의 비일관성&lt;/li&gt;
  &lt;li&gt;테스트와 유지보수가 불가한 난잡한 프레임워크(워드프레스)&lt;/li&gt;
  &lt;li&gt;현업 개발자나 웹 에이전시들의 나쁜 코딩 습관&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;때문에 PHP는 개발자들로부터 많은 비난을 받아왔습니다. &lt;a href=&quot;http://noraesae.github.io/PHP-a-fractal-of-bad-design-kr/&quot;&gt;‘PHP:잘못된 디자인의 프랙탈’&lt;/a&gt; 문서를 보면 PHP를 암덩어리라고 느낄지도 모릅니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016-11-27-img-02.png&quot;&gt;&lt;img src=&quot;/images/2016-11-27-img-02.png&quot; alt=&quot;PHP 성능&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이런 이유로 한 동안 PHP를 쳐다보지도 않았다면, 지금은 다시 한 번 쳐다보세요. 웹 서비스에서는 다른 언어 대비 엄청난 성능을 보이고&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;, 비일관성이나 코딩 습관은 PSR(PHP Standard Recommendation, Like JSR)과 라라벨과 같은 프레임워크가 어느 정도 가이드해줍니다.&lt;/p&gt;

&lt;div class=&quot;spacer&quot;&gt;• • •&lt;/div&gt;

&lt;p&gt;원고를 탈고하고 책이 출간되는 사이에 라라벨 버전업이 한 번 있었고, 따라서 전체 예제 코드를 새 버전에 맞게 전부 다시 짰습니다. 뿐만아니라 이 책이 세상에 태어나지 못할 수도 있는 여러 가지 위기 상황을 겪었습니다. 그래서 책을 받아 든 순간 만감이 교차했지요.&lt;/p&gt;

&lt;p&gt;저는 라라벨이 국내에 확산되고, 그로 인해 자연스럽게 국내 PHP 및 웹 개발 생태계가 발전하기를 기대하며 이 책을 썼습니다. 국내 시장이 작은 이유도 있겠지만, 이번에 책을 쓰면서 출판 생태계를 알고 보니, 저자들이 책을 쓸 동기가 전혀 없겠다는 사실을 깨달았습니다. 사실 초판이 다 팔려도 저자들이 받는 인세는 그들이 들인 시간과 에너지에 비해 정말 작거든요.&lt;/p&gt;

&lt;p&gt;우리는 정보 과잉의 시대에 살고 있습니다. 새로운 기술을 배울 수 있는 채널을 너무나도 많습니다. 하지만 웹 검색을 통해서 얻는 것은 단편적인 문제 해결 방법일 뿐입니다. 완전하게 이해하기에는 책보다 더 좋은 채널이 없습니다. 제 자신도 책을 잘 안 사는 편입니다만, 더 많은 잠재 저자들이 자신의 오덕함을 사람들과 나눌 수 있도록 도와 주세요. 앞으로 책을 또 쓰는 무모한 짓은 하지 않으려고 다짐하는데, 옆에서 ‘한 번이 어렵지~’라며 바람을 넣네요. 후후.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;https://github-ranking.com/repositories, Vue.js 7위(놀라워라~), 레일즈 10위, 익스프레스 31위, 장고 53위 &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;http://www.tiobe.com/tiobe-index/ &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;https://w3techs.com/technologies/overview/programming_language/all &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;http://benchmarksgame.alioth.debian.org/, 테이블 헤더의 spectral-norm 등은 테스트 벡터 이름, secs는 실행 시간, KB/gz는 소스코드 크기, cpu는 CPU 사용 시간, 측정 값은 모두 4회 테스트한 결과의 평균치 &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 27 Nov 2016 00:00:00 +0900</pubDate>
        <link>http://blog.appkr.kr/work-n-play/laravel-paper-book-published/</link>
        <guid isPermaLink="true">http://blog.appkr.kr/work-n-play/laravel-paper-book-published/</guid>
        
        <category>개발자</category>
        
        <category>laravel</category>
        
        
        <category>work-n-play</category>
        
      </item>
    
      <item>
        <title>라라벨-루멘-PHP 날코딩 성능 비교</title>
        <description>&lt;p&gt;라라벨과 루멘, PHP 날코딩간의 성능 비교를 해 보신 분들이 없는 것 같아 직접 해 봤다. &lt;strong&gt;결론은 뻔하지만, PHP 날코딩이 가장 빠르고, 메모리 사용량도 적다. 프레임워크를 써야 이유는 다른 곳에 있으니, 이 실험 결과만 보고 오해나 곡해하지 마시기 바란다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;주의&lt;/code&gt;&lt;/strong&gt; 이 실험은 다른 PHP 프레임워크 또는 다른 플랫폼의 프레임워크와 라라벨 또는 루멘의 성능을 비교하기 위한 것이 아니다(다른 PHP 프레임워크와의 비교는 &lt;a href=&quot;http://taylorotwell.com/how-lumen-is-benchmarked/&quot;&gt;“How Lumen Is Benchmarked”&lt;/a&gt;를 참고하라). &lt;strong&gt;이 실험은 라라벨과 루멘의 기본적인 속도와 필요 리소스를 측정해 봄으로써, PHP 날코딩의 성능과 프레임워크가 제공하는 이점 간의 트레이드오프(trade-off)에 대한 의사 결정 포인트를 제공하기 위한 목적으로 수행하였다.&lt;/strong&gt;&lt;/p&gt;

&lt;!--more--&gt;
&lt;div class=&quot;spacer&quot;&gt;• • •&lt;/div&gt;

&lt;h2 id=&quot;section&quot;&gt;1. 실험 환경&lt;/h2&gt;

&lt;p&gt;다음 머신에서 실험했다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;macOS Sierra 10.12.1&lt;/li&gt;
  &lt;li&gt;2.7 GHz Intel Core i5&lt;/li&gt;
  &lt;li&gt;8GB 1867 MHz DDR3&lt;/li&gt;
  &lt;li&gt;SSD&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;사용한 소프트웨어 버전은 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PHP 7.0.11 with Xdebug, without OPcache&lt;/li&gt;
  &lt;li&gt;MySQL 5.7.15&lt;/li&gt;
  &lt;li&gt;Laravel Valet 1.1.22 (로컬 웹 서버)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;2. 실험 방법&lt;/h2&gt;

&lt;p&gt;다음과 같이 실험했다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;웹 브라우저에서 테스트를 위한 URL 엔드포인트를 각 시나리오별로 총 5회 방문했고, 아웃라이어 2개는 버리고 남은 3개만 이용했다.&lt;/li&gt;
  &lt;li&gt;해당 엔드포인트는 MySQL 데이터베이스에서 2개의 레코드를 가져와서 HTTP 응답을 내 보내는 일을 하는데, HTTP 응답을 반환하기 직전에 현재까지의 1) 실행 시간, 2) 메모리 사용량을 로그에 기록하였다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;mysql--&quot;&gt;2.1. MySQL 테이블 레코드&lt;/h3&gt;

&lt;p&gt;MySQL에 저장된 2개의 레코드를 팅커(라라벨 내장 REPL) 콘솔에서 확인했봤다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017-11-01-img-02.png&quot;&gt;&lt;img src=&quot;/images/2016-11-07-img-01.png&quot; alt=&quot;Test Vector&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;2.2. 테스트 코드&lt;/h3&gt;

&lt;p&gt;라라벨 기준으로 성능 측정 코드는 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// index.php
&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'LARAVEL_START'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;microtime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// routes/web.php
&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$todos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App\Todo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'metric'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;performance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$todos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;performance()&lt;/code&gt; 함수는 이렇게 생겼다. 할당된 메모리 양이 아니라, 사용한 메모리 양으로 측정했다(&lt;a href=&quot;http://php.net/manual/en/function.memory-get-usage.php&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;memory_get_usage()&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// app/helpers.php
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;performance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;implode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'처리시간(ms): '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;microtime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LARAVEL_START&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'메모리(MB) : '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;memory_get_usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'CPU(%): '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sys_getloadavg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-3&quot;&gt;3. 실험 결과&lt;/h2&gt;

&lt;h3 id=&quot;section-4&quot;&gt;3.1. 라라벨&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;laravel/framework 5.3.19&lt;/code&gt; 버전을 이용했다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;처리시간(ms)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;메모리(MB)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;48.988103867&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;7.369736000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;43.443918228&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;7.369736000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;43.838024139&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;7.369736000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;평균&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;45.343995094&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;7.369736000&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;section-5&quot;&gt;3.2. 루멘&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;laravel/lumen-framework 5.3.1&lt;/code&gt; 버전을 이용했다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;처리시간(ms)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;메모리(MB)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;23.682117462&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4.800936000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;23.600816727&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4.800936000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;25.380134583&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4.800936000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;평균&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;24.163961411&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4.800936000&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;php-&quot;&gt;3.3. PHP 날코딩&lt;/h3&gt;

&lt;p&gt;날 코딩이라 하지만, 컴포저와 PDO를 사용하고 MVC 구조로 짠 코드다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;처리시간(ms)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;메모리(MB)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3.256082535&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.916032000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4.014015198&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.916032000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3.664970398&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.916032000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;평균&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3.560066223&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.916032000&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;section-6&quot;&gt;4. 결론&lt;/h2&gt;

&lt;p&gt;속도나 메모리 사용량 면에서 PHP 날코딩이 확실히 유리하다. 이 테스트 기준으로 2GB 메모리 머신에서 PHP 날코딩이 1초당 610,649개의 요청을 처리할 수 있다면(2000/0.92 * 1000/3.56), 라라벨은 5,895개의 요청을 처리할 수 있다(2000/7.37 * 1000/45.34).&lt;/p&gt;

&lt;p&gt;물론, 현실 세계에서 이런 간단한 서비스는 없으므로, 한 요청당 수십 MB의 메모리를 사용하고 수백 ms의 처리 시간이 걸린다. 운영 환경에서는 아파치나 엔진엑스를 사용하고, Xdebug를 끄고, OPcache를 켜서 성능을 향상시킬 수 있다.&lt;/p&gt;

&lt;p&gt;프레임워크의 장점으로 생산성, 안정성, 보안을 들 수 있다. 수퍼 개발자가 있어 열 명이 해야 할일을 혼자서 처리하고, 해킹에 뚫릴 일이 전혀 없고 유지보수 하기도 편리한 자체 서비스 프레임워크를 직접 개발할 수 있다면, 라라벨과 루멘과 같은 프레임워크를 쓸 필요 없다.&lt;/p&gt;

&lt;p&gt;경험적으로 수퍼 개발자에 의존하는 서비스 운영은 절대 바람직하지 않다. 수퍼 개발자가 자신의 지위를 악용하거나, 아프거나 퇴사라도 하는 순간 서비스는 한 순간에 무너진다.&lt;/p&gt;

&lt;p&gt;컴퓨터의 성능은 좋아졌고, 가격은 싸져서 스케일 업(scale-up)이 쉬워졌다. 또, 쉽게 스케일 아웃(scale-out)할 수 있는 클라우드도 널렸다. &lt;strong&gt;개발자 한 명 채용하는 비용보다 컴퓨터 비용이 훨씬 싸다는 점을 잊지 말자. 좋은 서버 쓰고 안정적인 코드를 빨리 개발하는 것이 더 현명하다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;반면 서비스가 궤도에 올라 사용자가 늘고 1ms와 1KB라도 쥐어 짜야 하는 상황이라면 자체 프레임워크 개발을 고려해볼 만한다. 물론 성능이 더 좋은 플랫폼으로 갈아 타는 방법도 있다. &lt;strong&gt;서비스를 살리기 위해 스택을 버려야지, 스택을 살리기 위해 서비스를 버리는 어리석음을 범하지 말라&lt;/strong&gt;. 라라벨이나 루멘은 범용 프레임워크이므로 최적화가 필요한 초대형 서비스에는 적합하지 않다는 생각이 든다.&lt;/p&gt;
</description>
        <pubDate>Mon, 07 Nov 2016 00:00:00 +0900</pubDate>
        <link>http://blog.appkr.kr/work-n-play/performance-comparison-between-laravel-lumen-homemade/</link>
        <guid isPermaLink="true">http://blog.appkr.kr/work-n-play/performance-comparison-between-laravel-lumen-homemade/</guid>
        
        <category>개발자</category>
        
        <category>laravel</category>
        
        <category>lumen</category>
        
        
        <category>work-n-play</category>
        
      </item>
    
      <item>
        <title>RPC - Apache Thrift 입문 1부</title>
        <description>&lt;p&gt;RPC(Remote Procedure Call)와 REST(REpresentational State Transfer)는 원격 API를 호출하는 대표적인 방법이다.&lt;/p&gt;

&lt;p&gt;REST가 API를 통해 원격 서버에 있는 리소스(모델 또는 데이터)에 대한 상태를 주고 받는다고 생각하는 반면, RPC는 원격 서버의 함수를 호출해서 결과를 얻는다고 생각한다. 그래서 REST에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;GET /posts/{id}&lt;/code&gt; 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;POST /posts&lt;/code&gt;와 같이 원격 서버의 리소스에 접근할 수 있는 직접적인 통로를 제공하는 반면, RPC에서는 URL 엔드포인트는 그냥 통로일 뿐 원격 서버와 클라이언트가 공통으로 사용하는 라아브러리를 시용해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;$client-&amp;gt;find($id)&lt;/code&gt;와 같이 통신한다.&lt;/p&gt;

&lt;p&gt;이 포스트에서는 PHP 프로젝트에서 Apache Thrift RPC 시스템을 사용하는 방법을 설명한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CAVEAT&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;게시판 서비스를 만드는데 RPC를 쓰지 말라! 속도나 강건함을 얻는 대신 디버깅의 편리함을 포기해야 한다. 클라이언트가 멀티 플랫폼으로 구성되어 있어 서버와 주고 받는 메시지를 엄격하게 규정해야 하고, 외부에 공개하지 않는 API일 때만 고려해 볼 것을 권장한다.&lt;/strong&gt;&lt;/p&gt;

&lt;!--more--&gt;
&lt;div class=&quot;spacer&quot;&gt;• • •&lt;/div&gt;

&lt;h2 id=&quot;section&quot;&gt;1. 왜?&lt;/h2&gt;

&lt;p&gt;웹 API는 클라이언트와 서버가 메시지를 주고 받기 위한 약속이다. 클라이언트가 HTTP 프로토콜을 통해 직렬화된 데이터를 보내면 서버는 받은 데이터를 역직렬화해서 클라이언트의 요청을 이해한다. 서버가 클라이언트의 요청을 처리하는 과정에서 데이터베이스에 접근하고, 데이터베이스에서 조회한 데이터를 가공해서 JSON/XML 형태로 직렬화해서 다시 HTTP 프로토콜로 응답한다. 이 모든 과정은 순조롭다. 그런데 우리가 개발하는 API는 구글, 페이스북, 깃허브등이 하는 오픈 API가 아니라, 대부분이 자체 서비스를 위한 내부 API라는 점이다.&lt;/p&gt;

&lt;p&gt;HTTP + JSON/XML은 검증된 공식이다. 자바냐, 파이썬이냐 등등 플랫폼 의존성도 신경 쓸 필요 없는 만국 공용어 같은 녀석이라 볼 수 있다. 그러나, &lt;strong&gt;JSON은 메시지 구조에 대한 정의가 없고, XML은 무겁다. 게다가 클라이언트와 서버 모두가 이해할 수 있는 API 문서를 작성해야 하고, 양쪽 코드를 모두 관리해야 한다&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;RPC 시스템에서는 JSON 뿐만 아니라, 바이너리 데이터도 주고 받을 수 있다. 특히 바이너리 데이터는 메시지 크기가 작아, 서버나 클라이언트의 메모리 공간을 절약할 뿐더러 전송 속도가 매우 빠르다. 바이너리 데이터는 JSON (역)직렬화에 비해 특히 클라이언트 측에서 월등한 성능을 보인다. 또, 앞서 지적한 메시지 구조나 파싱 비용에 대한 이슈도 없다.&lt;/p&gt;

&lt;p&gt;물론 새로운 것을 배워야 하고 메시지 패킷을 직접 정의해야 하는 등의 번거로움이 있다. 익숙해지기 전까지는 개발자들에겐 이 모든 것이 헬(hell)이고, 생성성은 떨어질 수 밖에 없다.&lt;/p&gt;

&lt;h2 id=&quot;rpc-&quot;&gt;2. 다른 RPC 프레임워크&lt;/h2&gt;

&lt;p&gt;Apache Thrift 외에도 선택지는 더 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://developers.google.com/protocol-buffers/&quot;&gt;프로토콜 버퍼(Protocol Buffers)&lt;/a&gt;&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;구글이 개발&lt;/li&gt;
      &lt;li&gt;2008년에 BSD 라이선스로 오픈 소스&lt;/li&gt;
      &lt;li&gt;구글 운영 환경에서 사용. 우리가 검색 요청을 할 때마다 프로토콜 버퍼가 작동함.&lt;/li&gt;
      &lt;li&gt;공식적으로 C++/Java/Python/Javascript만 지원하지만, 커뮤니티에서 제공하는 다른 언어용 프로젝트도 있음.&lt;/li&gt;
      &lt;li&gt;문서가 훌륭하고, 커뮤니티 활동도 활발함.&lt;/li&gt;
      &lt;li&gt;구글, ActiveMQ, Netty 등에서 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://thrift.apache.org/&quot;&gt;Apache Thrift&lt;/a&gt;&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;x-구글러가 페이스북에 입사하여 많듦.&lt;/li&gt;
      &lt;li&gt;2007년에 Apache 라이선스로 오픈 소스&lt;/li&gt;
      &lt;li&gt;현존하는 RPC 스택 중 가장 많은 언어를 공식적으로 지원함.&lt;/li&gt;
      &lt;li&gt;RPC 콜을 위한 풀 스택을 지원하므로 트랜스포트를 직접 쓸 필요가 없으며, 심지어 클라이언트/서버 코드도 생성해 줌.&lt;/li&gt;
      &lt;li&gt;문서는 부실하고, 버전업 속도가 상대적으로 느린 편임.&lt;/li&gt;
      &lt;li&gt;페이스북, 에버노트, LastFM 등에서 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;기타
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://avro.apache.org/&quot;&gt;Apache AVRO&lt;/a&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;a href=&quot;http://www.grpc.io/&quot;&gt;GRPC&lt;/a&gt;&lt;/strong&gt; 외&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;3. 워크플로우&lt;/h2&gt;

&lt;p&gt;REST든 RPC든 서버와 클라이언트간의 약속을 정하는 일이 먼저다. 대신 RPC는 몇 가지 과정을 더 거쳐야 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;서버-클라이언트 간의 약속 만들기(메시지 형식 및 서비스 인터페이스). RPC 프레임워크들은 인터페이스를 정의하기 위한 IDL(Interface Definition Language)을 제공한다.&lt;/li&gt;
  &lt;li&gt;IDL로 정의한 인터페이스 코드를 RPC 프레임워크에서 제공하는 툴(컴파일러)를 이용해서 각 플랫폼(언어)에서 사용할 수있는 보일러 플레이트 코드로 컴파일한다.&lt;/li&gt;
  &lt;li&gt;생성된 보일러 플레이트 코드를 프로젝트로 가져와서 서버 및 클라이언트 애플리케이션 개발한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이상에서 언급한 워크플로우에 따라 Apache Thrift를 이용해서 PHP 서버 프로젝트를 만드는 법을 설명한다.&lt;/p&gt;

&lt;h2 id=&quot;idl-&quot;&gt;4. 약속(IDL) 작성&lt;/h2&gt;

&lt;p&gt;IDL을 설명하는 Thrift 공식 문서는 많이 부실하다. 필자가 찾은 가이드 중 &lt;a href=&quot;https://diwakergupta.github.io/thrift-missing-guide/&quot;&gt;https://diwakergupta.github.io/thrift-missing-guide/&lt;/a&gt;가 가장 좋았다.&lt;/p&gt;

&lt;p&gt;이 예졔 프로젝트(&lt;code class=&quot;highlighter-rouge&quot;&gt;thrift-example-idl&lt;/code&gt;)는 IDL 문법 중 일부만 사용하지만, 진입장벽을 낮춰 주는 좋은 시작점이 될 것이라고 확신하다. IDL 코드 안에 주석으로 설명을 포함했다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// https://github.com/appkr/thrift-example-idl/blob/master/src/Post.thrift&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Errors.thrift&quot;&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;// Errors.thrfit 파일을 임포트 한다.&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;php&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Appkr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Thrift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Post&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// PHP용 네임스페이스를 정의한다.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;appkr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thrift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;post&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// 다른 언어도 정의할 수 있다는 것을 보여 주기 위해서&lt;/span&gt;
                                        &lt;span class=&quot;c1&quot;&gt;// 예제 프로젝트에서 쓰지는 않지만, 자바 패키지도 정의했다.&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * Post 엔티티
 */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;                           &lt;span class=&quot;c1&quot;&gt;// Post 메시지 타입을 정의한다. &lt;/span&gt;
                                        &lt;span class=&quot;c1&quot;&gt;// 모델이라 볼 수도 있고, 필요한 데이터만 간추린 DTO라 볼 수도 있다.&lt;/span&gt;
                                        &lt;span class=&quot;c1&quot;&gt;// PHP에서 연관 배열을 생성자의 인자로 넘겨서 Thrift 객체를 생성한다.&lt;/span&gt;
                                        &lt;span class=&quot;c1&quot;&gt;// 예) $post= new Post(['id'=&amp;gt;1, 'title'=&amp;gt;'foo', ...]);&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/** 기본 키 */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;// 번호는 클라인트-서버간 통신 및 버전간 호환성 유지를 위해 꼭 필요하다.&lt;/span&gt;
                                        &lt;span class=&quot;c1&quot;&gt;// 꼭 필요한 필드라면 required, 그렇지 않다면 optional 키워드를 쓴다.&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/** 포스트 제목 */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/** 포스트 본문 */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/** 포스트 최초 생성 시각 */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;created_at&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/** 포스트 최종 수정 시각 */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updated_at&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * Post 엔티티의 필드들
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PostField&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;                        &lt;span class=&quot;c1&quot;&gt;// enum 필드는 PHP 코드에서 클래스 상수로 변환된다.&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/** 제목 필드 */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TITLE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;                          &lt;span class=&quot;c1&quot;&gt;// 메시지 정의할 때는 콜론(:), enum에서는 등호(=)를 사용한다. 주의하자.&lt;/span&gt;
                                        &lt;span class=&quot;c1&quot;&gt;// enum의 값으로 연속된 정수를 쓸 필요는 없다. 100, 200, ..도 가능하다.&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/** 본문 필드 */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CONTENT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/** 최초 생성 시각 */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CREATED_AT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/** 최종 수정 시각 */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UPDATED_AT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * 정렬 방향
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SortDirection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/** 오름 차순 */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ASC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/** 내림 차순 */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DESC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * PostCollection 엔티티
 */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PostCollection&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// Thrift가 제공하는 기본 타입 외 커스텀 타입도 정의할 수 있다.&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * 쿼리 필터 엔티티
 */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QueryFilter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/** 검색할 키워드 */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyword&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 기본 값을 할당했다.&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/** 정렬 기준이 되는 필드 */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PostField&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortBy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PostField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CREATED_AT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/** 정렬 방향 */&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SortDirection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortDirection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SortDirection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DESC&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * Post 서비스
 */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PostService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;// 서비스를 정의한다.&lt;/span&gt;
                                        &lt;span class=&quot;c1&quot;&gt;// 여기서 앞서 정의한 struct와 enum을 사용한다.&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/**
     * 포스트 목록을 응답합니다.
     */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PostCollection&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;// 리턴 타입 -&amp;gt; 메서드명 순으로 쓴다.&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QueryFilter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;// 객체형 메서드 인자다.&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;                          &lt;span class=&quot;c1&quot;&gt;// 자바처럼 예외를 메서드 뒤에 정의한다.&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;UserException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                                        &lt;span class=&quot;c1&quot;&gt;// 임포트한 다른 네임스페이스의 메시지 타입을 참조할 때 점(.)을 이용한다.&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SystemException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;systemException&lt;/span&gt;
                                        &lt;span class=&quot;c1&quot;&gt;// 여러 개의 예외를 던진다면 예외 변수 이름을 서로 다르게 사용해야 한다. &lt;/span&gt;
                                        &lt;span class=&quot;c1&quot;&gt;// 가령 여기서 다시 userException을 쓰면 컴파일 에러가 난다.&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * 특정 포스트의 상세 정보를 응답합니다.
     */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;UserException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userException&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SystemException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;systemException&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * 새 포스트를 만듭니다.
     */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;UserException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userException&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SystemException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;systemException&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Post.thrift&lt;/code&gt;에서 참조한 &lt;code class=&quot;highlighter-rouge&quot;&gt;Errors.thrift&lt;/code&gt;는 &lt;a href=&quot;https://github.com/appkr/thrift-example-idl/blob/master/src/Errors.thrift&quot;&gt;예제 프로젝트&lt;/a&gt;에서 찾을 수 있다.&lt;/p&gt;

&lt;p&gt;IDL 예제 프로젝트의 파일 목록은 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/thrift-example-idl/src
├── Errors.thrift
└── Post.thrift
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-2&quot;&gt;5. 컴파일해서 보일러 플레이트 코드 생성&lt;/h2&gt;

&lt;p&gt;Thrift IDL 문법으로 인터페이스 작성이 끝나면 Thrift 컴파일러 바이너리로 보일러 플레이트 코드를 생성한다.&lt;/p&gt;

&lt;p&gt;OS X 컴퓨터에서는 홈브루로 설치할 수 있는데, 이 포스트를 작성 시점의 &lt;code class=&quot;highlighter-rouge&quot;&gt;thrift&lt;/code&gt; 바이너리는 PHP의 PSR4를 지원하지 않는 0.9.3 버전이다. 따라서 Thrift 프로젝트의 &lt;code class=&quot;highlighter-rouge&quot;&gt;dev-master 1.0.0-candidate&lt;/code&gt; 소스를 받아서 컴파일해야하는데 OS X에서는 여간 어려운 일이 아니다. 따라서 &lt;a href=&quot;/files/thrift-osx.gz&quot;&gt;OS X에서 미리 컴파일해 놓은 파일을 여기서 다운로드&lt;/a&gt; 받아 사용할 것을 권장한다. 다운로드 받은 파일의 압축을 풀고 &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/bin&lt;/code&gt; 디렉터리로 옮기고 실행 권한을 설정해 준다.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mv thrift /usr/local/bin/
~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;chmod 755 /usr/local/bin/thrift
~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;thrift --version
&lt;span class=&quot;c&quot;&gt;# Thrift version 1.0.0-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;이제 컴파일해 보자.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/thrift-example-idl
~/thrift-example-idl &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;thrift -r --gen php:server,psr4 src/Post.thrift
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-r&lt;/code&gt;은 인클루드(임포트)한 파일까지도 컴파일하겠다는 의미이고, &lt;code class=&quot;highlighter-rouge&quot;&gt;--gen&lt;/code&gt;은 &lt;code class=&quot;highlighter-rouge&quot;&gt;language:key1[=val1]&lt;/code&gt; 형식으로 쓴다. 가령 IDL로 정의한 인터페이스를 자바 코드로 컴파일한다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;--gen java&lt;/code&gt;처럼 쓰면 된다. 아무런 에러 피드백 없이 명령 수행이 끝났다면 성공한 것이다. 디렉터리 목록으로 컴파일된 결과를 확인해 보자.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/thrift-example-idl
├── gen-php
│   └── Appkr
│       └── Thrift
│           ├── Errors
│           │   ├── ErrorCode.php
│           │   ├── SystemException.php
│           │   └── UserException.php
│           └── Post
│               ├── Post.php
│               ├── PostField.php
│               ├── PostServiceClient.php
│               ├── PostServiceIf.php
│               ├── PostServiceProcessor.php
│               ├── PostService_all_args.php
│               ├── PostService_all_result.php
│               ├── PostService_find_args.php
│               ├── PostService_find_result.php
│               ├── PostService_store_args.php
│               ├── PostService_store_result.php
│               ├── QueryFilter.php
│               └── SortDirection.php
└── src
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gen-php&lt;/code&gt;를 &lt;code class=&quot;highlighter-rouge&quot;&gt;dist-php&lt;/code&gt;로 옮기고,&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/thrift-example-idl &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mv gen-php dist-php
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;PHP 애플리케이션에서 PSR-4 표준으로 오토로드할 수 있도록 &lt;code class=&quot;highlighter-rouge&quot;&gt;composer.json&lt;/code&gt; 파일을 만들었다.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;composer.json&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;appkr/thrift-example-idl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;autoload&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;psr-4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Appkr\\&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dist-php/Appkr&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;thrift-example-idl&lt;/code&gt; 예제 프로젝트에서는 이상의 모든 작업을 &lt;code class=&quot;highlighter-rouge&quot;&gt;Makefile&lt;/code&gt;로 작성해 두었다. 자바 컴파일도 포함하고 있다. 해서 다음 명령으로 이상의 복잡한 작업을 수행할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/thrift-example-idl &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make clean
&lt;span class=&quot;c&quot;&gt;# rm -rf lang/java/build lang/java/post-thrift.jar&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# rm -rf gen-* dist-* docs&lt;/span&gt;

~/thrift-example-idl &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make
&lt;span class=&quot;c&quot;&gt;# rm -rf lang/java/build lang/java/post-thrift.jar&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# rm -rf gen-* dist-* docs&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# thrift -r --gen php:server,psr4 src/Post.thrift&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# thrift -r --gen java src/Post.thrift&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# mkdir -p docs&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# thrift -r --gen html:standalone -out docs src/Post.thrift&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# mv gen-php dist-php&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Makefile&lt;/code&gt;에서는 IDL 문서도 HTML로 생성하고 있는데, 열어보면 아래 그림처럼 생겼다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016-11-04-img-01.png&quot;&gt;&lt;img src=&quot;/images/2016-11-04-img-01.png&quot; alt=&quot;자동 생성된 API 문서&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PHP 및 다른 클라이언트 애플리케이션 프로젝트에서 편하게 사용하기 위해 깃 버전 컨트롤에 올려 두자.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/thrift-example-idl &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-3&quot;&gt;6. 애플리케이션 개발&lt;/h2&gt;

&lt;p&gt;이제 5절에서 생성한 인터페이스를 구현한 PHP 서버 프로젝트를 만들 것이다.&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;6.1. 새 프로젝트 생성&lt;/h3&gt;

&lt;p&gt;새 라라벨 프로젝트를 생성한다(꼭 라라벨일 필요는 없다).&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;composer create-project laravel/laravel thrift-example-project --verbose
&lt;span class=&quot;c&quot;&gt;# Installing laravel/laravel (v5.3.16)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Application key [base64:6+n/jPCRoy+KKH0sozxwkgOY9J96Ez9vXhxX/0Uz+h8=] set successfully.&lt;/span&gt;

~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;thrift-example-project
~/thrift-example-project &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;php artisan --version
&lt;span class=&quot;c&quot;&gt;# Laravel Framework version 5.3.21&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;간단한 프로젝트므로 데이터베이스 드라이버를 SQLite로 쓴다.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# .env&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;DB_CONNECTION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;sqlite
&lt;span class=&quot;c&quot;&gt;#DB_HOST=127.0.0.1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#DB_PORT=3306&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#DB_DATABASE=homestead&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#DB_USERNAME=homestead&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#DB_PASSWORD=secret&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;SQLite 데이터베이스를 만든다.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/thrift-example-project &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;touch database/database.sqlite
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;thrift-----&quot;&gt;6.2. Thrift가 컴파일한 보일러 플레이트 코드 가져오기&lt;/h3&gt;

&lt;p&gt;우리의 서버 애플리케이션에서는 Apache Thrift 라이브러리와 5절에서 생성한 보일러 플레이트 코드가 필요하다. 깃허브와 컴포저를 이용했는데, 그냥 복사해서 vendor 디렉터리 아래에 붙여 넣어도 된다. &lt;code class=&quot;highlighter-rouge&quot;&gt;composer.json&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;apache/thrift&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;appkr/thrift-example-idl&lt;/code&gt;를 추가한다(5절에서 만든 보일러 플레이트 코드는 packagist.org에 등록되어 있지 않으므로, &lt;code class=&quot;highlighter-rouge&quot;&gt;composer.json&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;repositories&lt;/code&gt; 키를 이용했다).&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;composer.json&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;laravel/laravel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;repositories&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;vcs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;git@github.com:appkr/thrift-example-idl.git&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;require&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;php&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;=5.6.4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;laravel/framework&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;5.3.*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;apache/thrift&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dev-master&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;appkr/thrift-example-idl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dev-master&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;방금 추가한 라이브러리를 프로젝트로 끌어온다. 혹시 명령 수행 과정에 &lt;code class=&quot;highlighter-rouge&quot;&gt;minimimum-stability&lt;/code&gt; 설정에 문제가 있다면, 위 두 개의 의존성을 &lt;code class=&quot;highlighter-rouge&quot;&gt;composer.json&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;require-dev&lt;/code&gt; 키 아래로 옮기거나, &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;minimum-stability&quot;:&quot;dev&quot;&lt;/code&gt; 설정을 &lt;code class=&quot;highlighter-rouge&quot;&gt;composer.json&lt;/code&gt;에 추가하여 해결할 수 있다. 실 프로젝트에서는 IDL 인터페이스 프로젝트의 컴파일 결과를 별도 브랜치로 옮기거나 태그로 달아 이 문제를 피할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/thrift-example-project &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;composer update
&lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The compiled class file has been removed.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-5&quot;&gt;6.3. 서비스 개발&lt;/h3&gt;

&lt;h4 id=&quot;section-6&quot;&gt;6.3.1. 데이터 준비&lt;/h4&gt;

&lt;p&gt;모델과 마이그레이션을 만들고 테스트에 사용할 데이터를 만든다.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/thrift-example-project &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;php artisan make:model Post --migration
&lt;span class=&quot;c&quot;&gt;# Created ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;4절 에서 정의한 대로 &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;content&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;created_at&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;updated_at&lt;/code&gt; 컬럼을 정의한다.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// database/migrations/YYYY_MM_DD_hhiiss_create_posts_table.php
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Illuminate\Support\Facades\Schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Illuminate\Database\Schema\Blueprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Illuminate\Database\Migrations\Migration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreatePostsTable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Migration&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;Schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'posts'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Blueprint&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;increments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'title'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'content'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;timestamps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;Schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dropIfExists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'posts'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;마이그레이션(테이블 스키마를 생성)한다.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/thrift-example-project &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;php artisan migrate
&lt;span class=&quot;c&quot;&gt;# Migrated: YYYY_MM_DD_hhiiss_create_posts_table&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;방금 만든 테이블에 테스트 데이터를 채우기 위해 모델 팩토리를 만든다.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// database/factory/ModelFactory.php
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App\Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Faker\Generator&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$faker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'title'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$faker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sentence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'content'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$faker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;paragraph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;팅커 REPL을 실행하고, 방금 만든 모델 팩토리로 포스트 100개를 만든다.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/thrift-example-project &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;php artisan tinker
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;factory&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;App&lt;span class=&quot;se&quot;&gt;\P&lt;/span&gt;ost::class, 100&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;-&amp;gt;create&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;;
&lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-7&quot;&gt;6.3.2. 라우팅 및 컨트롤러&lt;/h4&gt;

&lt;p&gt;클라이언트가 접근할 수 있는 URL 엔드포인트가 필요하다. Thrift에서는 모든 데이터를 HTTP 본문으로 보내기 때문에 HTTP &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; 메서드로 요청을 보내고 받아야 한다.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// routes/api.php
&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'posts'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'PostsController@handle'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;컨트롤러를 만들고,&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/thrift-example-project &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;php artisan make:controller PostsController
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;컨트롤러의 내용을 채운다.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// app/Http/Controllers/PostsController.php
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App\Http\Controllers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App\Services\PostService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// 직접 만들어야 한다.
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App\Thrift\ThriftResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;// 직접 만들어야 한다.
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Appkr\Thrift\Post\PostServiceProcessor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                                        &lt;span class=&quot;c1&quot;&gt;// 5절에서 IDL 정의에 의해 Thrift 컴파일러가 생성해 준 파일이다. 
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Illuminate\Http\Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostsController&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Controller&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PostService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 서비스 인스턴스를 생성한다.
&lt;/span&gt;        &lt;span class=&quot;nv&quot;&gt;$processor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PostServiceProcessor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                                        &lt;span class=&quot;c1&quot;&gt;// 서비스 인스턴스를 프로세서에 주입한다.
&lt;/span&gt;        
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ThriftResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$processor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                                        &lt;span class=&quot;c1&quot;&gt;// HTTP 요청을 Process하고 HTTP 응답을 반환한다.
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PostService&lt;/code&gt;는 우리가 직접 만들어야 하는 메인 서비스 코드다. 이 서비스 인스턴스를 &lt;code class=&quot;highlighter-rouge&quot;&gt;PostServiceProcessor&lt;/code&gt;에 주입한다. 프로세서는 앞 절에서 Thrift가 만들어준 코드다.&lt;/p&gt;

&lt;p&gt;다음 그림은 Thrift의 네트워크 스택이다. &lt;code class=&quot;highlighter-rouge&quot;&gt;Transport&lt;/code&gt;는 HTTP 서버와 클라이언트다. &lt;code class=&quot;highlighter-rouge&quot;&gt;Protocol&lt;/code&gt; 객체는 입력 및 출력 스트림(HTTP 본문)을 읽거나 쓰고, Thrift 객체로 (역)직렬화한다. &lt;code class=&quot;highlighter-rouge&quot;&gt;Processor&lt;/code&gt;는 매니저와 같은 역할로, 역직렬화된 입력 스트림을 넘겨 받아 생성자로 받은 서비스 객체에게 처리를 위임하고 리턴 값을 받아 &lt;code class=&quot;highlighter-rouge&quot;&gt;Protocol&lt;/code&gt;에게 넘겨주는 일을 한다.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;         +--------------------------------------------+
         |                    Service                 |
         |                   &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;직접 구현&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;                |
         +--------------------------------------------+
         |     ↑              Processor         ↓     |
         |                &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;컴파일러가 자동 생성&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;           |
         +--------------------------------------------+
         |     ↑&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;역직렬화&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      Protocol    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;직렬화&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;↓     |
         |         &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Thrift 라이브러리에 포함되어 있음&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      |
         +--------------------------------------------+
 --wire-&amp;gt;|                   Transport                |--wire-&amp;gt;
         |         &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Thrift 라이브러리에 포함되어 있음&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      |
         +--------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;컨트롤러에서 본 &lt;code class=&quot;highlighter-rouge&quot;&gt;ThriftResponse&lt;/code&gt;를 만든다.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// app/Thrift/ThriftResponse.php
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App\Thrift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Illuminate\Http\Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Thrift\Protocol\TCompactProtocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 바이너리보다 더 가볍다(apache/thrift 라이브러리가 제공).
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Thrift\Transport\TMemoryBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Thrift\Protocol\TJSONProtocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// 디버깅할 때 편하다(apache/thrift 라이브러리가 제공). 
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Thrift\Protocol\TBinaryProtocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 대표적 프로토콜이다(apache/thrift 라이브러리가 제공).
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UnexpectedValueException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ThriftResponse&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$processor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$readTransport&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TMemoryBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$writeTransport&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TMemoryBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                                        &lt;span class=&quot;c1&quot;&gt;// (역)직렬화 전에 HTTP 요청/응답을 바이트 단위로 읽고
&lt;/span&gt;                                        &lt;span class=&quot;c1&quot;&gt;// 쓰기 위한 임시 저장소다.  
&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;// 프로토콜 객체를 만든다.
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'json'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$readProtocol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TJSONProtocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$readTransport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$writeProtocol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TJSONProtocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$writeTransport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'binary'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$readProtocol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TBinaryProtocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$readTransport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$writeProtocol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TBinaryProtocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$writeTransport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'compact'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$readProtocol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TCompactProtocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$readTransport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$writeProtocol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TCompactProtocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$writeTransport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UnexpectedValueException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nv&quot;&gt;$readTransport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$writeTransport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$processor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$readProtocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$writeProtocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                                        &lt;span class=&quot;c1&quot;&gt;// 프로세서에서 역직렬화된 HTTP 요청 본문과
&lt;/span&gt;                                        &lt;span class=&quot;c1&quot;&gt;// HTTP 응답을 쓸 수 있는 객체를 인자로 넘긴다.
&lt;/span&gt;        &lt;span class=&quot;nv&quot;&gt;$readTransport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$writeTransport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;nv&quot;&gt;$content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$writeTransport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                                        &lt;span class=&quot;c1&quot;&gt;// 프로세서가 버퍼에 쓴 HTTP 응답 본문을 읽어서 변수에 담는다.
&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Content-Type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'application/x-thrift'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                                        &lt;span class=&quot;c1&quot;&gt;// Content-Type 헤더를 application/thrift로 지정해야 한다. 
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;트랜스포트와 프로토콜 구현은 컴포저로 가져온 Thrift 라이브러리에 이미 포함되어 있으므로 순서에 맞게 잘 조립하기만 하면 된다. 코드에서 보다시피 &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;binary&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;compact&lt;/code&gt; 등의 프로토콜을 이용할 수 있다. 이 코드는 한번 짜놓으면 바꿀 일이 거의 없으므로 내용을 따지지 말고 그냥 공식처럼 가져다 쓰자.&lt;/p&gt;

&lt;h4 id=&quot;section-8&quot;&gt;6.3.3. 서비스 개발&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PostServiceIf&lt;/code&gt;는 Thrift가 IDL로 자동 생성한 PHP의 클래스 인터페이스다. IDL에 정의했듯이 이 인터페이스는&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;list&amp;lt;ThriftPost&amp;gt; all(QueryFilter $qf, int $offset, int $limit)&lt;/code&gt;,&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ThriftPost find(int $id)&lt;/code&gt;,&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ThriftPost store(string $title, string $content)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;API를 가지고 있으므로 여기서 구현해 주면 된다. IDL에 의하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;\Appkr\Thrift\Post\Post&lt;/code&gt; 객체지만, &lt;code class=&quot;highlighter-rouge&quot;&gt;App\Post&lt;/code&gt; 엘로퀀트 모델과 구분을 위해 일부러 &lt;code class=&quot;highlighter-rouge&quot;&gt;ThriftPost&lt;/code&gt;로 썼다.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// app/Service/PostsService.php
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App\Services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Appkr\Thrift\Post\Post&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ThriftPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Appkr\Thrift\Post\PostServiceIf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostService&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PostServiceIf&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;\Appkr\Thrift\Post\QueryFilter&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$qf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;\App\Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                                        &lt;span class=&quot;c1&quot;&gt;// $offset을 건너뛰고 $limit개의 포스트를 조회하는 엘로퀀트 쿼리다. 
&lt;/span&gt;                                        &lt;span class=&quot;c1&quot;&gt;// QueryFilter는 이번 포스트에서는 쓰지 않는다.
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$posts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ThriftPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;                      &lt;span class=&quot;c1&quot;&gt;// EloquentCollection을 순회하면서 ThriftPost 객체에 맵핑해 준다.
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;\App\Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ThriftPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;\App\Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ThriftPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;각 API 들이 IDL에서 정의한 &lt;code class=&quot;highlighter-rouge&quot;&gt;list&amp;lt;ThriftPost&amp;gt;&lt;/code&gt; 및 &lt;code class=&quot;highlighter-rouge&quot;&gt;ThriftPost&lt;/code&gt; 타입을 반환해야 하므로, &lt;code class=&quot;highlighter-rouge&quot;&gt;all()&lt;/code&gt; 메서드에서는 엘로퀀트 쿼리에 의해 번환된 &lt;code class=&quot;highlighter-rouge&quot;&gt;EloquentCollection&lt;/code&gt; 객체를 순회하면서 &lt;code class=&quot;highlighter-rouge&quot;&gt;ThriftPost&lt;/code&gt; 객체로 맵핑해 주었다.&lt;/p&gt;

&lt;h4 id=&quot;section-9&quot;&gt;6.3.4. 작동 테스트&lt;/h4&gt;

&lt;p&gt;PHP 프로젝트니까 PHPUnit 테스트에서 Thrift 클라이언트를 만들고 같은 프로젝트에 있는 Thrift 서버로 요청을 보내서 정상 작동을 테스트해 볼 것이다.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// tests/ThriftClientTest.php
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ThriftClientTest&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TestCase&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;nv&quot;&gt;$transport&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;\Thrift\Transport\THttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'localhost'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'8000'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'api/posts'&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                              &lt;span class=&quot;c1&quot;&gt;// apache/thrfit 라이브러에서 제공하는 HTTP 클라이언트다.
&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$protocol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;\Thrift\Protocol\TJSONProtocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$transport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                                        &lt;span class=&quot;c1&quot;&gt;// 편의를 위해 JSONProtocol을 이용했다.
&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;\Appkr\Thrift\Post\PostServiceClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$protocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                                        &lt;span class=&quot;c1&quot;&gt;// IDL 컴파일할 때 자동 생성된 클라이언트다. 
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$queryFilter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;\Appkr\Thrift\Post\QueryFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'keyword'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Lorem'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'sortBy'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;\Appkr\Thrift\Post\PostField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CREATED_AT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'sortDirection'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;\Appkr\Thrift\Post\SortDirection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DESC&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;                             &lt;span class=&quot;c1&quot;&gt;// QueryFilter 객체를 만들었다.
&lt;/span&gt;                                        &lt;span class=&quot;c1&quot;&gt;// 앞서 언급했듯이 연관 배열 형식으로 객체를 만들 수 있다.
&lt;/span&gt;                                        &lt;span class=&quot;c1&quot;&gt;// 정의하지 않은 필드는 무시된다. 예) 'foo' =&amp;gt; 'bar'는 무시됨.
&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$queryFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                                        &lt;span class=&quot;c1&quot;&gt;// 로컬 라이브러리의 API를 호출하듯이 원격 API를 호출한다.
&lt;/span&gt;                                        &lt;span class=&quot;c1&quot;&gt;// 마치 Guzzle이나, aws-php-sdk를 쓰는 것과 비슷하다. 
&lt;/span&gt;        &lt;span class=&quot;nb&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testFind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'Lorem content'&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;테스트를 하려면 웹 서버가 필요한데 PHP 내장 웹서버를 이용하자.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/thrift-example-project &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;php artisan serve
&lt;span class=&quot;c&quot;&gt;# Laravel development server started on http://localhost:8000/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;새 콘솔 창을 열고 PHPUnit 명령으로 서버에 요청을 보내고 정상적인 응답을 받는지 확인한다.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/thrift-example-project &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vendor/bin/phpunit
&lt;span class=&quot;c&quot;&gt;# PHPUnit 5.6.2 by Sebastian Bergmann and contributors.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# OK (3 tests, 0 assertions)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016-11-04-img-02.png&quot;&gt;&lt;img src=&quot;/images/2016-11-04-img-02.png&quot; alt=&quot;PHPUnit&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-10&quot;&gt;7. 결론&lt;/h2&gt;

&lt;p&gt;Thrift 클라이언트가 보낸 HTTP 요청 본문은 이렇게 생겼다. &lt;code class=&quot;highlighter-rouge&quot;&gt;JSONProtocol&lt;/code&gt;을 썼으니 그나마 읽을 수 있는 것이지, &lt;code class=&quot;highlighter-rouge&quot;&gt;BinaryProtocol&lt;/code&gt;을 쓰면 전혀 읽을 수 없는 본문이 전달된다.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# storage/logs/laravel.log&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2016-11-04 17:09:27] local.INFO: HTTP Body &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[1,&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,1,0,{&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;rec&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Lorem&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:3},&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:2}}},&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:0},&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:10}}]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2016-11-04 17:09:27] local.INFO: HTTP Body &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[1,&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,1,0,{&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:10}}]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2016-11-04 17:09:27] local.INFO: HTTP Body &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[1,&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,1,0,{&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Lorem content&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;}}]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;디버깅이 지극히 힘들다. Thrift 트랜젝션에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;var_dump($var)&lt;/code&gt;라도 찍으면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Thrift\Exception\TProtocolException&lt;/code&gt; 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Thrift\Exception\TTransportException&lt;/code&gt;이 바로 떨어진다. 웹 브라우저와 HTTP 클라이언트를 이용하는 것이 아닐 뿐더러, 껍데기만 HTTP일뿐(Tcp도 가능하다고 한다) 완전 다른 프로토콜이므로 라라벨 로그에 의존해서 디버깅 해야 한다. 그럼에도 장점은 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;(봤다시피) 마치 원격 API를 로컬 라이브러리의 API처럼 호출한다. 따라서 클라이언트는 편하다.&lt;/li&gt;
  &lt;li&gt;각 플랫폼별 코드 뿐만아니라, (예쁘지는 않지만) 문서까지도 자동 생성해 준다.&lt;/li&gt;
  &lt;li&gt;클라이언트가 문서를 읽고 이해해서 데이터 형식에 맞추거나, 서버가 데이터 형식에 대한 유효성을 검사하는데 신경을 덜 쓸 수 있다.&lt;/li&gt;
  &lt;li&gt;빠르다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thrift 요청과 응답은 Thrift의 프로토콜 안쪽에서 (역)직렬화 되므로, PHP 변수나 객체로 값을 검사하려면 프로토콜 안쪽에서 해야 한다. 2부에서는 Thrift 프로토콜 안쪽에서 작동하는 미들웨어를 만들어서 예외를 잡고 소비하는 방법을 다룰 예정이다.&lt;/p&gt;

&lt;div class=&quot;spacer&quot;&gt;• • •&lt;/div&gt;

&lt;p&gt;이번 포스트의 예제 프로젝트는&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/appkr/thrift-example-idl&quot;&gt;https://github.com/appkr/thrift-example-idl&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/appkr/thrift-example-project&quot;&gt;https://github.com/appkr/thrift-example-project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;에 공개되어 있다.&lt;/p&gt;
</description>
        <pubDate>Fri, 04 Nov 2016 00:00:00 +0900</pubDate>
        <link>http://blog.appkr.kr/work-n-play/how-to-use-apache-thrift-in-php-part-1/</link>
        <guid isPermaLink="true">http://blog.appkr.kr/work-n-play/how-to-use-apache-thrift-in-php-part-1/</guid>
        
        <category>개발자</category>
        
        <category>rpc</category>
        
        <category>apache thrift</category>
        
        
        <category>work-n-play</category>
        
      </item>
    
      <item>
        <title>제너레이터 이해하기</title>
        <description>&lt;p&gt;제너레이터(generator)는 대용량 데이터를 순회하며 작업할 때 유용한 기능이며, 대부분의 프로그래밍 언어에서 찾아볼 수 있다. 언어만 다를 뿐 개념은 모두 같다. 이 포스트는 자바스크립트 및 PHP 제너레이터에 대한 필자 나름의 이해 방식을 기록한 것이다.&lt;/p&gt;

&lt;!--more--&gt;
&lt;div class=&quot;spacer&quot;&gt;• • •&lt;/div&gt;

&lt;h2 id=&quot;es6&quot;&gt;1. 예제 - ES6&lt;/h2&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Hello Generator!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ES6에서는 함수 선언에 별표(&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;)를 붙여서 함수가 아니라 제너레이터임을 표시한다. &lt;code class=&quot;highlighter-rouge&quot;&gt;iterator&lt;/code&gt; 변수에 방금 만든 제너레이터를 할당했다. 변수 이름에서 알 수 있듯이 함수의 모양을 빌렸지만, 개념적으로는 이터레이터(반복기)다.&lt;/p&gt;

&lt;p&gt;함수 시작부에 &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log('Hello Generator!');&lt;/code&gt;를 찍었지만 아무일도 일어나지 않았다. 지금은 대기 상태라 할 수 있다. 제너레이터를 실행하려면 &lt;code class=&quot;highlighter-rouge&quot;&gt;next()&lt;/code&gt; 메서드를 호출하면 된다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Hello Generator!&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Object {value: 1, done: false}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;이제 제너레이터 객체를 생성하고 첫번째 &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt; 키워드까지 실행한다. &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt; 키워드는 값을 반환한다는 측면에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; 키워드와 비슷하면서도 다르다. &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt;은 뒤에 나오는 로직을 전부 무시하지만, &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;iterator&lt;/code&gt;가 불러주면 또 다시 동작한다. &lt;code class=&quot;highlighter-rouge&quot;&gt;done: false&lt;/code&gt;를 주목한다.&lt;/p&gt;

&lt;p&gt;또 실행한다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Object {value: 2, done: false}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;console.log(...)&lt;/code&gt;와 첫번째 &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt; 키워드는 건너뛰었다. 두번째 &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt; 키워드에 의해 &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt;는 2로 바뀌었지만 아직 &lt;code class=&quot;highlighter-rouge&quot;&gt;done: flase&lt;/code&gt;이다.&lt;/p&gt;

&lt;p&gt;한번 더 실행한다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Object {value: undefined, done: true}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;이제 더 이상 실행할 &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt; 키워드가 없다. &lt;code class=&quot;highlighter-rouge&quot;&gt;done: true&lt;/code&gt;로 바뀌었다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016-08-10-img-01.png&quot;&gt;&lt;img src=&quot;/images/2016-08-10-img-01.png&quot; alt=&quot;Generator in action&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;2. 해부하기&lt;/h2&gt;

&lt;p&gt;앞 절에서 실험한 내용을 그림으로 정리하면 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iterator                                numbers(generator instance)
|                                       |
|next();───────────────────────────────&amp;gt;|console.log(...); 실행
|                                       |yield 1; 실행하고 상태 저장
|                       Hello Generator!|
|                {value: 1, done: false}|
|&amp;lt;──────────────────────────────────────|
|next();───────────────────────────────&amp;gt;|yield 2; 실행하고 상태 저장
|                {value: 2, done: false}|
|&amp;lt;──────────────────────────────────────|
|next();───────────────────────────────&amp;gt;|더 이상 실행할 로직이 없음
|         {value: undefined, done: true}|
|&amp;lt;──────────────────────────────────────|
|                                       |
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;전부 정리해 보면 제너레이터는(개인적인 이해일 뿐이다)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;일회용 이터레이터다.&lt;/li&gt;
  &lt;li&gt;호출하는 쪽에서 이터레이션의 시작과 다음 이터레이션을 제어할 수 있다(On-demand Iteration).&lt;/li&gt;
  &lt;li&gt;어디까지 실행했는지 상태를 가진 객체다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;php&quot;&gt;3. 예제 - PHP&lt;/h2&gt;

&lt;p&gt;실전에 사용한 예제는 AWS PHP SDK에서 찾아 볼 수 있다. AWS SDK에서 이터레이션은 거의 대부분 제너레이터를 사용하는 것을 볼 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// https://github.com/aws/aws-sdk-php/blob/master/src/functions.php#L49
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Aws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;/**
 * Applies a map function $f to each value in a collection.
 *
 * @param mixed    $iterable Iterable sequence of data.
 * @param callable $f        Map function to apply.
 *
 * @return \Generator
 */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$iterable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callable&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$iterable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;이렇게 사용할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$generator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Aws\map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$generator&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PHP_EOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;이 예제에서는 큰 차이를 못 느낄 수 있지만, 배열 요소 하나가 큰 데이터를 가지고 있을 때는 제너레이터를 쓰지 않고는 &lt;code class=&quot;highlighter-rouge&quot;&gt;php.ini&lt;/code&gt; 설정에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;memory_limit&lt;/code&gt; 값을 엄청 늘려야 할 것이다. 배열 순회에 필요한 모든 데이터를 메모리에 적재한 후 실행하는 것과, 이번 순회에 필요한 데이터만 읽어오는 차이가 있다.&lt;/p&gt;
</description>
        <pubDate>Sun, 02 Oct 2016 00:00:00 +0900</pubDate>
        <link>http://blog.appkr.kr/learn-n-think/understanding-generator/</link>
        <guid isPermaLink="true">http://blog.appkr.kr/learn-n-think/understanding-generator/</guid>
        
        <category>개발자</category>
        
        <category>generator</category>
        
        
        <category>learn-n-think</category>
        
      </item>
    
      <item>
        <title>API 인증 - Json Web Token</title>
        <description>&lt;p&gt;10월 5일에 있을 모던 PHP 유저 그룹 10월 정기 모임 발표 자료입니다. 라라벨 프로젝트에서 Json Web Token을 적용하는 구현을 라이브로 진행합니다. 관심 있는 분들은 7시 30분 학동역 옐로우스토리 지하 1층 카페로 오시면 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-10-01-img-01.png&quot; alt=&quot;API 인증 - Json Web Token&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;panel panel-default&quot; style=&quot;width:100%; max-width: 600px; margin: 1em auto;&quot;&gt;
  &lt;div class=&quot;panel-body text-center&quot;&gt;
    &lt;a href=&quot;https://drive.google.com/open?id=0Bx8_tW_C70eNMHpiRk93dUt6NFU&quot;&gt;
      &lt;i class=&quot;material-icons&quot;&gt;open_in_browser&lt;/i&gt;
      브라우저에서 슬라이드 열기
    &lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 01 Oct 2016 00:00:00 +0900</pubDate>
        <link>http://blog.appkr.kr/work-n-play/json-web-token/</link>
        <guid isPermaLink="true">http://blog.appkr.kr/work-n-play/json-web-token/</guid>
        
        <category>개발자</category>
        
        <category>API</category>
        
        <category>JWT</category>
        
        
        <category>work-n-play</category>
        
      </item>
    
      <item>
        <title>RoRLab 워크숍 후기</title>
        <description>&lt;p&gt;이 슬라이드는 RoRLab에서 주최하는 &lt;a href=&quot;http://rorlab.org/schedules/1&quot;&gt;“AGIAN2011 Workshop”&lt;/a&gt;의 후기 발표 자료 입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-08-21-img-01.png&quot; alt=&quot;RoRLab 워크숍 후기&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;panel panel-default&quot; style=&quot;width:100%; max-width: 600px; margin: 1em auto;&quot;&gt;
  &lt;div class=&quot;panel-body text-center&quot;&gt;
    &lt;a href=&quot;https://drive.google.com/file/d/0Bx8_tW_C70eNV21ZMHdocDNETUE/view?usp=sharing&quot;&gt;
      &lt;i class=&quot;material-icons&quot;&gt;open_in_browser&lt;/i&gt;
      브라우저에서 슬라이드 열기
    &lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 21 Aug 2016 00:00:00 +0900</pubDate>
        <link>http://blog.appkr.kr/around-me/rorlap-workshop-epilog/</link>
        <guid isPermaLink="true">http://blog.appkr.kr/around-me/rorlap-workshop-epilog/</guid>
        
        <category>개발자</category>
        
        
        <category>around-me</category>
        
      </item>
    
      <item>
        <title>자바스크립트와 프로미스</title>
        <description>&lt;p&gt;자바스크립트를 처음 접했을 때 프로미스(Promise)가 어려웠다. 일반적으로 컴퓨터 프로그램은 여러 개의 로직(작업)을 순차적으로 수행한다. 시간이 오래 걸리는 로직이 끼어 있으면 다음 로직은 앞의 로직이 끝나기를 기다려야 한다.&lt;/p&gt;

&lt;p&gt;자바스크립트도 앞서 언급한 것 처럼 순차적으로 실행되지만, 시간이 오래 걸리는 작업은(e.g. 파일 IO, 네트워크 IO), 작업이 끝나면 실행할 콜백을 심어 놓고, 그냥 다음 로직으로 진행한다. 콜백에 콜백을 등록하고, 또 그 콜백에 콜백을 등록하는 “콜백 지옥”을 경험하게 된다. 콜백 지옥을 완화하기 위해 자바스크립트가 제시한 방안이 프로미스다.&lt;/p&gt;

&lt;p&gt;난 프로미스를 임시로 고용한 작업자라고 이해했다. ‘난 바빠서 다음 일 처리하러 가야 하는데요. 철수님, “Foo” 작업을 대신 좀 봐 주세요. 대략 5초 정도 걸릴거에요. “Foo” 작업이 끝나면 “성공콜백”을 실행해주세요.’&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016-08-07-img-01.png&quot;&gt;&lt;img src=&quot;/images/2016-08-07-img-01.png&quot; alt=&quot;Promise&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이하 코드들은 크롬 콘솔(&lt;kbd&gt;Cmd&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;c&lt;/kbd&gt;)에 붙여 넣으면 동작을 확인해 볼 수 있다.&lt;/p&gt;

&lt;!--more--&gt;
&lt;div class=&quot;spacer&quot;&gt;• • •&lt;/div&gt;

&lt;h2 id=&quot;promise&quot;&gt;1. Promise&lt;/h2&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;철수&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;성공콜백&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;실패콜백&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'철수 작업자가 할당되었습니다.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
  &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'5초가 필요한 &quot;Foo&quot; 작업을 시뮬레이션합니다.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;err&quot;&gt;성공콜백&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;철수&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;작업이름&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;작업이름&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&quot; 작업이 성공하면 철수에게 실행해 달라고 부탁한 로직입니다. 이 메시지가 표시된다면 철수가 로직을 실행한 것입니다.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;철수&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Promise&lt;/code&gt; 클래스의 인스턴스다. &lt;code class=&quot;highlighter-rouge&quot;&gt;Promise&lt;/code&gt; 클래스는 &lt;code class=&quot;highlighter-rouge&quot;&gt;then()&lt;/code&gt; API를 가지고 있고, 함수를 인자로 받는다. 인자로 받은 함수는 다시 성공 또는 실패했을 때 실행할 콜백을 인자로 받는다.&lt;/p&gt;

&lt;p&gt;자바스크립트는 개발자가 제어할 수 없는 클라이언트에서 작동하고, 클라이언트 측의 인코딩때문에 어떤 문제가 발생할 지 전혀 예측할 수 없다. 실무에서 한글 코딩은 비추한다.&lt;/p&gt;

&lt;h2 id=&quot;es6&quot;&gt;2. ES6&lt;/h2&gt;

&lt;p&gt;똑같은 코드를 ES6로 쓰면,&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;철수&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;성공콜백&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;실패콜백&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'철수 작업자가 할당되었습니다.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
  &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'5초가 필요한 &quot;Foo&quot; 작업을 시뮬레이션합니다.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;err&quot;&gt;성공콜백&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;철수&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;작업이름&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${작업이름}&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;작업이&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;성공하면&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;철수에게&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;실행해&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;달라고&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;부탁한&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;로직입니다&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;이&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;메시지가&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;표시된다면&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;철수가&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;로직을&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;실행한&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;것입니다&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;오늘도 Coffee 스크립트를 많이 사용하는 프레임워크 모임에 다녀왔는데, 이제 Coffee를 쓸 이유가 없다. ES6가 Coffee의 문법을 거의 대부분 채택하고 있기 때문이다. 그림에서 보다시피 최신 브라우저에서는 ES6 -&amp;gt; ES5 컴파일하지 않고도 최신 문법이 작동한다&lt;small&gt;(내 최신 브라우저에서 작동한다고, 다른 이의 브라우저에서 작동한다고 보장할 수 없으므로 아직은 컴파일해야 한다)&lt;/small&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;Prototype&lt;/code&gt;등 익숙치 않은 개념은 이제 &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;constructor&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; 등 다른 언어에서 항상 쓰던 문법으로 교체되었다.&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;3. 결론&lt;/h2&gt;

&lt;p&gt;자고 일어나면 새로운 기술이 나오는 시대에서 풀 스택 웹 개발자로 살아가기란 힘들다. 나처럼 서버 사이드에서 시작한 사람이 자바스크립트를 익힐 때 가장 먼저 만난 벽은 이벤트 프로그래밍이었고(&lt;a href=&quot;http://laravel.io/bin/zjvNv&quot;&gt;블로킹 vs 논-블로킹 IO, Sync vs Async&lt;/a&gt;), 그 중에서도 프로미스였다. 이 포스트는 나만의 프로미스 이해 방식을 정리한 것이다.&lt;/p&gt;

&lt;p&gt;풀스택 개발자를 지향하는 후배들이 조언을 요청하면 요즘은 항상 이렇게 답해준다. 2016년에 배워야 할 프런트 엔드 기술은 1) &lt;a href=&quot;http://es6-features.org&quot;&gt;ES6&lt;/a&gt; 2) 본문에 언급은 없었지만, 제이쿼리에서 &lt;a href=&quot;http://vuejs.org/&quot;&gt;Vue.js&lt;/a&gt;등 양방향 데이터 바인딩을 지원하는 라이브러리로 마이그레이션하는 것, 두 가지라고. 여유가 된다면 3) 빌드 시스템과 4) 태스크 러너도 배우면 좋다.&lt;/p&gt;

&lt;p&gt;다행히 내가 주력으로 하는 라라벨 웹 프레임워크는 &lt;a href=&quot;https://webpack.github.io/&quot;&gt;Webpack&lt;/a&gt; 빌드 시스템과, &lt;a href=&quot;http://gulpjs.com/&quot;&gt;Gulp&lt;/a&gt; 태스크 러너를 기본으로 사용하고 있어 두 개의 짐은 덜었다.&lt;/p&gt;
</description>
        <pubDate>Sun, 07 Aug 2016 00:00:00 +0900</pubDate>
        <link>http://blog.appkr.kr/learn-n-think/javascript-promise-101/</link>
        <guid isPermaLink="true">http://blog.appkr.kr/learn-n-think/javascript-promise-101/</guid>
        
        <category>개발자</category>
        
        <category>javascript</category>
        
        
        <category>learn-n-think</category>
        
      </item>
    
      <item>
        <title>RESTFul URL 설계 (@ModernPUG)</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;1. 발표 자료&lt;/h2&gt;

&lt;p&gt;이 슬라이드는 Modern PHP User Group 8월 정기 모임 발표 자료입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-08-03-img-01.png&quot; alt=&quot;RESTful URL 설계&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;panel panel-default&quot; style=&quot;width:100%; max-width: 600px; margin: 1em auto;&quot;&gt;
  &lt;div class=&quot;panel-body text-center&quot;&gt;
    &lt;a href=&quot;/files/restful-url-design.pdf&quot;&gt;
      &lt;i class=&quot;material-icons&quot;&gt;open_in_browser&lt;/i&gt;
      브라우저에서 슬라이드 열기
    &lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;!--more--&gt;
&lt;div class=&quot;spacer&quot;&gt;• • •&lt;/div&gt;

&lt;h2 id=&quot;section-1&quot;&gt;2. 광고&lt;/h2&gt;

&lt;p&gt;발표 자료 말미에 나오는 광고의 상세 내용입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-08-03-img-02.png&quot; alt=&quot;메쉬코리아에서 개발자를 찾습니다&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;panel panel-default&quot; style=&quot;width:100%; max-width: 600px; margin: 1em auto;&quot;&gt;
  &lt;div class=&quot;panel-body text-center&quot;&gt;
    &lt;a href=&quot;https://drive.google.com/file/d/0Bx8_tW_C70eNVFRrRDJxMy15dDA/view?usp=sharing&quot; target=&quot;_blank&quot;&gt;
      &lt;i class=&quot;material-icons&quot;&gt;open_in_browser&lt;/i&gt;
      브라우저에서 슬라이드 열기
    &lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-2&quot;&gt;2.1. 뭐하는 회사냐구요?&lt;/h3&gt;

&lt;p&gt;제가 이번 달부터 정착한 ‘물류 IT’ 기업입니다. 뭐하는 지 한방에 설명할 때는 동영상이 쉽죠~&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=lOqqLXRQvAo&quot;&gt;&lt;img src=&quot;https://i.ytimg.com/vi/lOqqLXRQvAo/hqdefault.jpg&quot; alt=&quot;부탁해 혜리 20초&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;2.2. 괜찮아요!&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;젊습니다.&lt;/li&gt;
  &lt;li&gt;주니어: 저를 포함해서(^^) 이끌어 주실 어벤저스 사수들이 많습니다.&lt;/li&gt;
  &lt;li&gt;중견 경력자: 안정적인 업무 환경, 도전적인 프로젝트의 기회가 가득합니다.&lt;/li&gt;
  &lt;li&gt;서버사이드에서 라라벨(PHP), 스프링(Java), 스칼라를 씁니다.&lt;/li&gt;
  &lt;li&gt;iOS, Android, ReactJS, WPF 클라이언트를 개발합니다.&lt;/li&gt;
  &lt;li&gt;삼성동 봉은사역 소재, 총 직원 130명, 연구소 35명&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 03 Aug 2016 00:00:00 +0900</pubDate>
        <link>http://blog.appkr.kr/work-n-play/restful-url-design-pug/</link>
        <guid isPermaLink="true">http://blog.appkr.kr/work-n-play/restful-url-design-pug/</guid>
        
        <category>개발자</category>
        
        <category>rest</category>
        
        
        <category>work-n-play</category>
        
      </item>
    
      <item>
        <title>페이스북으로 데스크탑 라이브 스트리밍 하기</title>
        <description>&lt;p&gt;최근 페이스북에 추가된 훌륭한 기능 중에 하나가 ‘라이브’다. 그런데 모바일 페이스북에서만 가능하고, 데스크탑의 브라우저를 통해 접속한 페이스북에서는 불가능한다. 이 포스트에서는 데스크탑 스크린을 페이스북을 통해 라이브 스트리밍하는 방법을 다룬다. 라이브 코딩 등의 목적으로 활용하면 좋을 듯 하다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016-07-21-img-06.png&quot;&gt;&lt;img src=&quot;/images/2016-07-21-img-06.png&quot; alt=&quot;방송하기&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;!--more--&gt;
&lt;div class=&quot;spacer&quot;&gt;• • •&lt;/div&gt;

&lt;h2 id=&quot;section&quot;&gt;1. 툴 체인 준비&lt;/h2&gt;

&lt;p&gt;데스크탑을 스트리밍하려면 두 가지가 필요하다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;데스크탑 화면을 캡처하는 도구&lt;/li&gt;
  &lt;li&gt;캡처된 화면을 스트리밍할 서비스(페이스북)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;open-broadcaster-softwareobs&quot;&gt;1.1. Open Broadcaster Software(OBS)&lt;/h3&gt;

&lt;p&gt;OBS는 무료로 쓸 수 있는 오픈소스 화면 캡처 도구다. OS X는 홈브루로 설치할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;brew tap caskroom/cask &lt;span class=&quot;c&quot;&gt;# 기존에 Cask tap을 추가하지 않았다면.&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;brew cask install obs --appdir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/Applications
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;홈브루를 쓰지 못한다면, 직접 &lt;a href=&quot;https://obsproject.com/&quot;&gt;다운로드&lt;/a&gt; 받아 설치하면 된다.&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;1.2. 페이스북 라이브 스트리밍 스타터 개발&lt;/h3&gt;

&lt;p&gt;서두에 말했다시피 데스크탑에서 페이스북 라이브를 시작하는 UI가 없다. UI만 없을 뿐 API는 열려 있다.&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;1.2.1. 개발자가 아니라면&lt;/h4&gt;

&lt;p&gt;1.2.2. 절은 그냥 무시하라. 이 블로그에 만들어 놓은 &lt;a href=&quot;http://blog.appkr.kr/live/&quot;&gt;Facebook Live Streaming Starter&lt;/a&gt;에서 &lt;kbd&gt;Create Live Stream To Facebook&lt;/kbd&gt; 버튼을 이용하면 된다.&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;1.2.2. 개발자라면&lt;/h4&gt;

&lt;h5 id=&quot;section-4&quot;&gt;1단계 페이스북에 앱 등록&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;https://developers.facebook.com/quickstarts/?platform=web&quot;&gt;https://developers.facebook.com/quickstarts/?platform=web&lt;/a&gt; 주소를 방문하여 앱 등록 절차를 거친다.&lt;/p&gt;

&lt;p&gt;앱 등록을 마치면 &lt;code class=&quot;highlighter-rouge&quot;&gt;앱 ID&lt;/code&gt;가 발급된다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016-07-21-img-01.png&quot;&gt;&lt;img src=&quot;/images/2016-07-21-img-01.png&quot; alt=&quot;페이스북 앱 대시보드&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;section-5&quot;&gt;2단계 스타터 페이지 개발&lt;/h5&gt;

&lt;p&gt;이제 로컬에서 코드 에디터를 열고 HTML 페이지를 만든다. 자바스트립트에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;YOUR_APP_ID&lt;/code&gt;라 자리표시해 놓은 부분을 1단계에서 얻은 본인의 &lt;code class=&quot;highlighter-rouge&quot;&gt;앱 ID&lt;/code&gt;로 교체한다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!--// whatever/index.html --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Facebook Live Streaming Starter&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;liveButton&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    Create Live Stream To Facebook
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 페이스북 SDK 임포트 및 초기화&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// https://developers.facebook.com/docs/javascript/quickstart &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 에서 최신 스크립트를 확인하고 사용하시길 권장한다.&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fbAsyncInit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;FB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;appId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;YOUR_APP_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;xfbml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'v2.5'&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fjs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;//connect.facebook.net/en_US/sdk.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;fjs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;insertBefore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fjs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'script'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'facebook-jssdk'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 페이스북 라이브 스트리밍 스타터&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// https://developers.facebook.com/docs/videos/live-video-api#golivedialog&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 에서 최신 스크립트를 확인하고 사용하시길 권장한다.&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'liveButton'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;FB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ui&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'popup'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'live_broadcast'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;phase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'create'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'dialog canceled'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'stream url:'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;secure_stream_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;FB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ui&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'popup'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'live_broadcast'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;phase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'publish'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;broadcast_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;video status: \n&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;이렇게 만든 페이지는 페이스북과 통신할 수 있는 상태여야 하므로, 인터넷에 올려야 한다(e.g. 깃허브 페이지 등).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016-07-21-img-02.png&quot;&gt;&lt;img src=&quot;/images/2016-07-21-img-02.png&quot; alt=&quot;페이스북 라이브 스트리밍 스타터 페이지&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;2. 방송하기&lt;/h2&gt;

&lt;h3 id=&quot;section-7&quot;&gt;2.1. 스타터 페이지&lt;/h3&gt;

&lt;p&gt;앞 절에서 만든 스타터 페이지에서 &lt;kbd&gt;Create Live Stream To Facebook&lt;/kbd&gt; 버튼을 누른다. 두 개의 팝업 창이 순차적으로 뜬다.&lt;/p&gt;

&lt;p&gt;첫번째 팝업에서는 그냥 &lt;kbd&gt;다음&lt;/kbd&gt; 버튼을 누른다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016-07-21-img-03.png&quot;&gt;&lt;img src=&quot;/images/2016-07-21-img-03.png&quot; alt=&quot;페이스북 라이브 스트리밍 팝업 #1&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;두번째 팝업에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;스트림 키&lt;/code&gt;를 복사한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016-07-21-img-04.png&quot;&gt;&lt;img src=&quot;/images/2016-07-21-img-04.png&quot; alt=&quot;페이스북 라이브 스트리밍 팝업 #1&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;obs-&quot;&gt;2.2. OBS 설정&lt;/h3&gt;

&lt;h4 id=&quot;section-8&quot;&gt;1단계&lt;/h4&gt;

&lt;p&gt;OBS를 열고 캡처할 소스를 정한다. 화면 전체를 캡처하려면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Display Capture&lt;/code&gt;, 특정 창만 캡처하려면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Window Capture&lt;/code&gt;, 웹캠을 캡처하려면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Video Capture Device&lt;/code&gt;를 선택한다. 영상 믹싱도 가능하고, 별도 마이크를 이용할 수도 있다. UI가 직관적이어서 눈으로 보면 금방 이해할 수 있을 것이다.&lt;/p&gt;

&lt;h4 id=&quot;section-9&quot;&gt;2단계&lt;/h4&gt;

&lt;p&gt;OBS UI에서 &lt;kbd&gt;Settings&lt;/kbd&gt; 버튼을 눌러, &lt;code class=&quot;highlighter-rouge&quot;&gt;Stream&lt;/code&gt; 메뉴를 선택하고 다음과 같이 셋팅한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Service: Facebook Live&lt;/li&gt;
  &lt;li&gt;Stream Key: 앞절에서 복사해 둔 &lt;code class=&quot;highlighter-rouge&quot;&gt;스트림 키&lt;/code&gt; 붙여넣기&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016-07-21-img-05.png&quot;&gt;&lt;img src=&quot;/images/2016-07-21-img-05.png&quot; alt=&quot;OBS 설정&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Video&lt;/code&gt; 메뉴를 선택하고, &lt;code class=&quot;highlighter-rouge&quot;&gt;Output (Scaled) Resolution&lt;/code&gt;을 1280x720 이하로 맞춘다(1280x720을 넘는 영상은 잘린다). 설정을 저장한다.&lt;/p&gt;

&lt;h4 id=&quot;section-10&quot;&gt;3단계&lt;/h4&gt;

&lt;p&gt;OBS UI에서 &lt;kbd&gt;Start Streaming&lt;/kbd&gt; 버튼을 누르면, 앞 절의 두번째 페이스북 팝업에 화면이 표시되기 시작한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016-07-21-img-06.png&quot;&gt;&lt;img src=&quot;/images/2016-07-21-img-06.png&quot; alt=&quot;방송하기&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이 창에서 &lt;kbd&gt;방송하기&lt;/kbd&gt; 버튼을 누르고 라이브 스트리밍을 시작한다.&lt;/p&gt;

&lt;h3 id=&quot;section-11&quot;&gt;보너스. 하드웨어 인코더 사용하기&lt;/h3&gt;

&lt;p&gt;고화질 영상을 x264 소프트웨어 인코더로 인코딩하다보면 CPU가 100%를 치면서 컴퓨터가 터지려할 것이다. 머신에 비디오 인코딩 전용 하드웨어가 장착되어 있다면 CPU의 부하를 덜 수 있다.&lt;/p&gt;

&lt;p&gt;OBS 설정에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Output&lt;/code&gt; 메뉴를 선택하고, &lt;code class=&quot;highlighter-rouge&quot;&gt;Output Mode&lt;/code&gt;를 &lt;code class=&quot;highlighter-rouge&quot;&gt;Advanced&lt;/code&gt;로 바꾸면 인코더를 선택할 수 있는 UI가 활성화된다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016-07-21-img-07.png&quot;&gt;&lt;img src=&quot;/images/2016-07-21-img-07.png&quot; alt=&quot;하드웨어 인코더 활성화&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-12&quot;&gt;3. 결론&lt;/h2&gt;

&lt;p&gt;방송을 끝내고 싶을 때는 OBS UI에서 &lt;kbd&gt;Stop Streaming&lt;/kbd&gt;버튼을 누른다. 아직 정확히 확인하지 못했지만, 방송 중에는 사용자의 영상을 받아 on-the-fly로 HLS(HTTP Live Streaming)으로 바꾸어 시청자의 네트워크 상태에 따라 Bitrate를 조정하며 스트리밍하는 것으로 보인다. 방송이 끝나고 나면 고화질 영상으로 인코딩해서 다시 볼 수 있도록 담벼락에 남겨 준다.&lt;/p&gt;

&lt;p&gt;어제, 그제 생활코딩 춘천편에 자원봉사를 다녀왔는데, egoing님이 기존 수업과 달리 보너스로 &lt;a href=&quot;https://disqus.com/&quot;&gt;Disqus 댓글&lt;/a&gt;, &lt;a href=&quot;https://analytics.google.com&quot;&gt;Google Analytics&lt;/a&gt;,  &lt;a href=&quot;https://uploadcare.com/&quot;&gt;Uploadcare 파일 업로드&lt;/a&gt; 기능을 정적 페이지에 추가하는 데모를 학생들에게 보여 주며, “이게 얼마나 편한건지, 이 기능을 구현하려고 고민/고생해 보지 않은 분은 잘 모를겁니다”라고 말했다.&lt;/p&gt;

&lt;p&gt;마찬가지다. 라이브 스트리밍을 한다는 것은 상상할 수도 없이 어려운 일이다. 설령 직접 구현했다 치더라도, 서버의 트래픽 비용을 감당하기가 만만치 않다. 이걸 페이스북이 전부 거저 해 주는 거다. 게다라 페이스북의 구전 시스템을 통해 컨텐츠를 널리 퍼뜨릴 수 있으니 손 안대고 코 푸는 격이다.&lt;/p&gt;

&lt;p&gt;보통 업계 1위를 하면 관료주의와 매너리즘에 빠지기 일쑤다. 현재에 안주하지 않고 계속 기능을 추가해 나가는 페이스북에 박수를 보낸다.&lt;/p&gt;
</description>
        <pubDate>Thu, 21 Jul 2016 00:00:00 +0900</pubDate>
        <link>http://blog.appkr.kr/work-n-play/facebook-live-streaming/</link>
        <guid isPermaLink="true">http://blog.appkr.kr/work-n-play/facebook-live-streaming/</guid>
        
        <category>facebook</category>
        
        <category>streaming</category>
        
        <category>개발자</category>
        
        
        <category>work-n-play</category>
        
      </item>
    
  </channel>
</rss>
